
FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e4  080057e4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080057ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c84  20000014  08005800  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c98  08005800  00025c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016290  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccf  00000000  00000000  000362d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021693  00000000  00000000  0003b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e6c  00000000  00000000  0005cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d01f9  00000000  00000000  00072a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142c48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d0  00000000  00000000  00142c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005678 	.word	0x08005678

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005678 	.word	0x08005678

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20003ec4 	.word	0x20003ec4

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c8:	f000 b974 	b.w	80005b4 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468e      	mov	lr, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d14d      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f2:	428a      	cmp	r2, r1
 80002f4:	4694      	mov	ip, r2
 80002f6:	d969      	bls.n	80003cc <__udivmoddi4+0xe8>
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	b152      	cbz	r2, 8000314 <__udivmoddi4+0x30>
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	f1c2 0120 	rsb	r1, r2, #32
 8000306:	fa20 f101 	lsr.w	r1, r0, r1
 800030a:	fa0c fc02 	lsl.w	ip, ip, r2
 800030e:	ea41 0e03 	orr.w	lr, r1, r3
 8000312:	4094      	lsls	r4, r2
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	0c21      	lsrs	r1, r4, #16
 800031a:	fbbe f6f8 	udiv	r6, lr, r8
 800031e:	fa1f f78c 	uxth.w	r7, ip
 8000322:	fb08 e316 	mls	r3, r8, r6, lr
 8000326:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800032a:	fb06 f107 	mul.w	r1, r6, r7
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800033a:	f080 811f 	bcs.w	800057c <__udivmoddi4+0x298>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 811c 	bls.w	800057c <__udivmoddi4+0x298>
 8000344:	3e02      	subs	r6, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000350:	fb08 3310 	mls	r3, r8, r0, r3
 8000354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000358:	fb00 f707 	mul.w	r7, r0, r7
 800035c:	42a7      	cmp	r7, r4
 800035e:	d90a      	bls.n	8000376 <__udivmoddi4+0x92>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x29c>
 800036c:	42a7      	cmp	r7, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x29c>
 8000372:	4464      	add	r4, ip
 8000374:	3802      	subs	r0, #2
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	1be4      	subs	r4, r4, r7
 800037c:	2600      	movs	r6, #0
 800037e:	b11d      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 8000380:	40d4      	lsrs	r4, r2
 8000382:	2300      	movs	r3, #0
 8000384:	e9c5 4300 	strd	r4, r3, [r5]
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0xc2>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80ef 	beq.w	8000576 <__udivmoddi4+0x292>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x160>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xd4>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80f9 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0303 	sbc.w	r3, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	469e      	mov	lr, r3
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e0      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ca:	e7dd      	b.n	8000388 <__udivmoddi4+0xa4>
 80003cc:	b902      	cbnz	r2, 80003d0 <__udivmoddi4+0xec>
 80003ce:	deff      	udf	#255	; 0xff
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	f040 8092 	bne.w	80004fe <__udivmoddi4+0x21a>
 80003da:	eba1 010c 	sub.w	r1, r1, ip
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	2601      	movs	r6, #1
 80003e8:	0c20      	lsrs	r0, r4, #16
 80003ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ee:	fb07 1113 	mls	r1, r7, r3, r1
 80003f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f6:	fb0e f003 	mul.w	r0, lr, r3
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x12c>
 80003fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000402:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x12a>
 8000408:	4288      	cmp	r0, r1
 800040a:	f200 80cb 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 800040e:	4643      	mov	r3, r8
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f7 	udiv	r0, r1, r7
 8000418:	fb07 1110 	mls	r1, r7, r0, r1
 800041c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000420:	fb0e fe00 	mul.w	lr, lr, r0
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x156>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x154>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f200 80bb 	bhi.w	80005ae <__udivmoddi4+0x2ca>
 8000438:	4608      	mov	r0, r1
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000442:	e79c      	b.n	800037e <__udivmoddi4+0x9a>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	40b3      	lsls	r3, r6
 800044a:	fa22 fc07 	lsr.w	ip, r2, r7
 800044e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000452:	fa20 f407 	lsr.w	r4, r0, r7
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	431c      	orrs	r4, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000462:	fa00 f306 	lsl.w	r3, r0, r6
 8000466:	fbb1 f8f9 	udiv	r8, r1, r9
 800046a:	0c20      	lsrs	r0, r4, #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fb09 1118 	mls	r1, r9, r8, r1
 8000474:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000478:	fb08 f00e 	mul.w	r0, r8, lr
 800047c:	4288      	cmp	r0, r1
 800047e:	fa02 f206 	lsl.w	r2, r2, r6
 8000482:	d90b      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800048c:	f080 8088 	bcs.w	80005a0 <__udivmoddi4+0x2bc>
 8000490:	4288      	cmp	r0, r1
 8000492:	f240 8085 	bls.w	80005a0 <__udivmoddi4+0x2bc>
 8000496:	f1a8 0802 	sub.w	r8, r8, #2
 800049a:	4461      	add	r1, ip
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a4:	fb09 1110 	mls	r1, r9, r0, r1
 80004a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80004b0:	458e      	cmp	lr, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x1e2>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004bc:	d26c      	bcs.n	8000598 <__udivmoddi4+0x2b4>
 80004be:	458e      	cmp	lr, r1
 80004c0:	d96a      	bls.n	8000598 <__udivmoddi4+0x2b4>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ca:	fba0 9402 	umull	r9, r4, r0, r2
 80004ce:	eba1 010e 	sub.w	r1, r1, lr
 80004d2:	42a1      	cmp	r1, r4
 80004d4:	46c8      	mov	r8, r9
 80004d6:	46a6      	mov	lr, r4
 80004d8:	d356      	bcc.n	8000588 <__udivmoddi4+0x2a4>
 80004da:	d053      	beq.n	8000584 <__udivmoddi4+0x2a0>
 80004dc:	b15d      	cbz	r5, 80004f6 <__udivmoddi4+0x212>
 80004de:	ebb3 0208 	subs.w	r2, r3, r8
 80004e2:	eb61 010e 	sbc.w	r1, r1, lr
 80004e6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ea:	fa22 f306 	lsr.w	r3, r2, r6
 80004ee:	40f1      	lsrs	r1, r6
 80004f0:	431f      	orrs	r7, r3
 80004f2:	e9c5 7100 	strd	r7, r1, [r5]
 80004f6:	2600      	movs	r6, #0
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	40d8      	lsrs	r0, r3
 8000504:	fa0c fc02 	lsl.w	ip, ip, r2
 8000508:	fa21 f303 	lsr.w	r3, r1, r3
 800050c:	4091      	lsls	r1, r2
 800050e:	4301      	orrs	r1, r0
 8000510:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000514:	fa1f fe8c 	uxth.w	lr, ip
 8000518:	fbb3 f0f7 	udiv	r0, r3, r7
 800051c:	fb07 3610 	mls	r6, r7, r0, r3
 8000520:	0c0b      	lsrs	r3, r1, #16
 8000522:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000526:	fb00 f60e 	mul.w	r6, r0, lr
 800052a:	429e      	cmp	r6, r3
 800052c:	fa04 f402 	lsl.w	r4, r4, r2
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x260>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053a:	d22f      	bcs.n	800059c <__udivmoddi4+0x2b8>
 800053c:	429e      	cmp	r6, r3
 800053e:	d92d      	bls.n	800059c <__udivmoddi4+0x2b8>
 8000540:	3802      	subs	r0, #2
 8000542:	4463      	add	r3, ip
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb3 f6f7 	udiv	r6, r3, r7
 800054c:	fb07 3316 	mls	r3, r7, r6, r3
 8000550:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000554:	fb06 f30e 	mul.w	r3, r6, lr
 8000558:	428b      	cmp	r3, r1
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x28a>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000564:	d216      	bcs.n	8000594 <__udivmoddi4+0x2b0>
 8000566:	428b      	cmp	r3, r1
 8000568:	d914      	bls.n	8000594 <__udivmoddi4+0x2b0>
 800056a:	3e02      	subs	r6, #2
 800056c:	4461      	add	r1, ip
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000574:	e738      	b.n	80003e8 <__udivmoddi4+0x104>
 8000576:	462e      	mov	r6, r5
 8000578:	4628      	mov	r0, r5
 800057a:	e705      	b.n	8000388 <__udivmoddi4+0xa4>
 800057c:	4606      	mov	r6, r0
 800057e:	e6e3      	b.n	8000348 <__udivmoddi4+0x64>
 8000580:	4618      	mov	r0, r3
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x92>
 8000584:	454b      	cmp	r3, r9
 8000586:	d2a9      	bcs.n	80004dc <__udivmoddi4+0x1f8>
 8000588:	ebb9 0802 	subs.w	r8, r9, r2
 800058c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000590:	3801      	subs	r0, #1
 8000592:	e7a3      	b.n	80004dc <__udivmoddi4+0x1f8>
 8000594:	4646      	mov	r6, r8
 8000596:	e7ea      	b.n	800056e <__udivmoddi4+0x28a>
 8000598:	4620      	mov	r0, r4
 800059a:	e794      	b.n	80004c6 <__udivmoddi4+0x1e2>
 800059c:	4640      	mov	r0, r8
 800059e:	e7d1      	b.n	8000544 <__udivmoddi4+0x260>
 80005a0:	46d0      	mov	r8, sl
 80005a2:	e77b      	b.n	800049c <__udivmoddi4+0x1b8>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	e732      	b.n	8000410 <__udivmoddi4+0x12c>
 80005aa:	4630      	mov	r0, r6
 80005ac:	e709      	b.n	80003c2 <__udivmoddi4+0xde>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e742      	b.n	800043a <__udivmoddi4+0x156>

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005be:	f000 fad1 	bl	8000b64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c2:	f000 f831 	bl	8000628 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c6:	f000 f8c3 	bl	8000750 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ca:	f000 f897 	bl	80006fc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Segger System View Configuration
	// 1- Enable  CYCCNT (Cycle Counter Register) for Segger SystemView
	DWT->CTRL |= (1 << 0);
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0x54>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <main+0x54>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6013      	str	r3, [r2, #0]
	// 2-  Start Recording
	SEGGER_SYSVIEW_Conf();
 80005da:	f003 fa7b 	bl	8003ad4 <SEGGER_SYSVIEW_Conf>
	//vSetVarulMaxPRIGROUPValue();	// uncomment for Single-shot recording
	//SEGGER_SYSVIEW_Start();	// uncomment for Single-shot recording //SEGGER_RTT_printf(0, "%sHello From Programm. \n"); // some text to check if J_Link RTT Viewer is working

	// Create Tasks

	xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2,
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <main+0x58>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2302      	movs	r3, #2
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	490a      	ldr	r1, [pc, #40]	; (8000614 <main+0x5c>)
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x60>)
 80005ee:	f002 f885 	bl	80026fc <xTaskCreate>
			&xTaskHander1);
	xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2,
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x64>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <main+0x68>)
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x6c>)
 8000602:	f002 f87b 	bl	80026fc <xTaskCreate>
			&xTaskHander2);

	// Start the Sceduler
	vTaskStartScheduler();
 8000606:	f002 fa8b 	bl	8002b20 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800060a:	e7fe      	b.n	800060a <main+0x52>
 800060c:	e0001000 	.word	0xe0001000
 8000610:	20000030 	.word	0x20000030
 8000614:	08005690 	.word	0x08005690
 8000618:	080007f1 	.word	0x080007f1
 800061c:	20000034 	.word	0x20000034
 8000620:	08005698 	.word	0x08005698
 8000624:	08000861 	.word	0x08000861

08000628 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f816 	bl	8005668 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff7b 	bl	80015ac <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x98>
		Error_Handler();
 80006bc:	f000 f904 	bl	80008c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fd13 	bl	8001108 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
		Error_Handler();
 80006e8:	f000 f8ee 	bl	80008c8 <Error_Handler>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 fc6c 	bl	8002010 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800073e:	f000 f8c3 	bl	80008c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000038 	.word	0x20000038
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_GPIO_Init+0x98>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0x98>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x98>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_GPIO_Init+0x98>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0x98>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_GPIO_Init+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_GPIO_Init+0x98>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_GPIO_Init+0x98>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LDG_Pin | LDO_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2103      	movs	r1, #3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x9c>)
 80007c0:	f000 fc88 	bl	80010d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LDG_Pin LDO_Pin */
	GPIO_InitStruct.Pin = LDG_Pin | LDO_Pin;
 80007c4:	2303      	movs	r3, #3
 80007c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x9c>)
 80007dc:	f000 fae6 	bl	8000dac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021000 	.word	0x40021000

080007f0 <vTask1_handler>:

/* USER CODE BEGIN 4 */
void vTask1_handler() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	SEGGER_RTT_WriteString(0, "Hello from task A!\n");
 80007f6:	4916      	ldr	r1, [pc, #88]	; (8000850 <vTask1_handler+0x60>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f003 fcb5 	bl	8004168 <SEGGER_RTT_WriteString>
	uint32_t xLastWakeTime = xTaskGetTickCount();
 80007fe:	f002 fa99 	bl	8002d34 <xTaskGetTickCount>
 8000802:	4603      	mov	r3, r0
 8000804:	607b      	str	r3, [r7, #4]
	static int w = 0;
	while (1) {
		GPIO_toggle(LDO);
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <vTask1_handler+0x64>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d103      	bne.n	800081a <vTask1_handler+0x2a>
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <vTask1_handler+0x64>)
 8000814:	2202      	movs	r2, #2
 8000816:	619a      	str	r2, [r3, #24]
 8000818:	e00a      	b.n	8000830 <vTask1_handler+0x40>
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <vTask1_handler+0x64>)
 800081c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000820:	619a      	str	r2, [r3, #24]
		for (; w <= 1000; w++)
 8000822:	e005      	b.n	8000830 <vTask1_handler+0x40>
			__NOP();
 8000824:	bf00      	nop
		for (; w <= 1000; w++)
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <vTask1_handler+0x68>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <vTask1_handler+0x68>)
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <vTask1_handler+0x68>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000838:	ddf4      	ble.n	8000824 <vTask1_handler+0x34>
		SEGGER_RTT_WriteString(0, "task 1\n");
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <vTask1_handler+0x6c>)
 800083c:	2000      	movs	r0, #0
 800083e:	f003 fc93 	bl	8004168 <SEGGER_RTT_WriteString>
		vTaskDelayUntil(&xLastWakeTime, 30);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	211e      	movs	r1, #30
 8000846:	4618      	mov	r0, r3
 8000848:	f002 f8b0 	bl	80029ac <xTaskDelayUntil>
		GPIO_toggle(LDO);
 800084c:	e7db      	b.n	8000806 <vTask1_handler+0x16>
 800084e:	bf00      	nop
 8000850:	080056a0 	.word	0x080056a0
 8000854:	40021000 	.word	0x40021000
 8000858:	2000007c 	.word	0x2000007c
 800085c:	080056b4 	.word	0x080056b4

08000860 <vTask2_handler>:
		//vTaskDelay(1000);

	}
}

void vTask2_handler() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	SEGGER_RTT_WriteString(0, "Hello from task B!\n");
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <vTask2_handler+0x38>)
 8000866:	2000      	movs	r0, #0
 8000868:	f003 fc7e 	bl	8004168 <SEGGER_RTT_WriteString>
	while (1) {
		GPIO_toggle(LDG);
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <vTask2_handler+0x3c>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d103      	bne.n	8000880 <vTask2_handler+0x20>
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <vTask2_handler+0x3c>)
 800087a:	2201      	movs	r2, #1
 800087c:	619a      	str	r2, [r3, #24]
 800087e:	e003      	b.n	8000888 <vTask2_handler+0x28>
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <vTask2_handler+0x3c>)
 8000882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000886:	619a      	str	r2, [r3, #24]
		SEGGER_RTT_WriteString(0, "task 2\n");
 8000888:	4905      	ldr	r1, [pc, #20]	; (80008a0 <vTask2_handler+0x40>)
 800088a:	2000      	movs	r0, #0
 800088c:	f003 fc6c 	bl	8004168 <SEGGER_RTT_WriteString>
		vTaskDelay(3);
 8000890:	2003      	movs	r0, #3
 8000892:	f002 f90d 	bl	8002ab0 <vTaskDelay>
		GPIO_toggle(LDG);
 8000896:	e7e9      	b.n	800086c <vTask2_handler+0xc>
 8000898:	080056bc 	.word	0x080056bc
 800089c:	40021000 	.word	0x40021000
 80008a0:	080056d0 	.word	0x080056d0

080008a4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008b6:	f000 f977 	bl	8000ba8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40002000 	.word	0x40002000

080008c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f000 fa07 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <HAL_InitTick+0xe4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <HAL_InitTick+0xe4>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_InitTick+0xe4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fdac 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f0:	6a3b      	ldr	r3, [r7, #32]
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009fa:	f000 fd7d 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80009fe:	6378      	str	r0, [r7, #52]	; 0x34
 8000a00:	e004      	b.n	8000a0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a02:	f000 fd79 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000a06:	4603      	mov	r3, r0
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_InitTick+0xe8>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	0c9b      	lsrs	r3, r3, #18
 8000a16:	3b01      	subs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <HAL_InitTick+0xf0>)
 8000a1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a26:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a40:	4817      	ldr	r0, [pc, #92]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a42:	f001 f837 	bl	8001ab4 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11b      	bne.n	8000a8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <HAL_InitTick+0xec>)
 8000a56:	f001 f887 	bl	8001b68 <HAL_TIM_Base_Start_IT>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d111      	bne.n	8000a8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a68:	202d      	movs	r0, #45	; 0x2d
 8000a6a:	f000 f991 	bl	8000d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d808      	bhi.n	8000a86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	202d      	movs	r0, #45	; 0x2d
 8000a7a:	f000 f96d 	bl	8000d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0xf4>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e002      	b.n	8000a8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3738      	adds	r7, #56	; 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	40002000 	.word	0x40002000
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ade:	f001 f8b3 	bl	8001c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000080 	.word	0x20000080

08000aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b16:	490e      	ldr	r1, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b2c:	4c0b      	ldr	r4, [pc, #44]	; (8000b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3a:	f7ff ffd7 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f004 fd51 	bl	80055e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fd39 	bl	80005b8 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b48:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b54:	080057ec 	.word	0x080057ec
  ldr r2, =_sbss
 8000b58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b5c:	20005c98 	.word	0x20005c98

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <HAL_Init+0x40>)
 8000b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_Init+0x40>)
 8000b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_Init+0x40>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f8d8 	bl	8000d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b92:	200f      	movs	r0, #15
 8000b94:	f7ff ff0e 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b98:	f7ff fe9c 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023c00 	.word	0x40023c00

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	200000c8 	.word	0x200000c8

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000c8 	.word	0x200000c8

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff4c 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6a:	f7ff ff61 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ffb1 	bl	8000cdc <NVIC_EncodePriority>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff80 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff54 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e165      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8154 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80ae 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	; (80010ac <HAL_GPIO_Init+0x300>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <HAL_GPIO_Init+0x300>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x310>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <HAL_GPIO_Init+0x314>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <HAL_GPIO_Init+0x318>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x206>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x202>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_GPIO_Init+0x324>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_GPIO_Init+0x324>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae96 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0cc      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d90c      	bls.n	8001144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b65      	ldr	r3, [pc, #404]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0b8      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d020      	beq.n	8001192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001174:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	494d      	ldr	r1, [pc, #308]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d044      	beq.n	8001228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d119      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e07f      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e06f      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e067      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f023 0203 	bic.w	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4934      	ldr	r1, [pc, #208]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f8:	f7ff fcea 	bl	8000bd0 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff fce6 	bl	8000bd0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	; 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e04f      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 020c 	and.w	r2, r3, #12
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1eb      	bne.n	8001200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d20c      	bcs.n	8001250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e032      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4916      	ldr	r1, [pc, #88]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d009      	beq.n	800128e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	490e      	ldr	r1, [pc, #56]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128e:	f000 f821 	bl	80012d4 <HAL_RCC_GetSysClockFreq>
 8001292:	4602      	mov	r2, r0
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	5ccb      	ldrb	r3, [r1, r3]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_RCC_ClockConfig+0x1c8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb80 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00
 80012c4:	40023800 	.word	0x40023800
 80012c8:	0800579c 	.word	0x0800579c
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d8:	b094      	sub	sp, #80	; 0x50
 80012da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e4:	2300      	movs	r3, #0
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ec:	4b79      	ldr	r3, [pc, #484]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d00d      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x40>
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	f200 80e1 	bhi.w	80014c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x34>
 8001302:	2b04      	cmp	r3, #4
 8001304:	d003      	beq.n	800130e <HAL_RCC_GetSysClockFreq+0x3a>
 8001306:	e0db      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800130c:	e0db      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800130e:	4b73      	ldr	r3, [pc, #460]	; (80014dc <HAL_RCC_GetSysClockFreq+0x208>)
 8001310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001312:	e0d8      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001314:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800131c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132a:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	099b      	lsrs	r3, r3, #6
 8001330:	2200      	movs	r2, #0
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
 8001334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
 8001342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001346:	4622      	mov	r2, r4
 8001348:	462b      	mov	r3, r5
 800134a:	f04f 0000 	mov.w	r0, #0
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	0159      	lsls	r1, r3, #5
 8001354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001358:	0150      	lsls	r0, r2, #5
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4621      	mov	r1, r4
 8001360:	1a51      	subs	r1, r2, r1
 8001362:	6139      	str	r1, [r7, #16]
 8001364:	4629      	mov	r1, r5
 8001366:	eb63 0301 	sbc.w	r3, r3, r1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001378:	4659      	mov	r1, fp
 800137a:	018b      	lsls	r3, r1, #6
 800137c:	4651      	mov	r1, sl
 800137e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001382:	4651      	mov	r1, sl
 8001384:	018a      	lsls	r2, r1, #6
 8001386:	4651      	mov	r1, sl
 8001388:	ebb2 0801 	subs.w	r8, r2, r1
 800138c:	4659      	mov	r1, fp
 800138e:	eb63 0901 	sbc.w	r9, r3, r1
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800139e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013a6:	4690      	mov	r8, r2
 80013a8:	4699      	mov	r9, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	eb18 0303 	adds.w	r3, r8, r3
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	462b      	mov	r3, r5
 80013b4:	eb49 0303 	adc.w	r3, r9, r3
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013c6:	4629      	mov	r1, r5
 80013c8:	024b      	lsls	r3, r1, #9
 80013ca:	4621      	mov	r1, r4
 80013cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013d0:	4621      	mov	r1, r4
 80013d2:	024a      	lsls	r2, r1, #9
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013da:	2200      	movs	r2, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e4:	f7fe ff66 	bl	80002b4 <__aeabi_uldivmod>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4613      	mov	r3, r2
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013f0:	e058      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	099b      	lsrs	r3, r3, #6
 80013f8:	2200      	movs	r2, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	4611      	mov	r1, r2
 80013fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800140c:	4642      	mov	r2, r8
 800140e:	464b      	mov	r3, r9
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	0159      	lsls	r1, r3, #5
 800141a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800141e:	0150      	lsls	r0, r2, #5
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4641      	mov	r1, r8
 8001426:	ebb2 0a01 	subs.w	sl, r2, r1
 800142a:	4649      	mov	r1, r9
 800142c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800143c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001444:	ebb2 040a 	subs.w	r4, r2, sl
 8001448:	eb63 050b 	sbc.w	r5, r3, fp
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	00eb      	lsls	r3, r5, #3
 8001456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800145a:	00e2      	lsls	r2, r4, #3
 800145c:	4614      	mov	r4, r2
 800145e:	461d      	mov	r5, r3
 8001460:	4643      	mov	r3, r8
 8001462:	18e3      	adds	r3, r4, r3
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	464b      	mov	r3, r9
 8001468:	eb45 0303 	adc.w	r3, r5, r3
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800147a:	4629      	mov	r1, r5
 800147c:	028b      	lsls	r3, r1, #10
 800147e:	4621      	mov	r1, r4
 8001480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001484:	4621      	mov	r1, r4
 8001486:	028a      	lsls	r2, r1, #10
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148e:	2200      	movs	r2, #0
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	61fa      	str	r2, [r7, #28]
 8001494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001498:	f7fe ff0c 	bl	80002b4 <__aeabi_uldivmod>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4613      	mov	r3, r2
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	0c1b      	lsrs	r3, r3, #16
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	3301      	adds	r3, #1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3750      	adds	r7, #80	; 0x50
 80014cc:	46bd      	mov	sp, r7
 80014ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	00f42400 	.word	0x00f42400
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	080057ac 	.word	0x080057ac

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffdc 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	0b5b      	lsrs	r3, r3, #13
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	080057ac 	.word	0x080057ac

08001548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_RCC_GetClockConfig+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e273      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d075      	beq.n	80016b6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d00c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4b7e      	ldr	r3, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d05b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d157      	bne.n	80016b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e24e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x74>
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6f      	ldr	r2, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fab4 	bl	8000bd0 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fab0 	bl	8000bd0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e213      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xc0>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff faa0 	bl	8000bd0 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fa9c 	bl	8000bd0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1ff      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0xe8>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1d3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fa55 	bl	8000bd0 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fa51 	bl	8000bd0 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1b4      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4925      	ldr	r1, [pc, #148]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fa34 	bl	8000bd0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fa30 	bl	8000bd0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e193      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d036      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa14 	bl	8000bd0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fa10 	bl	8000bd0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e173      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80017c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x200>
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f9fd 	bl	8000bd0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	e00e      	b.n	80017f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff f9f9 	bl	8000bd0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d907      	bls.n	80017f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e15c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	42470000 	.word	0x42470000
 80017f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b8a      	ldr	r3, [pc, #552]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ea      	bne.n	80017da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8097 	beq.w	8001940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b83      	ldr	r3, [pc, #524]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x47c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x47c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x47c>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff f9b9 	bl	8000bd0 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff f9b5 	bl	8000bd0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e118      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_RCC_OscConfig+0x47c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x2ea>
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x30c>
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 80018b8:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a59      	ldr	r2, [pc, #356]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a56      	ldr	r2, [pc, #344]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f97a 	bl	8000bd0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff f976 	bl	8000bd0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0d7      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ee      	beq.n	80018e0 <HAL_RCC_OscConfig+0x334>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f964 	bl	8000bd0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f960 	bl	8000bd0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0c1      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ee      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ad 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d060      	beq.n	8001a18 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d145      	bne.n	80019ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x480>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f934 	bl	8000bd0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f930 	bl	8000bd0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e093      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	071b      	lsls	r3, r3, #28
 80019b6:	491b      	ldr	r1, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x480>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f905 	bl	8000bd0 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff f901 	bl	8000bd0 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e064      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x41e>
 80019e8:	e05c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_OscConfig+0x480>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f8ee 	bl	8000bd0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f8ea 	bl	8000bd0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04d      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x44c>
 8001a16:	e045      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e040      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_RCC_OscConfig+0x504>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d030      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d129      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d122      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d119      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800

08001ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e041      	b.n	8001b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f839 	bl	8001b52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 f9d8 	bl	8001ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e04e      	b.n	8001c1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d022      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d01d      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d018      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00e      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x80>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a18      	ldr	r2, [pc, #96]	; (8001c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d111      	bne.n	8001c0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d010      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0a:	e007      	b.n	8001c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	40010400 	.word	0x40010400
 8001c40:	40014000 	.word	0x40014000
 8001c44:	40001800 	.word	0x40001800

08001c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0202 	mvn.w	r2, #2
 8001c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8ee 	bl	8001e6c <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8e0 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8f1 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0204 	mvn.w	r2, #4
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8c4 	bl	8001e6c <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8b6 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8c7 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d122      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d11b      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0208 	mvn.w	r2, #8
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f89a 	bl	8001e6c <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f88c 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f89d 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0210 	mvn.w	r2, #16
 8001d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2208      	movs	r2, #8
 8001d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f870 	bl	8001e6c <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f862 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f873 	bl	8001e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0201 	mvn.w	r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fd6c 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	2b80      	cmp	r3, #128	; 0x80
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d107      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f902 	bl	8001ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f838 	bl	8001e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0220 	mvn.w	r2, #32
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8cc 	bl	8001fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec6:	d00f      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3d      	ldr	r2, [pc, #244]	; (8001fc0 <TIM_Base_SetConfig+0x118>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00b      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <TIM_Base_SetConfig+0x11c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <TIM_Base_SetConfig+0x120>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d027      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <TIM_Base_SetConfig+0x118>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d023      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <TIM_Base_SetConfig+0x11c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <TIM_Base_SetConfig+0x120>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d017      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <TIM_Base_SetConfig+0x128>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <TIM_Base_SetConfig+0x12c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00f      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <TIM_Base_SetConfig+0x130>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <TIM_Base_SetConfig+0x134>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <TIM_Base_SetConfig+0x138>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <TIM_Base_SetConfig+0x13c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <TIM_Base_SetConfig+0x114>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_Base_SetConfig+0xf8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <TIM_Base_SetConfig+0x124>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d103      	bne.n	8001fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	40001800 	.word	0x40001800
 8001fe0:	40001c00 	.word	0x40001c00
 8001fe4:	40002000 	.word	0x40002000

08001fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e03f      	b.n	80020a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc74 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f829 	bl	80020ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b0:	b0c0      	sub	sp, #256	; 0x100
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	ea40 0301 	orr.w	r3, r0, r1
 80020d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002104:	f021 010c 	bic.w	r1, r1, #12
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002112:	430b      	orrs	r3, r1
 8002114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	6999      	ldr	r1, [r3, #24]
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	ea40 0301 	orr.w	r3, r0, r1
 8002132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <UART_SetConfig+0x2cc>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d005      	beq.n	800214c <UART_SetConfig+0xa0>
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b8d      	ldr	r3, [pc, #564]	; (800237c <UART_SetConfig+0x2d0>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d104      	bne.n	8002156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800214c:	f7ff f9e8 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8002150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002154:	e003      	b.n	800215e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002156:	f7ff f9cf 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800215a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	f040 810c 	bne.w	8002384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800216c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800217a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800217e:	4622      	mov	r2, r4
 8002180:	462b      	mov	r3, r5
 8002182:	1891      	adds	r1, r2, r2
 8002184:	65b9      	str	r1, [r7, #88]	; 0x58
 8002186:	415b      	adcs	r3, r3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800218e:	4621      	mov	r1, r4
 8002190:	eb12 0801 	adds.w	r8, r2, r1
 8002194:	4629      	mov	r1, r5
 8002196:	eb43 0901 	adc.w	r9, r3, r1
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ae:	4690      	mov	r8, r2
 80021b0:	4699      	mov	r9, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	eb18 0303 	adds.w	r3, r8, r3
 80021b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021bc:	462b      	mov	r3, r5
 80021be:	eb49 0303 	adc.w	r3, r9, r3
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021da:	460b      	mov	r3, r1
 80021dc:	18db      	adds	r3, r3, r3
 80021de:	653b      	str	r3, [r7, #80]	; 0x50
 80021e0:	4613      	mov	r3, r2
 80021e2:	eb42 0303 	adc.w	r3, r2, r3
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
 80021e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021f0:	f7fe f860 	bl	80002b4 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <UART_SetConfig+0x2d4>)
 80021fa:	fba3 2302 	umull	r2, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	011c      	lsls	r4, r3, #4
 8002202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002206:	2200      	movs	r2, #0
 8002208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800220c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002214:	4642      	mov	r2, r8
 8002216:	464b      	mov	r3, r9
 8002218:	1891      	adds	r1, r2, r2
 800221a:	64b9      	str	r1, [r7, #72]	; 0x48
 800221c:	415b      	adcs	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002224:	4641      	mov	r1, r8
 8002226:	eb12 0a01 	adds.w	sl, r2, r1
 800222a:	4649      	mov	r1, r9
 800222c:	eb43 0b01 	adc.w	fp, r3, r1
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800223c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002244:	4692      	mov	sl, r2
 8002246:	469b      	mov	fp, r3
 8002248:	4643      	mov	r3, r8
 800224a:	eb1a 0303 	adds.w	r3, sl, r3
 800224e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002252:	464b      	mov	r3, r9
 8002254:	eb4b 0303 	adc.w	r3, fp, r3
 8002258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800226c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002270:	460b      	mov	r3, r1
 8002272:	18db      	adds	r3, r3, r3
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
 8002276:	4613      	mov	r3, r2
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
 800227e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002286:	f7fe f815 	bl	80002b4 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4611      	mov	r1, r2
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <UART_SetConfig+0x2d4>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	1acb      	subs	r3, r1, r3
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <UART_SetConfig+0x2d4>)
 80022a8:	fba3 2302 	umull	r2, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b4:	441c      	add	r4, r3
 80022b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022c8:	4642      	mov	r2, r8
 80022ca:	464b      	mov	r3, r9
 80022cc:	1891      	adds	r1, r2, r2
 80022ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80022d0:	415b      	adcs	r3, r3
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022d8:	4641      	mov	r1, r8
 80022da:	1851      	adds	r1, r2, r1
 80022dc:	6339      	str	r1, [r7, #48]	; 0x30
 80022de:	4649      	mov	r1, r9
 80022e0:	414b      	adcs	r3, r1
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022f0:	4659      	mov	r1, fp
 80022f2:	00cb      	lsls	r3, r1, #3
 80022f4:	4651      	mov	r1, sl
 80022f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fa:	4651      	mov	r1, sl
 80022fc:	00ca      	lsls	r2, r1, #3
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	4603      	mov	r3, r0
 8002304:	4642      	mov	r2, r8
 8002306:	189b      	adds	r3, r3, r2
 8002308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800230c:	464b      	mov	r3, r9
 800230e:	460a      	mov	r2, r1
 8002310:	eb42 0303 	adc.w	r3, r2, r3
 8002314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800232c:	460b      	mov	r3, r1
 800232e:	18db      	adds	r3, r3, r3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
 8002332:	4613      	mov	r3, r2
 8002334:	eb42 0303 	adc.w	r3, r2, r3
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002342:	f7fd ffb7 	bl	80002b4 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <UART_SetConfig+0x2d4>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <UART_SetConfig+0x2d4>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4422      	add	r2, r4
 8002372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002374:	e105      	b.n	8002582 <UART_SetConfig+0x4d6>
 8002376:	bf00      	nop
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800238e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002396:	4642      	mov	r2, r8
 8002398:	464b      	mov	r3, r9
 800239a:	1891      	adds	r1, r2, r2
 800239c:	6239      	str	r1, [r7, #32]
 800239e:	415b      	adcs	r3, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a6:	4641      	mov	r1, r8
 80023a8:	1854      	adds	r4, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb43 0501 	adc.w	r5, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023cc:	464b      	mov	r3, r9
 80023ce:	eb45 0303 	adc.w	r3, r5, r3
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023f2:	4629      	mov	r1, r5
 80023f4:	008b      	lsls	r3, r1, #2
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fc:	4621      	mov	r1, r4
 80023fe:	008a      	lsls	r2, r1, #2
 8002400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002404:	f7fd ff56 	bl	80002b4 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <UART_SetConfig+0x4e4>)
 800240e:	fba3 2302 	umull	r2, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	011c      	lsls	r4, r3, #4
 8002416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	1891      	adds	r1, r2, r2
 800242e:	61b9      	str	r1, [r7, #24]
 8002430:	415b      	adcs	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002438:	4641      	mov	r1, r8
 800243a:	1851      	adds	r1, r2, r1
 800243c:	6139      	str	r1, [r7, #16]
 800243e:	4649      	mov	r1, r9
 8002440:	414b      	adcs	r3, r1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002450:	4659      	mov	r1, fp
 8002452:	00cb      	lsls	r3, r1, #3
 8002454:	4651      	mov	r1, sl
 8002456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245a:	4651      	mov	r1, sl
 800245c:	00ca      	lsls	r2, r1, #3
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	4603      	mov	r3, r0
 8002464:	4642      	mov	r2, r8
 8002466:	189b      	adds	r3, r3, r2
 8002468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800246c:	464b      	mov	r3, r9
 800246e:	460a      	mov	r2, r1
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	67bb      	str	r3, [r7, #120]	; 0x78
 8002482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002490:	4649      	mov	r1, r9
 8002492:	008b      	lsls	r3, r1, #2
 8002494:	4641      	mov	r1, r8
 8002496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800249a:	4641      	mov	r1, r8
 800249c:	008a      	lsls	r2, r1, #2
 800249e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024a2:	f7fd ff07 	bl	80002b4 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <UART_SetConfig+0x4e4>)
 80024ac:	fba3 1302 	umull	r1, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	3332      	adds	r3, #50	; 0x32
 80024be:	4a34      	ldr	r2, [pc, #208]	; (8002590 <UART_SetConfig+0x4e4>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ca:	441c      	add	r4, r3
 80024cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d0:	2200      	movs	r2, #0
 80024d2:	673b      	str	r3, [r7, #112]	; 0x70
 80024d4:	677a      	str	r2, [r7, #116]	; 0x74
 80024d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024da:	4642      	mov	r2, r8
 80024dc:	464b      	mov	r3, r9
 80024de:	1891      	adds	r1, r2, r2
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	415b      	adcs	r3, r3
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ea:	4641      	mov	r1, r8
 80024ec:	1851      	adds	r1, r2, r1
 80024ee:	6039      	str	r1, [r7, #0]
 80024f0:	4649      	mov	r1, r9
 80024f2:	414b      	adcs	r3, r1
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002502:	4659      	mov	r1, fp
 8002504:	00cb      	lsls	r3, r1, #3
 8002506:	4651      	mov	r1, sl
 8002508:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250c:	4651      	mov	r1, sl
 800250e:	00ca      	lsls	r2, r1, #3
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	4603      	mov	r3, r0
 8002516:	4642      	mov	r2, r8
 8002518:	189b      	adds	r3, r3, r2
 800251a:	66bb      	str	r3, [r7, #104]	; 0x68
 800251c:	464b      	mov	r3, r9
 800251e:	460a      	mov	r2, r1
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
 8002530:	667a      	str	r2, [r7, #100]	; 0x64
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800253e:	4649      	mov	r1, r9
 8002540:	008b      	lsls	r3, r1, #2
 8002542:	4641      	mov	r1, r8
 8002544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002548:	4641      	mov	r1, r8
 800254a:	008a      	lsls	r2, r1, #2
 800254c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002550:	f7fd feb0 	bl	80002b4 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <UART_SetConfig+0x4e4>)
 800255a:	fba3 1302 	umull	r1, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2164      	movs	r1, #100	; 0x64
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	3332      	adds	r3, #50	; 0x32
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <UART_SetConfig+0x4e4>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4422      	add	r2, r4
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	bf00      	nop
 8002584:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	51eb851f 	.word	0x51eb851f

08002594 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f103 0208 	add.w	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f103 0208 	add.w	r2, r3, #8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0208 	add.w	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264c:	d103      	bne.n	8002656 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e00c      	b.n	8002670 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e002      	b.n	8002664 <vListInsert+0x2e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d2f6      	bcs.n	800265e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6852      	ldr	r2, [r2, #4]
 80026c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d103      	bne.n	80026dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af04      	add	r7, sp, #16
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f000 ffd3 	bl	80036bc <pvPortMalloc>
 8002716:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800271e:	2054      	movs	r0, #84	; 0x54
 8002720:	f000 ffcc 	bl	80036bc <pvPortMalloc>
 8002724:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
 8002732:	e005      	b.n	8002740 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f001 f8a1 	bl	800387c <vPortFree>
 800273a:	e001      	b.n	8002740 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d013      	beq.n	800276e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	2300      	movs	r3, #0
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f80e 	bl	800277e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002762:	69f8      	ldr	r0, [r7, #28]
 8002764:	f000 f89a 	bl	800289c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002768:	2301      	movs	r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e002      	b.n	8002774 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002772:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002774:	69bb      	ldr	r3, [r7, #24]
    }
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b088      	sub	sp, #32
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002796:	3b01      	subs	r3, #1
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f023 0307 	bic.w	r3, r3, #7
 80027a4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80027c2:	bf00      	nop
 80027c4:	e7fe      	b.n	80027c4 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01f      	beq.n	800280c <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	e012      	b.n	80027f8 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	7819      	ldrb	r1, [r3, #0]
 80027da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	3334      	adds	r3, #52	; 0x34
 80027e2:	460a      	mov	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	d9e9      	bls.n	80027d2 <prvInitialiseNewTask+0x54>
 80027fe:	e000      	b.n	8002802 <prvInitialiseNewTask+0x84>
            {
                break;
 8002800:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800280a:	e003      	b.n	8002814 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b06      	cmp	r3, #6
 8002818:	d901      	bls.n	800281e <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800281a:	2306      	movs	r3, #6
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2200      	movs	r2, #0
 800282e:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	3304      	adds	r3, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fecd 	bl	80025d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	3318      	adds	r3, #24
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fec8 	bl	80025d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002848:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	f1c3 0207 	rsb	r2, r3, #7
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	334c      	adds	r3, #76	; 0x4c
 800285e:	2204      	movs	r2, #4
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f002 ff00 	bl	8005668 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	3350      	adds	r3, #80	; 0x50
 800286c:	2201      	movs	r2, #1
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fef9 	bl	8005668 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	69b8      	ldr	r0, [r7, #24]
 800287c:	f000 fcc6 	bl	800320c <pxPortInitialiseStack>
 8002880:	4602      	mov	r2, r0
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002892:	bf00      	nop
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800289c:	b5b0      	push	{r4, r5, r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80028a4:	f000 fde0 	bl	8003468 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <prvAddNewTaskToReadyList+0xf4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a38      	ldr	r2, [pc, #224]	; (8002990 <prvAddNewTaskToReadyList+0xf4>)
 80028b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <prvAddNewTaskToReadyList+0xf8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028ba:	4a36      	ldr	r2, [pc, #216]	; (8002994 <prvAddNewTaskToReadyList+0xf8>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <prvAddNewTaskToReadyList+0xf4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d110      	bne.n	80028ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028c8:	f000 fb94 	bl	8002ff4 <prvInitialiseTaskLists>
 80028cc:	e00d      	b.n	80028ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <prvAddNewTaskToReadyList+0xfc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <prvAddNewTaskToReadyList+0xf8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d802      	bhi.n	80028ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028e4:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <prvAddNewTaskToReadyList+0xf8>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <prvAddNewTaskToReadyList+0x100>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4a2a      	ldr	r2, [pc, #168]	; (800299c <prvAddNewTaskToReadyList+0x100>)
 80028f2:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <prvAddNewTaskToReadyList+0x8c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fc09 	bl	8005114 <SEGGER_SYSVIEW_OnTaskCreate>
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	461d      	mov	r5, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461c      	mov	r4, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	1ae3      	subs	r3, r4, r3
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	462b      	mov	r3, r5
 8002924:	f001 f978 	bl	8003c18 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fc76 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <prvAddNewTaskToReadyList+0x104>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <prvAddNewTaskToReadyList+0x104>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <prvAddNewTaskToReadyList+0x108>)
 8002950:	441a      	add	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f7ff fe48 	bl	80025ee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800295e:	f000 fdb3 	bl	80034c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <prvAddNewTaskToReadyList+0xfc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <prvAddNewTaskToReadyList+0xec>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <prvAddNewTaskToReadyList+0xf8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	429a      	cmp	r2, r3
 8002976:	d207      	bcs.n	8002988 <prvAddNewTaskToReadyList+0xec>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <prvAddNewTaskToReadyList+0x10c>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bdb0      	pop	{r4, r5, r7, pc}
 8002990:	200001cc 	.word	0x200001cc
 8002994:	200000cc 	.word	0x200000cc
 8002998:	200001d8 	.word	0x200001d8
 800299c:	200001e8 	.word	0x200001e8
 80029a0:	200001d4 	.word	0x200001d4
 80029a4:	200000d0 	.word	0x200000d0
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	617b      	str	r3, [r7, #20]
    }
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xTaskDelayUntil+0x46>
        __asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	613b      	str	r3, [r7, #16]
    }
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <xTaskDelayUntil+0xf8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <xTaskDelayUntil+0x64>
        __asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	60fb      	str	r3, [r7, #12]
    }
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002a10:	f000 f8e2 	bl	8002bd8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <xTaskDelayUntil+0xfc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20b      	bcs.n	8002a46 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d211      	bcs.n	8002a5c <xTaskDelayUntil+0xb0>
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d90d      	bls.n	8002a5c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	e00a      	b.n	8002a5c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d303      	bcc.n	8002a58 <xTaskDelayUntil+0xac>
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d901      	bls.n	8002a5c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002a68:	2024      	movs	r0, #36	; 0x24
 8002a6a:	f001 ff41 	bl	80048f0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fb56 	bl	8003128 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002a7c:	f000 f8ba 	bl	8002bf4 <xTaskResumeAll>
 8002a80:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <xTaskDelayUntil+0x100>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001f4 	.word	0x200001f4
 8002aa8:	200001d0 	.word	0x200001d0
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01b      	beq.n	8002afa <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <vTaskDelay+0x68>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <vTaskDelay+0x30>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	60bb      	str	r3, [r7, #8]
    }
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002ae0:	f000 f87a 	bl	8002bd8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	2023      	movs	r0, #35	; 0x23
 8002ae8:	f001 ff20 	bl	800492c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fb1a 	bl	8003128 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002af4:	f000 f87e 	bl	8002bf4 <xTaskResumeAll>
 8002af8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <vTaskDelay+0x6c>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200001f4 	.word	0x200001f4
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <vTaskStartScheduler+0x98>)
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	4922      	ldr	r1, [pc, #136]	; (8002bbc <vTaskStartScheduler+0x9c>)
 8002b34:	4822      	ldr	r0, [pc, #136]	; (8002bc0 <vTaskStartScheduler+0xa0>)
 8002b36:	f7ff fde1 	bl	80026fc <xTaskCreate>
 8002b3a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d124      	bne.n	8002b8c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	60bb      	str	r3, [r7, #8]
    }
 8002b54:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <vTaskStartScheduler+0xa4>)
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <vTaskStartScheduler+0xa8>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <vTaskStartScheduler+0xac>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <vTaskStartScheduler+0xb0>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <vTaskStartScheduler+0x98>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d102      	bne.n	8002b7c <vTaskStartScheduler+0x5c>
 8002b76:	f002 fab1 	bl	80050dc <SEGGER_SYSVIEW_OnIdle>
 8002b7a:	e004      	b.n	8002b86 <vTaskStartScheduler+0x66>
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <vTaskStartScheduler+0xb0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fb09 	bl	8005198 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b86:	f000 fbcd 	bl	8003324 <xPortStartScheduler>
 8002b8a:	e00e      	b.n	8002baa <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b92:	d10a      	bne.n	8002baa <vTaskStartScheduler+0x8a>
        __asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	607b      	str	r3, [r7, #4]
    }
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <vTaskStartScheduler+0xb4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200001f0 	.word	0x200001f0
 8002bbc:	080056d8 	.word	0x080056d8
 8002bc0:	08002fc5 	.word	0x08002fc5
 8002bc4:	200001ec 	.word	0x200001ec
 8002bc8:	200001d8 	.word	0x200001d8
 8002bcc:	200001d0 	.word	0x200001d0
 8002bd0:	200000cc 	.word	0x200000cc
 8002bd4:	2000000c 	.word	0x2000000c

08002bd8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <vTaskSuspendAll+0x18>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <vTaskSuspendAll+0x18>)
 8002be4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	200001f4 	.word	0x200001f4

08002bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <xTaskResumeAll+0x11c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <xTaskResumeAll+0x2c>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	603b      	str	r3, [r7, #0]
    }
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c20:	f000 fc22 	bl	8003468 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <xTaskResumeAll+0x11c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <xTaskResumeAll+0x11c>)
 8002c2c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <xTaskResumeAll+0x11c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d165      	bne.n	8002d02 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <xTaskResumeAll+0x120>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d061      	beq.n	8002d02 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c3e:	e032      	b.n	8002ca6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <xTaskResumeAll+0x124>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fd2b 	bl	80026a8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fd26 	bl	80026a8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fadc 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <xTaskResumeAll+0x128>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <xTaskResumeAll+0x128>)
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <xTaskResumeAll+0x12c>)
 8002c84:	441a      	add	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f7ff fcae 	bl	80025ee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <xTaskResumeAll+0x130>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d302      	bcc.n	8002ca6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <xTaskResumeAll+0x134>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <xTaskResumeAll+0x124>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1c8      	bne.n	8002c40 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cb4:	f000 fa1c 	bl	80030f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <xTaskResumeAll+0x138>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cc4:	f000 f858 	bl	8002d78 <xTaskIncrementTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <xTaskResumeAll+0x134>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f1      	bne.n	8002cc4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <xTaskResumeAll+0x138>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <xTaskResumeAll+0x134>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <xTaskResumeAll+0x13c>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d02:	f000 fbe1 	bl	80034c8 <vPortExitCritical>

    return xAlreadyYielded;
 8002d06:	68bb      	ldr	r3, [r7, #8]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200001f4 	.word	0x200001f4
 8002d14:	200001cc 	.word	0x200001cc
 8002d18:	2000018c 	.word	0x2000018c
 8002d1c:	200001d4 	.word	0x200001d4
 8002d20:	200000d0 	.word	0x200000d0
 8002d24:	200000cc 	.word	0x200000cc
 8002d28:	200001e0 	.word	0x200001e0
 8002d2c:	200001dc 	.word	0x200001dc
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <xTaskGetTickCount+0x1c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	200001d0 	.word	0x200001d0

08002d54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d5a:	f000 fc6f 	bl	800363c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <xTaskGetTickCountFromISR+0x20>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d68:	683b      	ldr	r3, [r7, #0]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200001d0 	.word	0x200001d0

08002d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <xTaskIncrementTick+0x14c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 8092 	bne.w	8002eb0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d8c:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <xTaskIncrementTick+0x150>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d94:	4a4c      	ldr	r2, [pc, #304]	; (8002ec8 <xTaskIncrementTick+0x150>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d120      	bne.n	8002de2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <xTaskIncrementTick+0x154>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <xTaskIncrementTick+0x48>
        __asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	603b      	str	r3, [r7, #0]
    }
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xTaskIncrementTick+0x46>
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <xTaskIncrementTick+0x154>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <xTaskIncrementTick+0x158>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <xTaskIncrementTick+0x154>)
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <xTaskIncrementTick+0x158>)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <xTaskIncrementTick+0x15c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <xTaskIncrementTick+0x15c>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	f000 f987 	bl	80030f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <xTaskIncrementTick+0x160>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d34c      	bcc.n	8002e86 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dec:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <xTaskIncrementTick+0x154>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <xTaskIncrementTick+0x160>)
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dfc:	601a      	str	r2, [r3, #0]
                    break;
 8002dfe:	e042      	b.n	8002e86 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e00:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <xTaskIncrementTick+0x154>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d203      	bcs.n	8002e20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e18:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <xTaskIncrementTick+0x160>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e1e:	e032      	b.n	8002e86 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fc3f 	bl	80026a8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3318      	adds	r3, #24
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fc36 	bl	80026a8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 f9ec 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <xTaskIncrementTick+0x164>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	4a22      	ldr	r2, [pc, #136]	; (8002edc <xTaskIncrementTick+0x164>)
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <xTaskIncrementTick+0x168>)
 8002e64:	441a      	add	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7ff fbbe 	bl	80025ee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <xTaskIncrementTick+0x16c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3b5      	bcc.n	8002dec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e84:	e7b2      	b.n	8002dec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <xTaskIncrementTick+0x16c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <xTaskIncrementTick+0x168>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d901      	bls.n	8002ea2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <xTaskIncrementTick+0x170>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e004      	b.n	8002eba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <xTaskIncrementTick+0x174>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <xTaskIncrementTick+0x174>)
 8002eb8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eba:	697b      	ldr	r3, [r7, #20]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200001f4 	.word	0x200001f4
 8002ec8:	200001d0 	.word	0x200001d0
 8002ecc:	20000184 	.word	0x20000184
 8002ed0:	20000188 	.word	0x20000188
 8002ed4:	200001e4 	.word	0x200001e4
 8002ed8:	200001ec 	.word	0x200001ec
 8002edc:	200001d4 	.word	0x200001d4
 8002ee0:	200000d0 	.word	0x200000d0
 8002ee4:	200000cc 	.word	0x200000cc
 8002ee8:	200001e0 	.word	0x200001e0
 8002eec:	200001dc 	.word	0x200001dc

08002ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <vTaskSwitchContext+0xbc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <vTaskSwitchContext+0xc0>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002f04:	e04d      	b.n	8002fa2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <vTaskSwitchContext+0xc0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <vTaskSwitchContext+0xc4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f1c3 031f 	rsb	r3, r3, #31
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4925      	ldr	r1, [pc, #148]	; (8002fb8 <vTaskSwitchContext+0xc8>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	607b      	str	r3, [r7, #4]
    }
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <vTaskSwitchContext+0x5a>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <vTaskSwitchContext+0xc8>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d104      	bne.n	8002f7c <vTaskSwitchContext+0x8c>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <vTaskSwitchContext+0xd0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d102      	bne.n	8002f98 <vTaskSwitchContext+0xa8>
 8002f92:	f002 f8a3 	bl	80050dc <SEGGER_SYSVIEW_OnIdle>
}
 8002f96:	e004      	b.n	8002fa2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <vTaskSwitchContext+0xcc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 f8fb 	bl	8005198 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001f4 	.word	0x200001f4
 8002fb0:	200001e0 	.word	0x200001e0
 8002fb4:	200001d4 	.word	0x200001d4
 8002fb8:	200000d0 	.word	0x200000d0
 8002fbc:	200000cc 	.word	0x200000cc
 8002fc0:	200001f0 	.word	0x200001f0

08002fc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fcc:	f000 f852 	bl	8003074 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <prvIdleTask+0x28>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d9f9      	bls.n	8002fcc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <prvIdleTask+0x2c>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fe8:	e7f0      	b.n	8002fcc <prvIdleTask+0x8>
 8002fea:	bf00      	nop
 8002fec:	200000d0 	.word	0x200000d0
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	e00c      	b.n	800301a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <prvInitialiseTaskLists+0x60>)
 800300c:	4413      	add	r3, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fac0 	bl	8002594 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3301      	adds	r3, #1
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d9ef      	bls.n	8003000 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <prvInitialiseTaskLists+0x64>)
 8003022:	f7ff fab7 	bl	8002594 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003026:	480d      	ldr	r0, [pc, #52]	; (800305c <prvInitialiseTaskLists+0x68>)
 8003028:	f7ff fab4 	bl	8002594 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800302c:	480c      	ldr	r0, [pc, #48]	; (8003060 <prvInitialiseTaskLists+0x6c>)
 800302e:	f7ff fab1 	bl	8002594 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003032:	480c      	ldr	r0, [pc, #48]	; (8003064 <prvInitialiseTaskLists+0x70>)
 8003034:	f7ff faae 	bl	8002594 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003038:	480b      	ldr	r0, [pc, #44]	; (8003068 <prvInitialiseTaskLists+0x74>)
 800303a:	f7ff faab 	bl	8002594 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <prvInitialiseTaskLists+0x78>)
 8003040:	4a05      	ldr	r2, [pc, #20]	; (8003058 <prvInitialiseTaskLists+0x64>)
 8003042:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <prvInitialiseTaskLists+0x7c>)
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <prvInitialiseTaskLists+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200000d0 	.word	0x200000d0
 8003058:	2000015c 	.word	0x2000015c
 800305c:	20000170 	.word	0x20000170
 8003060:	2000018c 	.word	0x2000018c
 8003064:	200001a0 	.word	0x200001a0
 8003068:	200001b8 	.word	0x200001b8
 800306c:	20000184 	.word	0x20000184
 8003070:	20000188 	.word	0x20000188

08003074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800307a:	e019      	b.n	80030b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800307c:	f000 f9f4 	bl	8003468 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <prvCheckTasksWaitingTermination+0x50>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fb0b 	bl	80026a8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <prvCheckTasksWaitingTermination+0x54>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <prvCheckTasksWaitingTermination+0x54>)
 800309a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <prvCheckTasksWaitingTermination+0x58>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <prvCheckTasksWaitingTermination+0x58>)
 80030a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80030a6:	f000 fa0f 	bl	80034c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f810 	bl	80030d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <prvCheckTasksWaitingTermination+0x58>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e1      	bne.n	800307c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200001a0 	.word	0x200001a0
 80030c8:	200001cc 	.word	0x200001cc
 80030cc:	200001b4 	.word	0x200001b4

080030d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fbcd 	bl	800387c <vPortFree>
                vPortFree( pxTCB );
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fbca 	bl	800387c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <prvResetNextTaskUnblockTime+0x30>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <prvResetNextTaskUnblockTime+0x34>)
 8003100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003104:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003106:	e005      	b.n	8003114 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <prvResetNextTaskUnblockTime+0x30>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <prvResetNextTaskUnblockTime+0x34>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000184 	.word	0x20000184
 8003124:	200001ec 	.word	0x200001ec

08003128 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003132:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fab2 	bl	80026a8 <uxListRemove>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800314a:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4013      	ands	r3, r2
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003160:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003168:	d10a      	bne.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4820      	ldr	r0, [pc, #128]	; (80031fc <prvAddCurrentTaskToDelayedList+0xd4>)
 800317a:	f7ff fa38 	bl	80025ee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800317e:	e032      	b.n	80031e6 <prvAddCurrentTaskToDelayedList+0xbe>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d20f      	bcs.n	80031b8 <prvAddCurrentTaskToDelayedList+0x90>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2104      	movs	r1, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 f87e 	bl	80052a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7ff fa40 	bl	8002636 <vListInsert>
}
 80031b6:	e016      	b.n	80031e6 <prvAddCurrentTaskToDelayedList+0xbe>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2104      	movs	r1, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 f86e 	bl	80052a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <prvAddCurrentTaskToDelayedList+0xdc>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7ff fa30 	bl	8002636 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <prvAddCurrentTaskToDelayedList+0xe0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d202      	bcs.n	80031e6 <prvAddCurrentTaskToDelayedList+0xbe>
                        xNextTaskUnblockTime = xTimeToWake;
 80031e0:	4a09      	ldr	r2, [pc, #36]	; (8003208 <prvAddCurrentTaskToDelayedList+0xe0>)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6013      	str	r3, [r2, #0]
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200001d0 	.word	0x200001d0
 80031f4:	200000cc 	.word	0x200000cc
 80031f8:	200001d4 	.word	0x200001d4
 80031fc:	200001b8 	.word	0x200001b8
 8003200:	20000188 	.word	0x20000188
 8003204:	20000184 	.word	0x20000184
 8003208:	200001ec 	.word	0x200001ec

0800320c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b04      	subs	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3b04      	subs	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b04      	subs	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800323c:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <pxPortInitialiseStack+0x64>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b14      	subs	r3, #20
 8003246:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3b04      	subs	r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f06f 0202 	mvn.w	r2, #2
 800325a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3b20      	subs	r3, #32
 8003260:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	08003275 	.word	0x08003275

08003274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <prvTaskExitError+0x54>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003286:	d00a      	beq.n	800329e <prvTaskExitError+0x2a>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	60fb      	str	r3, [r7, #12]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <prvTaskExitError+0x28>
        __asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	60bb      	str	r3, [r7, #8]
    }
 80032b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80032b2:	bf00      	nop
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0fc      	beq.n	80032b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	20000010 	.word	0x20000010
 80032cc:	00000000 	.word	0x00000000

080032d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <pxCurrentTCBConst2>)
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	6808      	ldr	r0, [r1, #0]
 80032d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032da:	f380 8809 	msr	PSP, r0
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8811 	msr	BASEPRI, r0
 80032ea:	4770      	bx	lr
 80032ec:	f3af 8000 	nop.w

080032f0 <pxCurrentTCBConst2>:
 80032f0:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop

080032f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032f8:	4808      	ldr	r0, [pc, #32]	; (800331c <prvPortStartFirstTask+0x24>)
 80032fa:	6800      	ldr	r0, [r0, #0]
 80032fc:	6800      	ldr	r0, [r0, #0]
 80032fe:	f380 8808 	msr	MSP, r0
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f380 8814 	msr	CONTROL, r0
 800330a:	b662      	cpsie	i
 800330c:	b661      	cpsie	f
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	df00      	svc	0
 8003318:	bf00      	nop
 800331a:	0000      	.short	0x0000
 800331c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop

08003324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800332a:	4b46      	ldr	r3, [pc, #280]	; (8003444 <xPortStartScheduler+0x120>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a46      	ldr	r2, [pc, #280]	; (8003448 <xPortStartScheduler+0x124>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10a      	bne.n	800334a <xPortStartScheduler+0x26>
        __asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	613b      	str	r3, [r7, #16]
    }
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <xPortStartScheduler+0x120>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3f      	ldr	r2, [pc, #252]	; (800344c <xPortStartScheduler+0x128>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10a      	bne.n	800336a <xPortStartScheduler+0x46>
        __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
    }
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <xPortStartScheduler+0x12c>)
 800336c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <xPortStartScheduler+0x130>)
 8003390:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003392:	4b31      	ldr	r3, [pc, #196]	; (8003458 <xPortStartScheduler+0x134>)
 8003394:	2207      	movs	r2, #7
 8003396:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003398:	e009      	b.n	80033ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <xPortStartScheduler+0x134>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3b01      	subs	r3, #1
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <xPortStartScheduler+0x134>)
 80033a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d0ef      	beq.n	800339a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033ba:	4b27      	ldr	r3, [pc, #156]	; (8003458 <xPortStartScheduler+0x134>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00a      	beq.n	80033dc <xPortStartScheduler+0xb8>
        __asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	60bb      	str	r3, [r7, #8]
    }
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <xPortStartScheduler+0x134>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <xPortStartScheduler+0x134>)
 80033e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <xPortStartScheduler+0x134>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ee:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <xPortStartScheduler+0x134>)
 80033f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <xPortStartScheduler+0x138>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a17      	ldr	r2, [pc, #92]	; (800345c <xPortStartScheduler+0x138>)
 8003400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <xPortStartScheduler+0x138>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a14      	ldr	r2, [pc, #80]	; (800345c <xPortStartScheduler+0x138>)
 800340c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003412:	f000 f8e3 	bl	80035dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <xPortStartScheduler+0x13c>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800341c:	f000 f902 	bl	8003624 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <xPortStartScheduler+0x140>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <xPortStartScheduler+0x140>)
 8003426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800342a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800342c:	f7ff ff64 	bl	80032f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003430:	f7ff fd5e 	bl	8002ef0 <vTaskSwitchContext>
    prvTaskExitError();
 8003434:	f7ff ff1e 	bl	8003274 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000ed00 	.word	0xe000ed00
 8003448:	410fc271 	.word	0x410fc271
 800344c:	410fc270 	.word	0x410fc270
 8003450:	e000e400 	.word	0xe000e400
 8003454:	200001f8 	.word	0x200001f8
 8003458:	200001fc 	.word	0x200001fc
 800345c:	e000ed20 	.word	0xe000ed20
 8003460:	20000010 	.word	0x20000010
 8003464:	e000ef34 	.word	0xe000ef34

08003468 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
        __asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	607b      	str	r3, [r7, #4]
    }
 8003480:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <vPortEnterCritical+0x58>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <vPortEnterCritical+0x58>)
 800348a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <vPortEnterCritical+0x58>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10f      	bne.n	80034b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <vPortEnterCritical+0x5c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	603b      	str	r3, [r7, #0]
    }
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <vPortEnterCritical+0x4a>
    }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000010 	.word	0x20000010
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <vPortExitCritical+0x50>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <vPortExitCritical+0x24>
        __asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	607b      	str	r3, [r7, #4]
    }
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <vPortExitCritical+0x50>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <vPortExitCritical+0x50>)
 80034f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <vPortExitCritical+0x50>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <vPortExitCritical+0x42>
 80034fe:	2300      	movs	r3, #0
 8003500:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003508:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000010 	.word	0x20000010
 800351c:	00000000 	.word	0x00000000

08003520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003520:	f3ef 8009 	mrs	r0, PSP
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <pxCurrentTCBConst>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	f01e 0f10 	tst.w	lr, #16
 8003530:	bf08      	it	eq
 8003532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353a:	6010      	str	r0, [r2, #0]
 800353c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003544:	f380 8811 	msr	BASEPRI, r0
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f7ff fcce 	bl	8002ef0 <vTaskSwitchContext>
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f380 8811 	msr	BASEPRI, r0
 800355c:	bc09      	pop	{r0, r3}
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	6808      	ldr	r0, [r1, #0]
 8003562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003566:	f01e 0f10 	tst.w	lr, #16
 800356a:	bf08      	it	eq
 800356c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003570:	f380 8809 	msr	PSP, r0
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	f3af 8000 	nop.w

08003580 <pxCurrentTCBConst>:
 8003580:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop

08003588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
        __asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	607b      	str	r3, [r7, #4]
    }
 80035a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80035a2:	f001 fd21 	bl	8004fe8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035a6:	f7ff fbe7 	bl	8002d78 <xTaskIncrementTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80035b0:	f001 fd78 	bl	80050a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <SysTick_Handler+0x50>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e001      	b.n	80035c2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80035be:	f001 fd55 	bl	800506c <SEGGER_SYSVIEW_RecordExitISR>
 80035c2:	2300      	movs	r3, #0
 80035c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f383 8811 	msr	BASEPRI, r3
    }
 80035cc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <vPortSetupTimerInterrupt+0x34>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <vPortSetupTimerInterrupt+0x38>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <vPortSetupTimerInterrupt+0x3c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <vPortSetupTimerInterrupt+0x40>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	4a09      	ldr	r2, [pc, #36]	; (8003620 <vPortSetupTimerInterrupt+0x44>)
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <vPortSetupTimerInterrupt+0x34>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010
 8003614:	e000e018 	.word	0xe000e018
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3
 8003620:	e000e014 	.word	0xe000e014

08003624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003634 <vPortEnableVFP+0x10>
 8003628:	6801      	ldr	r1, [r0, #0]
 800362a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800362e:	6001      	str	r1, [r0, #0]
 8003630:	4770      	bx	lr
 8003632:	0000      	.short	0x0000
 8003634:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop

0800363c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003642:	f3ef 8305 	mrs	r3, IPSR
 8003646:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d914      	bls.n	8003678 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <vPortValidateInterruptPriority+0x70>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <vPortValidateInterruptPriority+0x74>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	7afa      	ldrb	r2, [r7, #11]
 800365e:	429a      	cmp	r2, r3
 8003660:	d20a      	bcs.n	8003678 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	607b      	str	r3, [r7, #4]
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <vPortValidateInterruptPriority+0x78>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <vPortValidateInterruptPriority+0x7c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d90a      	bls.n	800369e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	603b      	str	r3, [r7, #0]
    }
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <vPortValidateInterruptPriority+0x60>
    }
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000e3f0 	.word	0xe000e3f0
 80036b0:	200001f8 	.word	0x200001f8
 80036b4:	e000ed0c 	.word	0xe000ed0c
 80036b8:	200001fc 	.word	0x200001fc

080036bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80036c8:	f7ff fa86 	bl	8002bd8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80036cc:	4b65      	ldr	r3, [pc, #404]	; (8003864 <pvPortMalloc+0x1a8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80036d4:	f000 f934 	bl	8003940 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036d8:	4b63      	ldr	r3, [pc, #396]	; (8003868 <pvPortMalloc+0x1ac>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 80a7 	bne.w	8003834 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02d      	beq.n	8003748 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80036ec:	2208      	movs	r2, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d227      	bcs.n	8003748 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80036f8:	2208      	movs	r2, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f023 0307 	bic.w	r3, r3, #7
 8003710:	3308      	adds	r3, #8
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d214      	bcs.n	8003742 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	3308      	adds	r3, #8
 8003720:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <pvPortMalloc+0x92>
        __asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	617b      	str	r3, [r7, #20]
    }
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003746:	e002      	b.n	800374e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	e000      	b.n	8003750 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800374e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d06e      	beq.n	8003834 <pvPortMalloc+0x178>
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <pvPortMalloc+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d869      	bhi.n	8003834 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <pvPortMalloc+0x1b4>)
 8003762:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003764:	4b42      	ldr	r3, [pc, #264]	; (8003870 <pvPortMalloc+0x1b4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800376a:	e004      	b.n	8003776 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d903      	bls.n	8003788 <pvPortMalloc+0xcc>
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f1      	bne.n	800376c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <pvPortMalloc+0x1a8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	429a      	cmp	r2, r3
 8003790:	d050      	beq.n	8003834 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2208      	movs	r2, #8
 8003798:	4413      	add	r3, r2
 800379a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	2308      	movs	r3, #8
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d91f      	bls.n	80037f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <pvPortMalloc+0x120>
        __asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	613b      	str	r3, [r7, #16]
    }
 80037d8:	bf00      	nop
 80037da:	e7fe      	b.n	80037da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037ee:	69b8      	ldr	r0, [r7, #24]
 80037f0:	f000 f908 	bl	8003a04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <pvPortMalloc+0x1b0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <pvPortMalloc+0x1b0>)
 8003800:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <pvPortMalloc+0x1b0>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <pvPortMalloc+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d203      	bcs.n	8003816 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <pvPortMalloc+0x1b0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <pvPortMalloc+0x1b8>)
 8003814:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4b13      	ldr	r3, [pc, #76]	; (8003868 <pvPortMalloc+0x1ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	431a      	orrs	r2, r3
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <pvPortMalloc+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <pvPortMalloc+0x1bc>)
 8003832:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003834:	f7ff f9de 	bl	8002bf4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <pvPortMalloc+0x19c>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	60fb      	str	r3, [r7, #12]
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <pvPortMalloc+0x19a>
    return pvReturn;
 8003858:	69fb      	ldr	r3, [r7, #28]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20003e08 	.word	0x20003e08
 8003868:	20003e1c 	.word	0x20003e1c
 800386c:	20003e0c 	.word	0x20003e0c
 8003870:	20003e00 	.word	0x20003e00
 8003874:	20003e10 	.word	0x20003e10
 8003878:	20003e14 	.word	0x20003e14

0800387c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04d      	beq.n	800392a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800388e:	2308      	movs	r3, #8
 8003890:	425b      	negs	r3, r3
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4413      	add	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <vPortFree+0xb8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <vPortFree+0x44>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60fb      	str	r3, [r7, #12]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <vPortFree+0x62>
        __asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	60bb      	str	r3, [r7, #8]
    }
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <vPortFree+0xb8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01e      	beq.n	800392a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11a      	bne.n	800392a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <vPortFree+0xb8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	401a      	ands	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003904:	f7ff f968 	bl	8002bd8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <vPortFree+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4413      	add	r3, r2
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <vPortFree+0xbc>)
 8003914:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003916:	6938      	ldr	r0, [r7, #16]
 8003918:	f000 f874 	bl	8003a04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <vPortFree+0xc0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a06      	ldr	r2, [pc, #24]	; (800393c <vPortFree+0xc0>)
 8003924:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003926:	f7ff f965 	bl	8002bf4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20003e1c 	.word	0x20003e1c
 8003938:	20003e0c 	.word	0x20003e0c
 800393c:	20003e18 	.word	0x20003e18

08003940 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003946:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800394a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <prvHeapInit+0xac>)
 800394e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3307      	adds	r3, #7
 800395e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <prvHeapInit+0xac>)
 8003970:	4413      	add	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <prvHeapInit+0xb0>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <prvHeapInit+0xb0>)
 8003980:	2200      	movs	r2, #0
 8003982:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800398c:	2208      	movs	r2, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <prvHeapInit+0xb4>)
 80039a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <prvHeapInit+0xb4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <prvHeapInit+0xb4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	1ad2      	subs	r2, r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <prvHeapInit+0xb4>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <prvHeapInit+0xb8>)
 80039ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <prvHeapInit+0xbc>)
 80039d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <prvHeapInit+0xc0>)
 80039da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20000200 	.word	0x20000200
 80039f0:	20003e00 	.word	0x20003e00
 80039f4:	20003e08 	.word	0x20003e08
 80039f8:	20003e10 	.word	0x20003e10
 80039fc:	20003e0c 	.word	0x20003e0c
 8003a00:	20003e1c 	.word	0x20003e1c

08003a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <prvInsertBlockIntoFreeList+0xac>)
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e002      	b.n	8003a18 <prvInsertBlockIntoFreeList+0x14>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d8f7      	bhi.n	8003a12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d108      	bne.n	8003a46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	441a      	add	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d118      	bne.n	8003a8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d00d      	beq.n	8003a82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e008      	b.n	8003a94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e003      	b.n	8003a94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d002      	beq.n	8003aa2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20003e00 	.word	0x20003e00
 8003ab4:	20003e08 	.word	0x20003e08

08003ab8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003abc:	4803      	ldr	r0, [pc, #12]	; (8003acc <_cbSendSystemDesc+0x14>)
 8003abe:	f001 fa3d 	bl	8004f3c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003ac2:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <_cbSendSystemDesc+0x18>)
 8003ac4:	f001 fa3a 	bl	8004f3c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	080056e0 	.word	0x080056e0
 8003ad0:	08005718 	.word	0x08005718

08003ad4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003ae2:	4a06      	ldr	r2, [pc, #24]	; (8003afc <SEGGER_SYSVIEW_Conf+0x28>)
 8003ae4:	f000 feb0 	bl	8004848 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ae8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003aec:	f000 fef0 	bl	80048d0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000000 	.word	0x20000000
 8003af8:	08003ab9 	.word	0x08003ab9
 8003afc:	080057b4 	.word	0x080057b4

08003b00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	e033      	b.n	8003b74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b0c:	491e      	ldr	r1, [pc, #120]	; (8003b88 <_cbSendTaskList+0x88>)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	491a      	ldr	r1, [pc, #104]	; (8003b88 <_cbSendTaskList+0x88>)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	4c16      	ldr	r4, [pc, #88]	; (8003b88 <_cbSendTaskList+0x88>)
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4423      	add	r3, r4
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	681c      	ldr	r4, [r3, #0]
 8003b40:	4d11      	ldr	r5, [pc, #68]	; (8003b88 <_cbSendTaskList+0x88>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	442b      	add	r3, r5
 8003b4e:	330c      	adds	r3, #12
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	4e0d      	ldr	r6, [pc, #52]	; (8003b88 <_cbSendTaskList+0x88>)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4433      	add	r3, r6
 8003b60:	3310      	adds	r3, #16
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	462b      	mov	r3, r5
 8003b68:	4622      	mov	r2, r4
 8003b6a:	f000 f8bd 	bl	8003ce8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3301      	adds	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <_cbSendTaskList+0x8c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3c6      	bcc.n	8003b0c <_cbSendTaskList+0xc>
  }
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b88:	20003e20 	.word	0x20003e20
 8003b8c:	20003ec0 	.word	0x20003ec0

08003b90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003b98:	f7ff f8dc 	bl	8002d54 <xTaskGetTickCountFromISR>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	4693      	mov	fp, r2
 8003ba4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	f04f 0a00 	mov.w	sl, #0
 8003bb4:	f04f 0b00 	mov.w	fp, #0
 8003bb8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003bbc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003bc0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003bc4:	4652      	mov	r2, sl
 8003bc6:	465b      	mov	r3, fp
 8003bc8:	1a14      	subs	r4, r2, r0
 8003bca:	eb63 0501 	sbc.w	r5, r3, r1
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	00ab      	lsls	r3, r5, #2
 8003bd8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003bdc:	00a2      	lsls	r2, r4, #2
 8003bde:	4614      	mov	r4, r2
 8003be0:	461d      	mov	r5, r3
 8003be2:	eb14 0800 	adds.w	r8, r4, r0
 8003be6:	eb45 0901 	adc.w	r9, r5, r1
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfe:	4690      	mov	r8, r2
 8003c00:	4699      	mov	r9, r3
 8003c02:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c06:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003c18 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c26:	2205      	movs	r2, #5
 8003c28:	492b      	ldr	r1, [pc, #172]	; (8003cd8 <SYSVIEW_AddTask+0xc0>)
 8003c2a:	68b8      	ldr	r0, [r7, #8]
 8003c2c:	f001 fcfe 	bl	800562c <memcmp>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d04b      	beq.n	8003cce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d903      	bls.n	8003c46 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c3e:	4828      	ldr	r0, [pc, #160]	; (8003ce0 <SYSVIEW_AddTask+0xc8>)
 8003c40:	f001 fc74 	bl	800552c <SEGGER_SYSVIEW_Warn>
    return;
 8003c44:	e044      	b.n	8003cd0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c46:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4926      	ldr	r1, [pc, #152]	; (8003ce4 <SYSVIEW_AddTask+0xcc>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4921      	ldr	r1, [pc, #132]	; (8003ce4 <SYSVIEW_AddTask+0xcc>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	491b      	ldr	r1, [pc, #108]	; (8003ce4 <SYSVIEW_AddTask+0xcc>)
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3308      	adds	r3, #8
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <SYSVIEW_AddTask+0xcc>)
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	330c      	adds	r3, #12
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <SYSVIEW_AddTask+0xcc>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3310      	adds	r3, #16
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <SYSVIEW_AddTask+0xc4>)
 8003cba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f80e 	bl	8003ce8 <SYSVIEW_SendTaskInfo>
 8003ccc:	e000      	b.n	8003cd0 <SYSVIEW_AddTask+0xb8>
    return;
 8003cce:	bf00      	nop

}
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	08005728 	.word	0x08005728
 8003cdc:	20003ec0 	.word	0x20003ec0
 8003ce0:	08005730 	.word	0x08005730
 8003ce4:	20003e20 	.word	0x20003e20

08003ce8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	2214      	movs	r2, #20
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 fcb2 	bl	8005668 <memset>
  TaskInfo.TaskID     = TaskID;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 f815 	bl	8004d4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003d22:	bf00      	nop
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <_DoInit+0xa0>)
 8003d34:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003d36:	22a8      	movs	r2, #168	; 0xa8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	6838      	ldr	r0, [r7, #0]
 8003d3c:	f001 fc94 	bl	8005668 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2203      	movs	r2, #3
 8003d44:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <_DoInit+0xa4>)
 8003d50:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <_DoInit+0xa8>)
 8003d56:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d5e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <_DoInit+0xa4>)
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <_DoInit+0xac>)
 8003d7c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d96:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e00c      	b.n	8003dba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1c3 030f 	rsb	r3, r3, #15
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <_DoInit+0xb0>)
 8003da8:	5cd1      	ldrb	r1, [r2, r3]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	460a      	mov	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3301      	adds	r3, #1
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d9ef      	bls.n	8003da0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003dc0:	f3bf 8f5f 	dmb	sy
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20003ec4 	.word	0x20003ec4
 8003dd0:	08005780 	.word	0x08005780
 8003dd4:	20003f6c 	.word	0x20003f6c
 8003dd8:	2000436c 	.word	0x2000436c
 8003ddc:	080057bc 	.word	0x080057bc

08003de0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d905      	bls.n	8003e10 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	e007      	b.n	8003e20 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	1acb      	subs	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bf28      	it	cs
 8003e2e:	4613      	movcs	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bf28      	it	cs
 8003e3a:	4613      	movcs	r3, r2
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	f001 fbfd 	bl	800564c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	4413      	add	r3, r2
 8003e58:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	4413      	add	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	4413      	add	r3, r2
 8003e70:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d101      	bne.n	8003e80 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e80:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1b2      	bne.n	8003df6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b088      	sub	sp, #32
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d911      	bls.n	8003ee2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f001 fbbd 	bl	800564c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ed2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	441a      	add	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ee0:	e01f      	b.n	8003f22 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	6938      	ldr	r0, [r7, #16]
 8003ef6:	f001 fba9 	bl	800564c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6938      	ldr	r0, [r7, #16]
 8003f14:	f001 fb9a 	bl	800564c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f18:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	60da      	str	r2, [r3, #12]
}
 8003f22:	bf00      	nop
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d808      	bhi.n	8003f58 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	3b01      	subs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e004      	b.n	8003f62 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f62:	697b      	ldr	r3, [r7, #20]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	; 0x30
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f7c:	4b3e      	ldr	r3, [pc, #248]	; (8004078 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <SEGGER_RTT_ReadNoLock+0x1e>
 8003f8a:	f7ff fecf 	bl	8003d2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3360      	adds	r3, #96	; 0x60
 8003f9a:	4a37      	ldr	r2, [pc, #220]	; (8004078 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d92b      	bls.n	8004014 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	bf28      	it	cs
 8003fce:	4613      	movcs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	4413      	add	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	6939      	ldr	r1, [r7, #16]
 8003fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe2:	f001 fb33 	bl	800564c <memcpy>
    NumBytesRead += NumBytesRem;
 8003fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4413      	add	r3, r2
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400c:	429a      	cmp	r2, r3
 800400e:	d101      	bne.n	8004014 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004010:	2300      	movs	r3, #0
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4293      	cmp	r3, r2
 8004022:	bf28      	it	cs
 8004024:	4613      	movcs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d019      	beq.n	8004062 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	4413      	add	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	6939      	ldr	r1, [r7, #16]
 800403c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800403e:	f001 fb05 	bl	800564c <memcpy>
    NumBytesRead += NumBytesRem;
 8004042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	4413      	add	r3, r2
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800406c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004070:	4618      	mov	r0, r3
 8004072:	3730      	adds	r7, #48	; 0x30
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20003ec4 	.word	0x20003ec4

0800407c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <SEGGER_RTT_WriteNoLock+0x9c>)
 800409a:	4413      	add	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d029      	beq.n	80040fa <SEGGER_RTT_WriteNoLock+0x7e>
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d82e      	bhi.n	8004108 <SEGGER_RTT_WriteNoLock+0x8c>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <SEGGER_RTT_WriteNoLock+0x38>
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d013      	beq.n	80040da <SEGGER_RTT_WriteNoLock+0x5e>
 80040b2:	e029      	b.n	8004108 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7ff ff38 	bl	8003f2a <_GetAvailWriteSpace>
 80040ba:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d202      	bcs.n	80040ca <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040c8:	e021      	b.n	800410e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff fee1 	bl	8003e9a <_WriteNoCheck>
    break;
 80040d8:	e019      	b.n	800410e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff ff25 	bl	8003f2a <_GetAvailWriteSpace>
 80040e0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bf28      	it	cs
 80040ea:	4613      	movcs	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	69b9      	ldr	r1, [r7, #24]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff fed1 	bl	8003e9a <_WriteNoCheck>
    break;
 80040f8:	e009      	b.n	800410e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff fe6e 	bl	8003de0 <_WriteBlocking>
 8004104:	61f8      	str	r0, [r7, #28]
    break;
 8004106:	e002      	b.n	800410e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
    break;
 800410c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800410e:	69fb      	ldr	r3, [r7, #28]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20003ec4 	.word	0x20003ec4

0800411c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <SEGGER_RTT_Write+0x48>)
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <SEGGER_RTT_Write+0x1e>
 8004136:	f7ff fdf9 	bl	8003d2c <_DoInit>
  SEGGER_RTT_LOCK();
 800413a:	f3ef 8311 	mrs	r3, BASEPRI
 800413e:	f04f 0120 	mov.w	r1, #32
 8004142:	f381 8811 	msr	BASEPRI, r1
 8004146:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff ff95 	bl	800407c <SEGGER_RTT_WriteNoLock>
 8004152:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20003ec4 	.word	0x20003ec4

08004168 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f7fc f896 	bl	80002a4 <strlen>
 8004178:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffcc 	bl	800411c <SEGGER_RTT_Write>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800419e:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80041ac:	f7ff fdbe 	bl	8003d2c <_DoInit>
  SEGGER_RTT_LOCK();
 80041b0:	f3ef 8311 	mrs	r3, BASEPRI
 80041b4:	f04f 0120 	mov.w	r1, #32
 80041b8:	f381 8811 	msr	BASEPRI, r1
 80041bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041be:	4b35      	ldr	r3, [pc, #212]	; (8004294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80041c6:	6939      	ldr	r1, [r7, #16]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	3304      	adds	r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	dbeb      	blt.n	80041c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80041ee:	e000      	b.n	80041f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80041f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	da3f      	bge.n	800427c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80041fc:	6939      	ldr	r1, [r7, #16]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	440b      	add	r3, r1
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004210:	6939      	ldr	r1, [r7, #16]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	3304      	adds	r3, #4
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	3320      	adds	r3, #32
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800423a:	6939      	ldr	r1, [r7, #16]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	3328      	adds	r3, #40	; 0x28
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	332c      	adds	r3, #44	; 0x2c
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004276:	f3bf 8f5f 	dmb	sy
 800427a:	e002      	b.n	8004282 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004280:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004288:	69fb      	ldr	r3, [r7, #28]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20003ec4 	.word	0x20003ec4

08004298 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80042a8:	623b      	str	r3, [r7, #32]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80042b4:	f7ff fd3a 	bl	8003d2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80042ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d82c      	bhi.n	800431c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80042c2:	f3ef 8311 	mrs	r3, BASEPRI
 80042c6:	f04f 0120 	mov.w	r1, #32
 80042ca:	f381 8811 	msr	BASEPRI, r1
 80042ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	3360      	adds	r3, #96	; 0x60
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800430c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	e002      	b.n	8004322 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20003ec4 	.word	0x20003ec4

08004330 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	60fa      	str	r2, [r7, #12]
 8004346:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d90a      	bls.n	8004364 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004352:	e007      	b.n	8004364 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	1c53      	adds	r3, r2, #1
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	60f9      	str	r1, [r7, #12]
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	1e5a      	subs	r2, r3, #1
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <_EncodeStr+0x46>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ee      	bne.n	8004354 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b2da      	uxtb	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3307      	adds	r3, #7
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <_HandleIncomingPacket+0xdc>)
 80043b0:	7e1b      	ldrb	r3, [r3, #24]
 80043b2:	4618      	mov	r0, r3
 80043b4:	1cfb      	adds	r3, r7, #3
 80043b6:	2201      	movs	r2, #1
 80043b8:	4619      	mov	r1, r3
 80043ba:	f7ff fdd9 	bl	8003f70 <SEGGER_RTT_ReadNoLock>
 80043be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d052      	beq.n	800446c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d031      	beq.n	8004430 <_HandleIncomingPacket+0x88>
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	dc40      	bgt.n	8004452 <_HandleIncomingPacket+0xaa>
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	dc15      	bgt.n	8004400 <_HandleIncomingPacket+0x58>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dd3c      	ble.n	8004452 <_HandleIncomingPacket+0xaa>
 80043d8:	3b01      	subs	r3, #1
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d839      	bhi.n	8004452 <_HandleIncomingPacket+0xaa>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <_HandleIncomingPacket+0x3c>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004407 	.word	0x08004407
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004413 	.word	0x08004413
 80043f0:	08004419 	.word	0x08004419
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	2b7f      	cmp	r3, #127	; 0x7f
 8004402:	d035      	beq.n	8004470 <_HandleIncomingPacket+0xc8>
 8004404:	e025      	b.n	8004452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004406:	f000 fb27 	bl	8004a58 <SEGGER_SYSVIEW_Start>
      break;
 800440a:	e036      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800440c:	f000 fbde 	bl	8004bcc <SEGGER_SYSVIEW_Stop>
      break;
 8004410:	e033      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004412:	f000 fdb7 	bl	8004f84 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004416:	e030      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004418:	f000 fd7c 	bl	8004f14 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800441c:	e02d      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800441e:	f000 fbfb 	bl	8004c18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004422:	e02a      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004424:	f001 f844 	bl	80054b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004428:	e027      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800442a:	f001 f823 	bl	8005474 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800442e:	e024      	b.n	800447a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <_HandleIncomingPacket+0xdc>)
 8004432:	7e1b      	ldrb	r3, [r3, #24]
 8004434:	4618      	mov	r0, r3
 8004436:	1cfb      	adds	r3, r7, #3
 8004438:	2201      	movs	r2, #1
 800443a:	4619      	mov	r1, r3
 800443c:	f7ff fd98 	bl	8003f70 <SEGGER_RTT_ReadNoLock>
 8004440:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ff88 	bl	8005360 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004450:	e010      	b.n	8004474 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	b25b      	sxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	da0e      	bge.n	8004478 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <_HandleIncomingPacket+0xdc>)
 800445c:	7e1b      	ldrb	r3, [r3, #24]
 800445e:	4618      	mov	r0, r3
 8004460:	1cfb      	adds	r3, r7, #3
 8004462:	2201      	movs	r2, #1
 8004464:	4619      	mov	r1, r3
 8004466:	f7ff fd83 	bl	8003f70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800446a:	e005      	b.n	8004478 <_HandleIncomingPacket+0xd0>
    }
  }
 800446c:	bf00      	nop
 800446e:	e004      	b.n	800447a <_HandleIncomingPacket+0xd2>
      break;
 8004470:	bf00      	nop
 8004472:	e002      	b.n	800447a <_HandleIncomingPacket+0xd2>
      break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <_HandleIncomingPacket+0xd2>
      break;
 8004478:	bf00      	nop
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20005b84 	.word	0x20005b84

08004488 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800448e:	2301      	movs	r3, #1
 8004490:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449c:	4b31      	ldr	r3, [pc, #196]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a2:	e00b      	b.n	80044bc <_TrySendOverflowPacket+0x34>
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	1c59      	adds	r1, r3, #1
 80044ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	09db      	lsrs	r3, r3, #7
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	2b7f      	cmp	r3, #127	; 0x7f
 80044c0:	d8f0      	bhi.n	80044a4 <_TrySendOverflowPacket+0x1c>
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <_TrySendOverflowPacket+0xe0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	e00b      	b.n	8004504 <_TrySendOverflowPacket+0x7c>
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	6279      	str	r1, [r7, #36]	; 0x24
 80044f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	09db      	lsrs	r3, r3, #7
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b7f      	cmp	r3, #127	; 0x7f
 8004508:	d8f0      	bhi.n	80044ec <_TrySendOverflowPacket+0x64>
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	627a      	str	r2, [r7, #36]	; 0x24
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	4618      	mov	r0, r3
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	461a      	mov	r2, r3
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	4619      	mov	r1, r3
 800452c:	f7fb fe70 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004530:	4603      	mov	r3, r0
 8004532:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	b2da      	uxtb	r2, r3
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e004      	b.n	8004558 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	3301      	adds	r3, #1
 8004554:	4a03      	ldr	r2, [pc, #12]	; (8004564 <_TrySendOverflowPacket+0xdc>)
 8004556:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004558:	693b      	ldr	r3, [r7, #16]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3730      	adds	r7, #48	; 0x30
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20005b84 	.word	0x20005b84
 8004568:	e0001004 	.word	0xe0001004

0800456c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004578:	4b98      	ldr	r3, [pc, #608]	; (80047dc <_SendPacket+0x270>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d010      	beq.n	80045a2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004580:	4b96      	ldr	r3, [pc, #600]	; (80047dc <_SendPacket+0x270>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 812d 	beq.w	80047e4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800458a:	4b94      	ldr	r3, [pc, #592]	; (80047dc <_SendPacket+0x270>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d109      	bne.n	80045a6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004592:	f7ff ff79 	bl	8004488 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004596:	4b91      	ldr	r3, [pc, #580]	; (80047dc <_SendPacket+0x270>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	f040 8124 	bne.w	80047e8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80045a0:	e001      	b.n	80045a6 <_SendPacket+0x3a>
    goto Send;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <_SendPacket+0x3c>
Send:
 80045a6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b1f      	cmp	r3, #31
 80045ac:	d809      	bhi.n	80045c2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80045ae:	4b8b      	ldr	r3, [pc, #556]	; (80047dc <_SendPacket+0x270>)
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 8115 	bne.w	80047ec <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b17      	cmp	r3, #23
 80045c6:	d807      	bhi.n	80045d8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e0c4      	b.n	8004762 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b7f      	cmp	r3, #127	; 0x7f
 80045e4:	d912      	bls.n	800460c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	09da      	lsrs	r2, r3, #7
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	3a01      	subs	r2, #1
 80045fe:	60fa      	str	r2, [r7, #12]
 8004600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e006      	b.n	800461a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b7e      	cmp	r3, #126	; 0x7e
 800461e:	d807      	bhi.n	8004630 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e098      	b.n	8004762 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004636:	d212      	bcs.n	800465e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	09da      	lsrs	r2, r3, #7
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b01      	subs	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	3a01      	subs	r2, #1
 8004650:	60fa      	str	r2, [r7, #12]
 8004652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e081      	b.n	8004762 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004664:	d21d      	bcs.n	80046a2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0b9a      	lsrs	r2, r3, #14
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b01      	subs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	09db      	lsrs	r3, r3, #7
 800467a:	b2db      	uxtb	r3, r3
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	3a01      	subs	r2, #1
 8004680:	60fa      	str	r2, [r7, #12]
 8004682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004686:	b2da      	uxtb	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	3a01      	subs	r2, #1
 8004694:	60fa      	str	r2, [r7, #12]
 8004696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e05f      	b.n	8004762 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a8:	d228      	bcs.n	80046fc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0d5a      	lsrs	r2, r3, #21
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0b9b      	lsrs	r3, r3, #14
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	3a01      	subs	r2, #1
 80046c4:	60fa      	str	r2, [r7, #12]
 80046c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	09db      	lsrs	r3, r3, #7
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	3a01      	subs	r2, #1
 80046da:	60fa      	str	r2, [r7, #12]
 80046dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	3a01      	subs	r2, #1
 80046ee:	60fa      	str	r2, [r7, #12]
 80046f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e032      	b.n	8004762 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0f1a      	lsrs	r2, r3, #28
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0d5b      	lsrs	r3, r3, #21
 8004710:	b2db      	uxtb	r3, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	3a01      	subs	r2, #1
 8004716:	60fa      	str	r2, [r7, #12]
 8004718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0b9b      	lsrs	r3, r3, #14
 8004726:	b2db      	uxtb	r3, r3
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	3a01      	subs	r2, #1
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	b2db      	uxtb	r3, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	3a01      	subs	r2, #1
 8004742:	60fa      	str	r2, [r7, #12]
 8004744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	3a01      	subs	r2, #1
 8004756:	60fa      	str	r2, [r7, #12]
 8004758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <_SendPacket+0x274>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <_SendPacket+0x270>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	e00b      	b.n	8004794 <_SendPacket+0x228>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	6279      	str	r1, [r7, #36]	; 0x24
 8004786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	09db      	lsrs	r3, r3, #7
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b7f      	cmp	r3, #127	; 0x7f
 8004798:	d8f0      	bhi.n	800477c <_SendPacket+0x210>
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	627a      	str	r2, [r7, #36]	; 0x24
 80047a0:	6a3a      	ldr	r2, [r7, #32]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <_SendPacket+0x270>)
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	4618      	mov	r0, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	f7fb fd29 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047be:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <_SendPacket+0x270>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	60d3      	str	r3, [r2, #12]
 80047cc:	e00f      	b.n	80047ee <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <_SendPacket+0x270>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	4b01      	ldr	r3, [pc, #4]	; (80047dc <_SendPacket+0x270>)
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	e008      	b.n	80047ee <_SendPacket+0x282>
 80047dc:	20005b84 	.word	0x20005b84
 80047e0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80047e4:	bf00      	nop
 80047e6:	e002      	b.n	80047ee <_SendPacket+0x282>
      goto SendDone;
 80047e8:	bf00      	nop
 80047ea:	e000      	b.n	80047ee <_SendPacket+0x282>
      goto SendDone;
 80047ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <_SendPacket+0x2d4>)
 80047f0:	7e1b      	ldrb	r3, [r3, #24]
 80047f2:	4619      	mov	r1, r3
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <_SendPacket+0x2d8>)
 80047f6:	460b      	mov	r3, r1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	336c      	adds	r3, #108	; 0x6c
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <_SendPacket+0x2d4>)
 8004806:	7e1b      	ldrb	r3, [r3, #24]
 8004808:	4618      	mov	r0, r3
 800480a:	490e      	ldr	r1, [pc, #56]	; (8004844 <_SendPacket+0x2d8>)
 800480c:	4603      	mov	r3, r0
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4403      	add	r3, r0
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	3370      	adds	r3, #112	; 0x70
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d00b      	beq.n	8004836 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <_SendPacket+0x2d4>)
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <_SendPacket+0x2d4>)
 8004828:	2201      	movs	r2, #1
 800482a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800482c:	f7ff fdbc 	bl	80043a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <_SendPacket+0x2d4>)
 8004832:	2200      	movs	r2, #0
 8004834:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004836:	bf00      	nop
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20005b84 	.word	0x20005b84
 8004844:	20003ec4 	.word	0x20003ec4

08004848 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004856:	2300      	movs	r3, #0
 8004858:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800485c:	4917      	ldr	r1, [pc, #92]	; (80048bc <SEGGER_SYSVIEW_Init+0x74>)
 800485e:	4818      	ldr	r0, [pc, #96]	; (80048c0 <SEGGER_SYSVIEW_Init+0x78>)
 8004860:	f7ff fc96 	bl	8004190 <SEGGER_RTT_AllocUpBuffer>
 8004864:	4603      	mov	r3, r0
 8004866:	b2da      	uxtb	r2, r3
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800486a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800486c:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800486e:	785a      	ldrb	r2, [r3, #1]
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004872:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004876:	7e1b      	ldrb	r3, [r3, #24]
 8004878:	4618      	mov	r0, r3
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2308      	movs	r3, #8
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <SEGGER_SYSVIEW_Init+0x80>)
 8004882:	490f      	ldr	r1, [pc, #60]	; (80048c0 <SEGGER_SYSVIEW_Init+0x78>)
 8004884:	f7ff fd08 	bl	8004298 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <SEGGER_SYSVIEW_Init+0x84>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004894:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004896:	4a0b      	ldr	r2, [pc, #44]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	2000437c 	.word	0x2000437c
 80048c0:	08005794 	.word	0x08005794
 80048c4:	20005b84 	.word	0x20005b84
 80048c8:	20005b7c 	.word	0x20005b7c
 80048cc:	e0001004 	.word	0xe0001004

080048d0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80048d8:	4a04      	ldr	r2, [pc, #16]	; (80048ec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6113      	str	r3, [r2, #16]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20005b84 	.word	0x20005b84

080048f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048f8:	f3ef 8311 	mrs	r3, BASEPRI
 80048fc:	f04f 0120 	mov.w	r1, #32
 8004900:	f381 8811 	msr	BASEPRI, r1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	4808      	ldr	r0, [pc, #32]	; (8004928 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004908:	f7ff fd42 	bl	8004390 <_PreparePacket>
 800490c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f7ff fe2a 	bl	800456c <_SendPacket>
  RECORD_END();
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20005bb4 	.word	0x20005bb4

0800492c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004936:	f3ef 8311 	mrs	r3, BASEPRI
 800493a:	f04f 0120 	mov.w	r1, #32
 800493e:	f381 8811 	msr	BASEPRI, r1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	4816      	ldr	r0, [pc, #88]	; (80049a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004946:	f7ff fd23 	bl	8004390 <_PreparePacket>
 800494a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e00b      	b.n	8004972 <SEGGER_SYSVIEW_RecordU32+0x46>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1c59      	adds	r1, r3, #1
 8004962:	61f9      	str	r1, [r7, #28]
 8004964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	09db      	lsrs	r3, r3, #7
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b7f      	cmp	r3, #127	; 0x7f
 8004976:	d8f0      	bhi.n	800495a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	61fa      	str	r2, [r7, #28]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f7ff fded 	bl	800456c <_SendPacket>
  RECORD_END();
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f383 8811 	msr	BASEPRI, r3
}
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20005bb4 	.word	0x20005bb4

080049a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049b0:	f3ef 8311 	mrs	r3, BASEPRI
 80049b4:	f04f 0120 	mov.w	r1, #32
 80049b8:	f381 8811 	msr	BASEPRI, r1
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	4825      	ldr	r0, [pc, #148]	; (8004a54 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80049c0:	f7ff fce6 	bl	8004390 <_PreparePacket>
 80049c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	e00b      	b.n	80049ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b7f      	cmp	r3, #127	; 0x7f
 80049f0:	d8f0      	bhi.n	80049d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	6279      	str	r1, [r7, #36]	; 0x24
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	69b8      	ldr	r0, [r7, #24]
 8004a40:	f7ff fd94 	bl	800456c <_SendPacket>
  RECORD_END();
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f383 8811 	msr	BASEPRI, r3
}
 8004a4a:	bf00      	nop
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20005bb4 	.word	0x20005bb4

08004a58 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a5e:	4b58      	ldr	r3, [pc, #352]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a64:	f3ef 8311 	mrs	r3, BASEPRI
 8004a68:	f04f 0120 	mov.w	r1, #32
 8004a6c:	f381 8811 	msr	BASEPRI, r1
 8004a70:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004a72:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	220a      	movs	r2, #10
 8004a78:	4952      	ldr	r1, [pc, #328]	; (8004bc4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fbc8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004a86:	200a      	movs	r0, #10
 8004a88:	f7ff ff32 	bl	80048f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a90:	f04f 0120 	mov.w	r1, #32
 8004a94:	f381 8811 	msr	BASEPRI, r1
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	484b      	ldr	r0, [pc, #300]	; (8004bc8 <SEGGER_SYSVIEW_Start+0x170>)
 8004a9c:	f7ff fc78 	bl	8004390 <_PreparePacket>
 8004aa0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aaa:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab0:	e00b      	b.n	8004aca <SEGGER_SYSVIEW_Start+0x72>
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	1c59      	adds	r1, r3, #1
 8004aba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004abc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	09db      	lsrs	r3, r3, #7
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ace:	d8f0      	bhi.n	8004ab2 <SEGGER_SYSVIEW_Start+0x5a>
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	e00b      	b.n	8004b04 <SEGGER_SYSVIEW_Start+0xac>
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	6279      	str	r1, [r7, #36]	; 0x24
 8004af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	09db      	lsrs	r3, r3, #7
 8004b02:	623b      	str	r3, [r7, #32]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b7f      	cmp	r3, #127	; 0x7f
 8004b08:	d8f0      	bhi.n	8004aec <SEGGER_SYSVIEW_Start+0x94>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e00b      	b.n	8004b3e <SEGGER_SYSVIEW_Start+0xe6>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	61f9      	str	r1, [r7, #28]
 8004b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	09db      	lsrs	r3, r3, #7
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b7f      	cmp	r3, #127	; 0x7f
 8004b42:	d8f0      	bhi.n	8004b26 <SEGGER_SYSVIEW_Start+0xce>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	61fa      	str	r2, [r7, #28]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e00b      	b.n	8004b76 <SEGGER_SYSVIEW_Start+0x11e>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	6179      	str	r1, [r7, #20]
 8004b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7a:	d8f0      	bhi.n	8004b5e <SEGGER_SYSVIEW_Start+0x106>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	617a      	str	r2, [r7, #20]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b8c:	2218      	movs	r2, #24
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fceb 	bl	800456c <_SendPacket>
      RECORD_END();
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b9c:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <SEGGER_SYSVIEW_Start+0x168>)
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004baa:	f000 f9eb 	bl	8004f84 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bae:	f000 f9b1 	bl	8004f14 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bb2:	f000 fc7d 	bl	80054b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bb6:	bf00      	nop
 8004bb8:	3730      	adds	r7, #48	; 0x30
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20005b84 	.word	0x20005b84
 8004bc4:	080057d0 	.word	0x080057d0
 8004bc8:	20005bb4 	.word	0x20005bb4

08004bcc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd6:	f04f 0120 	mov.w	r1, #32
 8004bda:	f381 8811 	msr	BASEPRI, r1
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <SEGGER_SYSVIEW_Stop+0x44>)
 8004be2:	f7ff fbd5 	bl	8004390 <_PreparePacket>
 8004be6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004bf0:	220b      	movs	r2, #11
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	6838      	ldr	r0, [r7, #0]
 8004bf6:	f7ff fcb9 	bl	800456c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f383 8811 	msr	BASEPRI, r3
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20005bb4 	.word	0x20005bb4
 8004c14:	20005b84 	.word	0x20005b84

08004c18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c22:	f04f 0120 	mov.w	r1, #32
 8004c26:	f381 8811 	msr	BASEPRI, r1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	4845      	ldr	r0, [pc, #276]	; (8004d44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c2e:	f7ff fbaf 	bl	8004390 <_PreparePacket>
 8004c32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3c:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	6279      	str	r1, [r7, #36]	; 0x24
 8004c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e00b      	b.n	8004cd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	61f9      	str	r1, [r7, #28]
 8004cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	61fa      	str	r2, [r7, #28]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e00b      	b.n	8004d08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	6179      	str	r1, [r7, #20]
 8004cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	09db      	lsrs	r3, r3, #7
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	d8f0      	bhi.n	8004cf0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	617a      	str	r2, [r7, #20]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d1e:	2218      	movs	r2, #24
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68b8      	ldr	r0, [r7, #8]
 8004d24:	f7ff fc22 	bl	800456c <_SendPacket>
  RECORD_END();
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	4798      	blx	r3
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3730      	adds	r7, #48	; 0x30
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20005bb4 	.word	0x20005bb4
 8004d48:	20005b84 	.word	0x20005b84

08004d4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b092      	sub	sp, #72	; 0x48
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d54:	f3ef 8311 	mrs	r3, BASEPRI
 8004d58:	f04f 0120 	mov.w	r1, #32
 8004d5c:	f381 8811 	msr	BASEPRI, r1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	486a      	ldr	r0, [pc, #424]	; (8004f0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004d64:	f7ff fb14 	bl	8004390 <_PreparePacket>
 8004d68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b66      	ldr	r3, [pc, #408]	; (8004f10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6479      	str	r1, [r7, #68]	; 0x44
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	643b      	str	r3, [r7, #64]	; 0x40
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	647a      	str	r2, [r7, #68]	; 0x44
 8004da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	4619      	mov	r1, r3
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff fa9d 	bl	8004330 <_EncodeStr>
 8004df6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004df8:	2209      	movs	r2, #9
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	6938      	ldr	r0, [r7, #16]
 8004dfe:	f7ff fbb5 	bl	800456c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
 8004e16:	e00b      	b.n	8004e30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	6379      	str	r1, [r7, #52]	; 0x34
 8004e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	09db      	lsrs	r3, r3, #7
 8004e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	2b7f      	cmp	r3, #127	; 0x7f
 8004e34:	d8f0      	bhi.n	8004e18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e50:	e00b      	b.n	8004e6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	09db      	lsrs	r3, r3, #7
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6e:	d8f0      	bhi.n	8004e52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	e00b      	b.n	8004ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	6279      	str	r1, [r7, #36]	; 0x24
 8004e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	09db      	lsrs	r3, r3, #7
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea8:	d8f0      	bhi.n	8004e8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e00b      	b.n	8004edc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	61f9      	str	r1, [r7, #28]
 8004ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	09db      	lsrs	r3, r3, #7
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee0:	d8f0      	bhi.n	8004ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	61fa      	str	r2, [r7, #28]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004ef2:	2215      	movs	r2, #21
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	6938      	ldr	r0, [r7, #16]
 8004ef8:	f7ff fb38 	bl	800456c <_SendPacket>
  RECORD_END();
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f383 8811 	msr	BASEPRI, r3
}
 8004f02:	bf00      	nop
 8004f04:	3748      	adds	r7, #72	; 0x48
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20005bb4 	.word	0x20005bb4
 8004f10:	20005b84 	.word	0x20005b84

08004f14 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f2a:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4798      	blx	r3
  }
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20005b84 	.word	0x20005b84

08004f3c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f44:	f3ef 8311 	mrs	r3, BASEPRI
 8004f48:	f04f 0120 	mov.w	r1, #32
 8004f4c:	f381 8811 	msr	BASEPRI, r1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	480b      	ldr	r0, [pc, #44]	; (8004f80 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004f54:	f7ff fa1c 	bl	8004390 <_PreparePacket>
 8004f58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	6938      	ldr	r0, [r7, #16]
 8004f60:	f7ff f9e6 	bl	8004330 <_EncodeStr>
 8004f64:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004f66:	220e      	movs	r2, #14
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f7ff fafe 	bl	800456c <_SendPacket>
  RECORD_END();
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f383 8811 	msr	BASEPRI, r3
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20005bb4 	.word	0x20005bb4

08004f84 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01a      	beq.n	8004fc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4798      	blx	r3
 8004fa4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fa8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	000a      	movs	r2, r1
 8004fb8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fba:	4613      	mov	r3, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	200d      	movs	r0, #13
 8004fc2:	f7ff fcef 	bl	80049a4 <SEGGER_SYSVIEW_RecordU32x2>
 8004fc6:	e006      	b.n	8004fd6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	200c      	movs	r0, #12
 8004fd0:	f7ff fcac 	bl	800492c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20005b84 	.word	0x20005b84
 8004fe4:	e0001004 	.word	0xe0001004

08004fe8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff2:	f04f 0120 	mov.w	r1, #32
 8004ff6:	f381 8811 	msr	BASEPRI, r1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	4819      	ldr	r0, [pc, #100]	; (8005064 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ffe:	f7ff f9c7 	bl	8004390 <_PreparePacket>
 8005002:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005010:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e00b      	b.n	8005034 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	6179      	str	r1, [r7, #20]
 8005026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	09db      	lsrs	r3, r3, #7
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b7f      	cmp	r3, #127	; 0x7f
 8005038:	d8f0      	bhi.n	800501c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	617a      	str	r2, [r7, #20]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800504a:	2202      	movs	r2, #2
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7ff fa8c 	bl	800456c <_SendPacket>
  RECORD_END();
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f383 8811 	msr	BASEPRI, r3
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20005bb4 	.word	0x20005bb4
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005072:	f3ef 8311 	mrs	r3, BASEPRI
 8005076:	f04f 0120 	mov.w	r1, #32
 800507a:	f381 8811 	msr	BASEPRI, r1
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	4807      	ldr	r0, [pc, #28]	; (80050a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005082:	f7ff f985 	bl	8004390 <_PreparePacket>
 8005086:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005088:	2203      	movs	r2, #3
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f7ff fa6d 	bl	800456c <_SendPacket>
  RECORD_END();
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f383 8811 	msr	BASEPRI, r3
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20005bb4 	.word	0x20005bb4

080050a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050aa:	f3ef 8311 	mrs	r3, BASEPRI
 80050ae:	f04f 0120 	mov.w	r1, #32
 80050b2:	f381 8811 	msr	BASEPRI, r1
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	4807      	ldr	r0, [pc, #28]	; (80050d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80050ba:	f7ff f969 	bl	8004390 <_PreparePacket>
 80050be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80050c0:	2212      	movs	r2, #18
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6838      	ldr	r0, [r7, #0]
 80050c6:	f7ff fa51 	bl	800456c <_SendPacket>
  RECORD_END();
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f383 8811 	msr	BASEPRI, r3
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20005bb4 	.word	0x20005bb4

080050dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	f04f 0120 	mov.w	r1, #32
 80050ea:	f381 8811 	msr	BASEPRI, r1
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	4807      	ldr	r0, [pc, #28]	; (8005110 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050f2:	f7ff f94d 	bl	8004390 <_PreparePacket>
 80050f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050f8:	2211      	movs	r2, #17
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f7ff fa35 	bl	800456c <_SendPacket>
  RECORD_END();
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f383 8811 	msr	BASEPRI, r3
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20005bb4 	.word	0x20005bb4

08005114 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800511c:	f3ef 8311 	mrs	r3, BASEPRI
 8005120:	f04f 0120 	mov.w	r1, #32
 8005124:	f381 8811 	msr	BASEPRI, r1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	4819      	ldr	r0, [pc, #100]	; (8005190 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800512c:	f7ff f930 	bl	8004390 <_PreparePacket>
 8005130:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e00b      	b.n	8005162 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	1c59      	adds	r1, r3, #1
 8005152:	61f9      	str	r1, [r7, #28]
 8005154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b7f      	cmp	r3, #127	; 0x7f
 8005166:	d8f0      	bhi.n	800514a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005178:	2208      	movs	r2, #8
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	6938      	ldr	r0, [r7, #16]
 800517e:	f7ff f9f5 	bl	800456c <_SendPacket>
  RECORD_END();
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8811 	msr	BASEPRI, r3
}
 8005188:	bf00      	nop
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20005bb4 	.word	0x20005bb4
 8005194:	20005b84 	.word	0x20005b84

08005198 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4819      	ldr	r0, [pc, #100]	; (8005214 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80051b0:	f7ff f8ee 	bl	8004390 <_PreparePacket>
 80051b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051ba:	4b17      	ldr	r3, [pc, #92]	; (8005218 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e00b      	b.n	80051e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1c59      	adds	r1, r3, #1
 80051d6:	61f9      	str	r1, [r7, #28]
 80051d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	09db      	lsrs	r3, r3, #7
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ea:	d8f0      	bhi.n	80051ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051fc:	2204      	movs	r2, #4
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6938      	ldr	r0, [r7, #16]
 8005202:	f7ff f9b3 	bl	800456c <_SendPacket>
  RECORD_END();
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f383 8811 	msr	BASEPRI, r3
}
 800520c:	bf00      	nop
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20005bb4 	.word	0x20005bb4
 8005218:	20005b84 	.word	0x20005b84

0800521c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005224:	f3ef 8311 	mrs	r3, BASEPRI
 8005228:	f04f 0120 	mov.w	r1, #32
 800522c:	f381 8811 	msr	BASEPRI, r1
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	4819      	ldr	r0, [pc, #100]	; (8005298 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005234:	f7ff f8ac 	bl	8004390 <_PreparePacket>
 8005238:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e00b      	b.n	800526a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	61f9      	str	r1, [r7, #28]
 800525c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b7f      	cmp	r3, #127	; 0x7f
 800526e:	d8f0      	bhi.n	8005252 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005280:	2206      	movs	r2, #6
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	6938      	ldr	r0, [r7, #16]
 8005286:	f7ff f971 	bl	800456c <_SendPacket>
  RECORD_END();
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f383 8811 	msr	BASEPRI, r3
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20005bb4 	.word	0x20005bb4
 800529c:	20005b84 	.word	0x20005b84

080052a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052aa:	f3ef 8311 	mrs	r3, BASEPRI
 80052ae:	f04f 0120 	mov.w	r1, #32
 80052b2:	f381 8811 	msr	BASEPRI, r1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	4827      	ldr	r0, [pc, #156]	; (8005358 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80052ba:	f7ff f869 	bl	8004390 <_PreparePacket>
 80052be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	e00b      	b.n	80052f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	6279      	str	r1, [r7, #36]	; 0x24
 80052e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	09db      	lsrs	r3, r3, #7
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b7f      	cmp	r3, #127	; 0x7f
 80052f4:	d8f0      	bhi.n	80052d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	627a      	str	r2, [r7, #36]	; 0x24
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e00b      	b.n	8005328 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	61f9      	str	r1, [r7, #28]
 800531a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	09db      	lsrs	r3, r3, #7
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b7f      	cmp	r3, #127	; 0x7f
 800532c:	d8f0      	bhi.n	8005310 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800533e:	2207      	movs	r2, #7
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	6938      	ldr	r0, [r7, #16]
 8005344:	f7ff f912 	bl	800456c <_SendPacket>
  RECORD_END();
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20005bb4 	.word	0x20005bb4
 800535c:	20005b84 	.word	0x20005b84

08005360 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800536a:	4b40      	ldr	r3, [pc, #256]	; (800546c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d077      	beq.n	8005462 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005372:	4b3e      	ldr	r3, [pc, #248]	; (800546c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005378:	2300      	movs	r3, #0
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
 800537c:	e008      	b.n	8005390 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	3301      	adds	r3, #1
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	429a      	cmp	r2, r3
 8005396:	d3f2      	bcc.n	800537e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005398:	e000      	b.n	800539c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800539a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d055      	beq.n	800544e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053a2:	f3ef 8311 	mrs	r3, BASEPRI
 80053a6:	f04f 0120 	mov.w	r1, #32
 80053aa:	f381 8811 	msr	BASEPRI, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	482f      	ldr	r0, [pc, #188]	; (8005470 <SEGGER_SYSVIEW_SendModule+0x110>)
 80053b2:	f7fe ffed 	bl	8004390 <_PreparePacket>
 80053b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	e00b      	b.n	80053de <SEGGER_SYSVIEW_SendModule+0x7e>
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	6279      	str	r1, [r7, #36]	; 0x24
 80053d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b7f      	cmp	r3, #127	; 0x7f
 80053e2:	d8f0      	bhi.n	80053c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	627a      	str	r2, [r7, #36]	; 0x24
 80053ea:	6a3a      	ldr	r2, [r7, #32]
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e00b      	b.n	8005418 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1c59      	adds	r1, r3, #1
 8005408:	61f9      	str	r1, [r7, #28]
 800540a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	09db      	lsrs	r3, r3, #7
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b7f      	cmp	r3, #127	; 0x7f
 800541c:	d8f0      	bhi.n	8005400 <SEGGER_SYSVIEW_SendModule+0xa0>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	61fa      	str	r2, [r7, #28]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	4619      	mov	r1, r3
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fe ff7a 	bl	8004330 <_EncodeStr>
 800543c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800543e:	2216      	movs	r2, #22
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	6938      	ldr	r0, [r7, #16]
 8005444:	f7ff f892 	bl	800456c <_SendPacket>
      RECORD_END();
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d006      	beq.n	8005462 <SEGGER_SYSVIEW_SendModule+0x102>
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4798      	blx	r3
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3730      	adds	r7, #48	; 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20005bac 	.word	0x20005bac
 8005470:	20005bb4 	.word	0x20005bb4

08005474 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00f      	beq.n	80054a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f2      	bne.n	8005488 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20005bac 	.word	0x20005bac

080054b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80054b6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ba:	f04f 0120 	mov.w	r1, #32
 80054be:	f381 8811 	msr	BASEPRI, r1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	4817      	ldr	r0, [pc, #92]	; (8005524 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80054c6:	f7fe ff63 	bl	8004390 <_PreparePacket>
 80054ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	6179      	str	r1, [r7, #20]
 80054e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b7f      	cmp	r3, #127	; 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800550a:	221b      	movs	r2, #27
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff f82c 	bl	800456c <_SendPacket>
  RECORD_END();
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f383 8811 	msr	BASEPRI, r3
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20005bb4 	.word	0x20005bb4
 8005528:	20005bb0 	.word	0x20005bb0

0800552c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005534:	f3ef 8311 	mrs	r3, BASEPRI
 8005538:	f04f 0120 	mov.w	r1, #32
 800553c:	f381 8811 	msr	BASEPRI, r1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	4827      	ldr	r0, [pc, #156]	; (80055e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005544:	f7fe ff24 	bl	8004390 <_PreparePacket>
 8005548:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f7fe feee 	bl	8004330 <_EncodeStr>
 8005554:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	2301      	movs	r3, #1
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	e00b      	b.n	8005578 <SEGGER_SYSVIEW_Warn+0x4c>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	6279      	str	r1, [r7, #36]	; 0x24
 800556a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2b7f      	cmp	r3, #127	; 0x7f
 800557c:	d8f0      	bhi.n	8005560 <SEGGER_SYSVIEW_Warn+0x34>
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	627a      	str	r2, [r7, #36]	; 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e00b      	b.n	80055b0 <SEGGER_SYSVIEW_Warn+0x84>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	61f9      	str	r1, [r7, #28]
 80055a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b7f      	cmp	r3, #127	; 0x7f
 80055b4:	d8f0      	bhi.n	8005598 <SEGGER_SYSVIEW_Warn+0x6c>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055c6:	221a      	movs	r2, #26
 80055c8:	68f9      	ldr	r1, [r7, #12]
 80055ca:	6938      	ldr	r0, [r7, #16]
 80055cc:	f7fe ffce 	bl	800456c <_SendPacket>
  RECORD_END();
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f383 8811 	msr	BASEPRI, r3
}
 80055d6:	bf00      	nop
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20005bb4 	.word	0x20005bb4

080055e4 <__libc_init_array>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4d0d      	ldr	r5, [pc, #52]	; (800561c <__libc_init_array+0x38>)
 80055e8:	4c0d      	ldr	r4, [pc, #52]	; (8005620 <__libc_init_array+0x3c>)
 80055ea:	1b64      	subs	r4, r4, r5
 80055ec:	10a4      	asrs	r4, r4, #2
 80055ee:	2600      	movs	r6, #0
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	d109      	bne.n	8005608 <__libc_init_array+0x24>
 80055f4:	4d0b      	ldr	r5, [pc, #44]	; (8005624 <__libc_init_array+0x40>)
 80055f6:	4c0c      	ldr	r4, [pc, #48]	; (8005628 <__libc_init_array+0x44>)
 80055f8:	f000 f83e 	bl	8005678 <_init>
 80055fc:	1b64      	subs	r4, r4, r5
 80055fe:	10a4      	asrs	r4, r4, #2
 8005600:	2600      	movs	r6, #0
 8005602:	42a6      	cmp	r6, r4
 8005604:	d105      	bne.n	8005612 <__libc_init_array+0x2e>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f855 3b04 	ldr.w	r3, [r5], #4
 800560c:	4798      	blx	r3
 800560e:	3601      	adds	r6, #1
 8005610:	e7ee      	b.n	80055f0 <__libc_init_array+0xc>
 8005612:	f855 3b04 	ldr.w	r3, [r5], #4
 8005616:	4798      	blx	r3
 8005618:	3601      	adds	r6, #1
 800561a:	e7f2      	b.n	8005602 <__libc_init_array+0x1e>
 800561c:	080057e4 	.word	0x080057e4
 8005620:	080057e4 	.word	0x080057e4
 8005624:	080057e4 	.word	0x080057e4
 8005628:	080057e8 	.word	0x080057e8

0800562c <memcmp>:
 800562c:	b510      	push	{r4, lr}
 800562e:	3901      	subs	r1, #1
 8005630:	4402      	add	r2, r0
 8005632:	4290      	cmp	r0, r2
 8005634:	d101      	bne.n	800563a <memcmp+0xe>
 8005636:	2000      	movs	r0, #0
 8005638:	e005      	b.n	8005646 <memcmp+0x1a>
 800563a:	7803      	ldrb	r3, [r0, #0]
 800563c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005640:	42a3      	cmp	r3, r4
 8005642:	d001      	beq.n	8005648 <memcmp+0x1c>
 8005644:	1b18      	subs	r0, r3, r4
 8005646:	bd10      	pop	{r4, pc}
 8005648:	3001      	adds	r0, #1
 800564a:	e7f2      	b.n	8005632 <memcmp+0x6>

0800564c <memcpy>:
 800564c:	440a      	add	r2, r1
 800564e:	4291      	cmp	r1, r2
 8005650:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005654:	d100      	bne.n	8005658 <memcpy+0xc>
 8005656:	4770      	bx	lr
 8005658:	b510      	push	{r4, lr}
 800565a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800565e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005662:	4291      	cmp	r1, r2
 8005664:	d1f9      	bne.n	800565a <memcpy+0xe>
 8005666:	bd10      	pop	{r4, pc}

08005668 <memset>:
 8005668:	4402      	add	r2, r0
 800566a:	4603      	mov	r3, r0
 800566c:	4293      	cmp	r3, r2
 800566e:	d100      	bne.n	8005672 <memset+0xa>
 8005670:	4770      	bx	lr
 8005672:	f803 1b01 	strb.w	r1, [r3], #1
 8005676:	e7f9      	b.n	800566c <memset+0x4>

08005678 <_init>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr

08005684 <_fini>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr
