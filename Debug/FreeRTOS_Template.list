
FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c78  20000014  08005784  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c8c  08005784  00026c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161e7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d84  00000000  00000000  0003622b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ffa  00000000  00000000  0003b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016475  00000000  00000000  0005c582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0275  00000000  00000000  000729f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005200  00000000  00000000  00142cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005538 	.word	0x08005538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005538 	.word	0x08005538

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20003ea4 	.word	0x20003ea4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fa52 	bl	8000a54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f808 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f89a 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f86e 	bl	8000698 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	my_main();
 80005bc:	f004 fe78 	bl	80052b0 <my_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80005c0:	e7fe      	b.n	80005c0 <main+0x18>
	...

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	; 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 ffa8 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff25 	bl	800149c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 f8ae 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2103      	movs	r1, #3
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fcbd 	bl	8000ff8 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000684:	f000 f898 	bl	80007b8 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fc16 	bl	8001f00 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f86d 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000030 	.word	0x20000030
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0x98>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0x98>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0x98>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0x98>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0x98>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0x98>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_GPIO_Init+0x98>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <MX_GPIO_Init+0x98>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_GPIO_Init+0x98>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LDG_Pin|LDO_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2103      	movs	r1, #3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0x9c>)
 800075c:	f000 fc32 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LDG_Pin LDO_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDO_Pin;
 8000760:	2303      	movs	r3, #3
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0x9c>)
 8000778:	f000 fa90 	bl	8000c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
traceISR_ENTER();
 8000794:	f004 fa82 	bl	8004c9c <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 80007a2:	f000 f979 	bl	8000a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
traceISR_EXIT();
 80007a6:	f004 fabb 	bl	8004d20 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40014000 	.word	0x40014000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12b      	bne.n	800088e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_UART_MspInit+0x88>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_UART_MspInit+0x88>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086e:	230c      	movs	r3, #12
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087e:	2307      	movs	r3, #7
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_UART_MspInit+0x8c>)
 800088a:	f000 fa07 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	; 0x38
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_InitTick+0xe4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a32      	ldr	r2, [pc, #200]	; (8000988 <HAL_InitTick+0xe4>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <HAL_InitTick+0xe4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fdac 	bl	8001438 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ea:	f000 fd7d 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 80008ee:	6378      	str	r0, [r7, #52]	; 0x34
 80008f0:	e004      	b.n	80008fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008f2:	f000 fd79 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 80008f6:	4603      	mov	r3, r0
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <HAL_InitTick+0xe8>)
 8000900:	fba2 2303 	umull	r2, r3, r2, r3
 8000904:	0c9b      	lsrs	r3, r3, #18
 8000906:	3b01      	subs	r3, #1
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_InitTick+0xec>)
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <HAL_InitTick+0xf0>)
 800090e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xec>)
 8000912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000916:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_InitTick+0xec>)
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_InitTick+0xec>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_InitTick+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <HAL_InitTick+0xec>)
 8000932:	f001 f837 	bl	80019a4 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800093c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11b      	bne.n	800097c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <HAL_InitTick+0xec>)
 8000946:	f001 f887 	bl	8001a58 <HAL_TIM_Base_Start_IT>
 800094a:	4603      	mov	r3, r0
 800094c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000954:	2b00      	cmp	r3, #0
 8000956:	d111      	bne.n	800097c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000958:	202d      	movs	r0, #45	; 0x2d
 800095a:	f000 f991 	bl	8000c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d808      	bhi.n	8000976 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	202d      	movs	r0, #45	; 0x2d
 800096a:	f000 f96d 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_InitTick+0xf4>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e002      	b.n	800097c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800097c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000980:	4618      	mov	r0, r3
 8000982:	3738      	adds	r7, #56	; 0x38
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	431bde83 	.word	0x431bde83
 8000990:	20000074 	.word	0x20000074
 8000994:	40002000 	.word	0x40002000
 8000998:	20000004 	.word	0x20000004

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80009ce:	f001 f8b3 	bl	8001b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000074 	.word	0x20000074

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2a:	f7ff ffd7 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f004 fd39 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fdb9 	bl	80005a8 <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a38:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a44:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8000a48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a4c:	20006c8c 	.word	0x20006c8c

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <HAL_Init+0x40>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_Init+0x40>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x40>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f8d8 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f7ff ff0e 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe9c 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000bc 	.word	0x200000bc

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000bc 	.word	0x200000bc

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff4c 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff61 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb1 	bl	8000bcc <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff80 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff54 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e165      	b.n	8000f84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8154 	bne.w	8000f7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80ae 	beq.w	8000f7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a5c      	ldr	r2, [pc, #368]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a58      	ldr	r2, [pc, #352]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x308>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x310>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x314>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x318>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x20a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x31c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x206>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e00c      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e00a      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e008      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	f002 0203 	and.w	r2, r2, #3
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec8:	4935      	ldr	r1, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efa:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3301      	adds	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	f67f ae96 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40021400 	.word	0x40021400
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40013c00 	.word	0x40013c00

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0cc      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d90c      	bls.n	8001034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d001      	beq.n	8001034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0b8      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d020      	beq.n	8001082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800104c:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001064:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800106e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	494d      	ldr	r1, [pc, #308]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	4313      	orrs	r3, r2
 8001080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d044      	beq.n	8001118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d107      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d119      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e07f      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d003      	beq.n	80010b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d107      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d109      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e06f      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e067      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f023 0203 	bic.w	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e8:	f7ff fcea 	bl	8000ac0 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ee:	e00a      	b.n	8001106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f0:	f7ff fce6 	bl	8000ac0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fe:	4293      	cmp	r3, r2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e04f      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 020c 	and.w	r2, r3, #12
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	429a      	cmp	r2, r3
 8001116:	d1eb      	bne.n	80010f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d20c      	bcs.n	8001140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e032      	b.n	80011a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4916      	ldr	r1, [pc, #88]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	2b00      	cmp	r3, #0
 8001168:	d009      	beq.n	800117e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	490e      	ldr	r1, [pc, #56]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800117e:	f000 f821 	bl	80011c4 <HAL_RCC_GetSysClockFreq>
 8001182:	4602      	mov	r2, r0
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	490a      	ldr	r1, [pc, #40]	; (80011b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	5ccb      	ldrb	r3, [r1, r3]
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_RCC_ClockConfig+0x1c8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fb80 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00
 80011b4:	40023800 	.word	0x40023800
 80011b8:	08005720 	.word	0x08005720
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c8:	b094      	sub	sp, #80	; 0x50
 80011ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
 80011d0:	2300      	movs	r3, #0
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011dc:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d00d      	beq.n	8001204 <HAL_RCC_GetSysClockFreq+0x40>
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	f200 80e1 	bhi.w	80013b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x34>
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x3a>
 80011f6:	e0db      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011f8:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80011fc:	e0db      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011fe:	4b73      	ldr	r3, [pc, #460]	; (80013cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001202:	e0d8      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121a:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	2200      	movs	r2, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
 8001224:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
 8001232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001236:	4622      	mov	r2, r4
 8001238:	462b      	mov	r3, r5
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	f04f 0100 	mov.w	r1, #0
 8001242:	0159      	lsls	r1, r3, #5
 8001244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001248:	0150      	lsls	r0, r2, #5
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4621      	mov	r1, r4
 8001250:	1a51      	subs	r1, r2, r1
 8001252:	6139      	str	r1, [r7, #16]
 8001254:	4629      	mov	r1, r5
 8001256:	eb63 0301 	sbc.w	r3, r3, r1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001268:	4659      	mov	r1, fp
 800126a:	018b      	lsls	r3, r1, #6
 800126c:	4651      	mov	r1, sl
 800126e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001272:	4651      	mov	r1, sl
 8001274:	018a      	lsls	r2, r1, #6
 8001276:	4651      	mov	r1, sl
 8001278:	ebb2 0801 	subs.w	r8, r2, r1
 800127c:	4659      	mov	r1, fp
 800127e:	eb63 0901 	sbc.w	r9, r3, r1
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800128e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	4623      	mov	r3, r4
 800129c:	eb18 0303 	adds.w	r3, r8, r3
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	462b      	mov	r3, r5
 80012a4:	eb49 0303 	adc.w	r3, r9, r3
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80012b6:	4629      	mov	r1, r5
 80012b8:	024b      	lsls	r3, r1, #9
 80012ba:	4621      	mov	r1, r4
 80012bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012c0:	4621      	mov	r1, r4
 80012c2:	024a      	lsls	r2, r1, #9
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ca:	2200      	movs	r2, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012d4:	f7fe ffe6 	bl	80002a4 <__aeabi_uldivmod>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4613      	mov	r3, r2
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e0:	e058      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	099b      	lsrs	r3, r3, #6
 80012e8:	2200      	movs	r2, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	4611      	mov	r1, r2
 80012ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012fc:	4642      	mov	r2, r8
 80012fe:	464b      	mov	r3, r9
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	0159      	lsls	r1, r3, #5
 800130a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800130e:	0150      	lsls	r0, r2, #5
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4641      	mov	r1, r8
 8001316:	ebb2 0a01 	subs.w	sl, r2, r1
 800131a:	4649      	mov	r1, r9
 800131c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800132c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001334:	ebb2 040a 	subs.w	r4, r2, sl
 8001338:	eb63 050b 	sbc.w	r5, r3, fp
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	00eb      	lsls	r3, r5, #3
 8001346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800134a:	00e2      	lsls	r2, r4, #3
 800134c:	4614      	mov	r4, r2
 800134e:	461d      	mov	r5, r3
 8001350:	4643      	mov	r3, r8
 8001352:	18e3      	adds	r3, r4, r3
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	464b      	mov	r3, r9
 8001358:	eb45 0303 	adc.w	r3, r5, r3
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800136a:	4629      	mov	r1, r5
 800136c:	028b      	lsls	r3, r1, #10
 800136e:	4621      	mov	r1, r4
 8001370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001374:	4621      	mov	r1, r4
 8001376:	028a      	lsls	r2, r1, #10
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800137e:	2200      	movs	r2, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	61fa      	str	r2, [r7, #28]
 8001384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001388:	f7fe ff8c 	bl	80002a4 <__aeabi_uldivmod>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4613      	mov	r3, r2
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	3301      	adds	r3, #1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80013a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80013ae:	e002      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80013b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3750      	adds	r7, #80	; 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	00f42400 	.word	0x00f42400
 80013cc:	007a1200 	.word	0x007a1200

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	; (800140c <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	08005730 	.word	0x08005730

08001410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001414:	f7ff ffdc 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	0b5b      	lsrs	r3, r3, #13
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	; (8001434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	08005730 	.word	0x08005730

08001438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	220f      	movs	r2, #15
 8001446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_RCC_GetClockConfig+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0207 	and.w	r2, r3, #7
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e273      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d075      	beq.n	80015a6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4b85      	ldr	r3, [pc, #532]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d112      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014de:	d10b      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	4b7e      	ldr	r3, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d05b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x108>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d157      	bne.n	80015a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e24e      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x74>
 8001502:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a75      	ldr	r2, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e01d      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6f      	ldr	r2, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6c      	ldr	r2, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a65      	ldr	r2, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fab4 	bl	8000ac0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fab0 	bl	8000ac0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e213      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xc0>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff faa0 	bl	8000ac0 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fa9c 	bl	8000ac0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1ff      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0xe8>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d063      	beq.n	800167a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1d3      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4937      	ldr	r1, [pc, #220]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e03a      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x244>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fa55 	bl	8000ac0 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fa51 	bl	8000ac0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1b4      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4925      	ldr	r1, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_OscConfig+0x244>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fa34 	bl	8000ac0 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165c:	f7ff fa30 	bl	8000ac0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e193      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d036      	beq.n	80016f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_RCC_OscConfig+0x248>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fa14 	bl	8000ac0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fa10 	bl	8000ac0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e173      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x200>
 80016ba:	e01b      	b.n	80016f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_OscConfig+0x248>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff f9fd 	bl	8000ac0 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	e00e      	b.n	80016e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff f9f9 	bl	8000ac0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d907      	bls.n	80016e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e15c      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
 80016dc:	40023800 	.word	0x40023800
 80016e0:	42470000 	.word	0x42470000
 80016e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80016ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ea      	bne.n	80016ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8097 	beq.w	8001830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b83      	ldr	r3, [pc, #524]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10f      	bne.n	8001732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a7e      	ldr	r2, [pc, #504]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172e:	2301      	movs	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b79      	ldr	r3, [pc, #484]	; (8001918 <HAL_RCC_OscConfig+0x47c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x47c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a75      	ldr	r2, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x47c>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174a:	f7ff f9b9 	bl	8000ac0 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff f9b5 	bl	8000ac0 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e118      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x47c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x2ea>
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x324>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x30c>
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a60      	ldr	r2, [pc, #384]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
 800179a:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a5d      	ldr	r2, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x324>
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a59      	ldr	r2, [pc, #356]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d015      	beq.n	80017f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f97a 	bl	8000ac0 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff f976 	bl	8000ac0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0d7      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ee      	beq.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff f964 	bl	8000ac0 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff f960 	bl	8000ac0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0c1      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ee      	bne.n	80017fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80ad 	beq.w	8001994 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d060      	beq.n	8001908 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d145      	bne.n	80018da <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x480>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f934 	bl	8000ac0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f930 	bl	8000ac0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e093      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	3b01      	subs	r3, #1
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	071b      	lsls	r3, r3, #28
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x480>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff f905 	bl	8000ac0 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f901 	bl	8000ac0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e064      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x41e>
 80018d8:	e05c      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x480>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f8ee 	bl	8000ac0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f8ea 	bl	8000ac0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04d      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x44c>
 8001906:	e045      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e040      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000
 800191c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d030      	beq.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d129      	bne.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d122      	bne.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	4293      	cmp	r3, r2
 800195a:	d119      	bne.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d10f      	bne.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e041      	b.n	8001a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f839 	bl	8001a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f000 f9d8 	bl	8001d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d001      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e04e      	b.n	8001b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d010      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	e007      	b.n	8001b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40000c00 	.word	0x40000c00
 8001b2c:	40010400 	.word	0x40010400
 8001b30:	40014000 	.word	0x40014000
 8001b34:	40001800 	.word	0x40001800

08001b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d122      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d11b      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0202 	mvn.w	r2, #2
 8001b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8ee 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8e0 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8f1 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d122      	bne.n	8001be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0204 	mvn.w	r2, #4
 8001bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8c4 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001bd4:	e005      	b.n	8001be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8b6 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8c7 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d122      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d11b      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0208 	mvn.w	r2, #8
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2204      	movs	r2, #4
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f89a 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f88c 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f89d 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0210 	mvn.w	r2, #16
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2208      	movs	r2, #8
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f870 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f862 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f873 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0201 	mvn.w	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fd68 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b80      	cmp	r3, #128	; 0x80
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f902 	bl	8001eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f838 	bl	8001d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0220 	mvn.w	r2, #32
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8cc 	bl	8001ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d00f      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3d      	ldr	r2, [pc, #244]	; (8001eb0 <TIM_Base_SetConfig+0x118>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00b      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3c      	ldr	r2, [pc, #240]	; (8001eb4 <TIM_Base_SetConfig+0x11c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <TIM_Base_SetConfig+0x120>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d027      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <TIM_Base_SetConfig+0x118>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d023      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <TIM_Base_SetConfig+0x11c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <TIM_Base_SetConfig+0x120>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d017      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <TIM_Base_SetConfig+0x128>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <TIM_Base_SetConfig+0x12c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <TIM_Base_SetConfig+0x130>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <TIM_Base_SetConfig+0x134>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <TIM_Base_SetConfig+0x138>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <TIM_Base_SetConfig+0x13c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <TIM_Base_SetConfig+0xf8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	615a      	str	r2, [r3, #20]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40010400 	.word	0x40010400
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	40001800 	.word	0x40001800
 8001ed0:	40001c00 	.word	0x40001c00
 8001ed4:	40002000 	.word	0x40002000

08001ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e03f      	b.n	8001f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fc74 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f829 	bl	8001f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b0c0      	sub	sp, #256	; 0x100
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	ea40 0301 	orr.w	r3, r0, r1
 8001fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ff4:	f021 010c 	bic.w	r1, r1, #12
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002002:	430b      	orrs	r3, r1
 8002004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002016:	6999      	ldr	r1, [r3, #24]
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	ea40 0301 	orr.w	r3, r0, r1
 8002022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <UART_SetConfig+0x2cc>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d005      	beq.n	800203c <UART_SetConfig+0xa0>
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b8d      	ldr	r3, [pc, #564]	; (800226c <UART_SetConfig+0x2d0>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d104      	bne.n	8002046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800203c:	f7ff f9e8 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002044:	e003      	b.n	800204e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002046:	f7ff f9cf 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 800204a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002058:	f040 810c 	bne.w	8002274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800205c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002060:	2200      	movs	r2, #0
 8002062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800206a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800206e:	4622      	mov	r2, r4
 8002070:	462b      	mov	r3, r5
 8002072:	1891      	adds	r1, r2, r2
 8002074:	65b9      	str	r1, [r7, #88]	; 0x58
 8002076:	415b      	adcs	r3, r3
 8002078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800207e:	4621      	mov	r1, r4
 8002080:	eb12 0801 	adds.w	r8, r2, r1
 8002084:	4629      	mov	r1, r5
 8002086:	eb43 0901 	adc.w	r9, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb18 0303 	adds.w	r3, r8, r3
 80020a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020ac:	462b      	mov	r3, r5
 80020ae:	eb49 0303 	adc.w	r3, r9, r3
 80020b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020ca:	460b      	mov	r3, r1
 80020cc:	18db      	adds	r3, r3, r3
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
 80020d0:	4613      	mov	r3, r2
 80020d2:	eb42 0303 	adc.w	r3, r2, r3
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
 80020d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020e0:	f7fe f8e0 	bl	80002a4 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4b61      	ldr	r3, [pc, #388]	; (8002270 <UART_SetConfig+0x2d4>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	011c      	lsls	r4, r3, #4
 80020f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	1891      	adds	r1, r2, r2
 800210a:	64b9      	str	r1, [r7, #72]	; 0x48
 800210c:	415b      	adcs	r3, r3
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002114:	4641      	mov	r1, r8
 8002116:	eb12 0a01 	adds.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb43 0b01 	adc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800212c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002134:	4692      	mov	sl, r2
 8002136:	469b      	mov	fp, r3
 8002138:	4643      	mov	r3, r8
 800213a:	eb1a 0303 	adds.w	r3, sl, r3
 800213e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002142:	464b      	mov	r3, r9
 8002144:	eb4b 0303 	adc.w	r3, fp, r3
 8002148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800215c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002160:	460b      	mov	r3, r1
 8002162:	18db      	adds	r3, r3, r3
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
 8002166:	4613      	mov	r3, r2
 8002168:	eb42 0303 	adc.w	r3, r2, r3
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
 800216e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002176:	f7fe f895 	bl	80002a4 <__aeabi_uldivmod>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4611      	mov	r1, r2
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <UART_SetConfig+0x2d4>)
 8002182:	fba3 2301 	umull	r2, r3, r3, r1
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2264      	movs	r2, #100	; 0x64
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	1acb      	subs	r3, r1, r3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <UART_SetConfig+0x2d4>)
 8002198:	fba3 2302 	umull	r2, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a4:	441c      	add	r4, r3
 80021a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	63b9      	str	r1, [r7, #56]	; 0x38
 80021c0:	415b      	adcs	r3, r3
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021c8:	4641      	mov	r1, r8
 80021ca:	1851      	adds	r1, r2, r1
 80021cc:	6339      	str	r1, [r7, #48]	; 0x30
 80021ce:	4649      	mov	r1, r9
 80021d0:	414b      	adcs	r3, r1
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021e0:	4659      	mov	r1, fp
 80021e2:	00cb      	lsls	r3, r1, #3
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ea:	4651      	mov	r1, sl
 80021ec:	00ca      	lsls	r2, r1, #3
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	4642      	mov	r2, r8
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021fc:	464b      	mov	r3, r9
 80021fe:	460a      	mov	r2, r1
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800221c:	460b      	mov	r3, r1
 800221e:	18db      	adds	r3, r3, r3
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	4613      	mov	r3, r2
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002232:	f7fe f837 	bl	80002a4 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <UART_SetConfig+0x2d4>)
 800223c:	fba3 1302 	umull	r1, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <UART_SetConfig+0x2d4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4422      	add	r2, r4
 8002262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002264:	e105      	b.n	8002472 <UART_SetConfig+0x4d6>
 8002266:	bf00      	nop
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800227e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002286:	4642      	mov	r2, r8
 8002288:	464b      	mov	r3, r9
 800228a:	1891      	adds	r1, r2, r2
 800228c:	6239      	str	r1, [r7, #32]
 800228e:	415b      	adcs	r3, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002296:	4641      	mov	r1, r8
 8002298:	1854      	adds	r4, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb43 0501 	adc.w	r5, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	00eb      	lsls	r3, r5, #3
 80022aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	18e3      	adds	r3, r4, r3
 80022b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022bc:	464b      	mov	r3, r9
 80022be:	eb45 0303 	adc.w	r3, r5, r3
 80022c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022e2:	4629      	mov	r1, r5
 80022e4:	008b      	lsls	r3, r1, #2
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ec:	4621      	mov	r1, r4
 80022ee:	008a      	lsls	r2, r1, #2
 80022f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022f4:	f7fd ffd6 	bl	80002a4 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4b60      	ldr	r3, [pc, #384]	; (8002480 <UART_SetConfig+0x4e4>)
 80022fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	011c      	lsls	r4, r3, #4
 8002306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	1891      	adds	r1, r2, r2
 800231e:	61b9      	str	r1, [r7, #24]
 8002320:	415b      	adcs	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002328:	4641      	mov	r1, r8
 800232a:	1851      	adds	r1, r2, r1
 800232c:	6139      	str	r1, [r7, #16]
 800232e:	4649      	mov	r1, r9
 8002330:	414b      	adcs	r3, r1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002340:	4659      	mov	r1, fp
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234a:	4651      	mov	r1, sl
 800234c:	00ca      	lsls	r2, r1, #3
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	4603      	mov	r3, r0
 8002354:	4642      	mov	r2, r8
 8002356:	189b      	adds	r3, r3, r2
 8002358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800235c:	464b      	mov	r3, r9
 800235e:	460a      	mov	r2, r1
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	67bb      	str	r3, [r7, #120]	; 0x78
 8002372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002380:	4649      	mov	r1, r9
 8002382:	008b      	lsls	r3, r1, #2
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800238a:	4641      	mov	r1, r8
 800238c:	008a      	lsls	r2, r1, #2
 800238e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002392:	f7fd ff87 	bl	80002a4 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4b39      	ldr	r3, [pc, #228]	; (8002480 <UART_SetConfig+0x4e4>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2164      	movs	r1, #100	; 0x64
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	4a34      	ldr	r2, [pc, #208]	; (8002480 <UART_SetConfig+0x4e4>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	441c      	add	r4, r3
 80023bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c0:	2200      	movs	r2, #0
 80023c2:	673b      	str	r3, [r7, #112]	; 0x70
 80023c4:	677a      	str	r2, [r7, #116]	; 0x74
 80023c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023ca:	4642      	mov	r2, r8
 80023cc:	464b      	mov	r3, r9
 80023ce:	1891      	adds	r1, r2, r2
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	415b      	adcs	r3, r3
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023da:	4641      	mov	r1, r8
 80023dc:	1851      	adds	r1, r2, r1
 80023de:	6039      	str	r1, [r7, #0]
 80023e0:	4649      	mov	r1, r9
 80023e2:	414b      	adcs	r3, r1
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023f2:	4659      	mov	r1, fp
 80023f4:	00cb      	lsls	r3, r1, #3
 80023f6:	4651      	mov	r1, sl
 80023f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fc:	4651      	mov	r1, sl
 80023fe:	00ca      	lsls	r2, r1, #3
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	4603      	mov	r3, r0
 8002406:	4642      	mov	r2, r8
 8002408:	189b      	adds	r3, r3, r2
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
 800240c:	464b      	mov	r3, r9
 800240e:	460a      	mov	r2, r1
 8002410:	eb42 0303 	adc.w	r3, r2, r3
 8002414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	663b      	str	r3, [r7, #96]	; 0x60
 8002420:	667a      	str	r2, [r7, #100]	; 0x64
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800242e:	4649      	mov	r1, r9
 8002430:	008b      	lsls	r3, r1, #2
 8002432:	4641      	mov	r1, r8
 8002434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002438:	4641      	mov	r1, r8
 800243a:	008a      	lsls	r2, r1, #2
 800243c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002440:	f7fd ff30 	bl	80002a4 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <UART_SetConfig+0x4e4>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2164      	movs	r1, #100	; 0x64
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	3332      	adds	r3, #50	; 0x32
 800245c:	4a08      	ldr	r2, [pc, #32]	; (8002480 <UART_SetConfig+0x4e4>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	f003 020f 	and.w	r2, r3, #15
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4422      	add	r2, r4
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	bf00      	nop
 8002474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	51eb851f 	.word	0x51eb851f

08002484 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0208 	add.w	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0208 	add.w	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0208 	add.w	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6852      	ldr	r2, [r2, #4]
 8002546:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d103      	bne.n	800255a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800257a:	b580      	push	{r7, lr}
 800257c:	b08c      	sub	sp, #48	; 0x30
 800257e:	af04      	add	r7, sp, #16
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f000 ff84 	bl	800349c <pvPortMalloc>
 8002594:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800259c:	2054      	movs	r0, #84	; 0x54
 800259e:	f000 ff7d 	bl	800349c <pvPortMalloc>
 80025a2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e005      	b.n	80025be <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f001 f852 	bl	800365c <vPortFree>
 80025b8:	e001      	b.n	80025be <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9303      	str	r3, [sp, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f80e 	bl	80025fc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025e0:	69f8      	ldr	r0, [r7, #28]
 80025e2:	f000 f899 	bl	8002718 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e002      	b.n	80025f2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025f2:	69bb      	ldr	r3, [r7, #24]
    }
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002614:	3b01      	subs	r3, #1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f023 0307 	bic.w	r3, r3, #7
 8002622:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01f      	beq.n	800268a <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e012      	b.n	8002676 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	7819      	ldrb	r1, [r3, #0]
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	3334      	adds	r3, #52	; 0x34
 8002660:	460a      	mov	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d9e9      	bls.n	8002650 <prvInitialiseNewTask+0x54>
 800267c:	e000      	b.n	8002680 <prvInitialiseNewTask+0x84>
            {
                break;
 800267e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002688:	e003      	b.n	8002692 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	2b06      	cmp	r3, #6
 8002696:	d901      	bls.n	800269c <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002698:	2306      	movs	r3, #6
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	2200      	movs	r2, #0
 80026ac:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3304      	adds	r3, #4
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff06 	bl	80024c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3318      	adds	r3, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff01 	bl	80024c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	f1c3 0207 	rsb	r2, r3, #7
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	334c      	adds	r3, #76	; 0x4c
 80026dc:	2204      	movs	r2, #4
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 ff21 	bl	8005528 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	3350      	adds	r3, #80	; 0x50
 80026ea:	2201      	movs	r2, #1
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 ff1a 	bl	8005528 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	69b8      	ldr	r0, [r7, #24]
 80026fa:	f000 fc2d 	bl	8002f58 <pxPortInitialiseStack>
 80026fe:	4602      	mov	r2, r0
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002720:	f000 fd90 	bl	8003244 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <prvAddNewTaskToReadyList+0xf4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a38      	ldr	r2, [pc, #224]	; (800280c <prvAddNewTaskToReadyList+0xf4>)
 800272c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <prvAddNewTaskToReadyList+0xf8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002736:	4a36      	ldr	r2, [pc, #216]	; (8002810 <prvAddNewTaskToReadyList+0xf8>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800273c:	4b33      	ldr	r3, [pc, #204]	; (800280c <prvAddNewTaskToReadyList+0xf4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d110      	bne.n	8002766 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002744:	f000 fb74 	bl	8002e30 <prvInitialiseTaskLists>
 8002748:	e00d      	b.n	8002766 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800274a:	4b32      	ldr	r3, [pc, #200]	; (8002814 <prvAddNewTaskToReadyList+0xfc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <prvAddNewTaskToReadyList+0xf8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	429a      	cmp	r2, r3
 800275e:	d802      	bhi.n	8002766 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002760:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <prvAddNewTaskToReadyList+0xf8>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <prvAddNewTaskToReadyList+0x100>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <prvAddNewTaskToReadyList+0x100>)
 800276e:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <prvAddNewTaskToReadyList+0x8c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fb25 	bl	8004dc8 <SEGGER_SYSVIEW_OnTaskCreate>
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	461d      	mov	r5, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461c      	mov	r4, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	1ae3      	subs	r3, r4, r3
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	462b      	mov	r3, r5
 80027a0:	f001 f92a 	bl	80039f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fb92 	bl	8004ed0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <prvAddNewTaskToReadyList+0x104>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <prvAddNewTaskToReadyList+0x104>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4a15      	ldr	r2, [pc, #84]	; (8002820 <prvAddNewTaskToReadyList+0x108>)
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f7ff fe82 	bl	80024de <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027da:	f000 fd63 	bl	80032a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <prvAddNewTaskToReadyList+0xfc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00e      	beq.n	8002804 <prvAddNewTaskToReadyList+0xec>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <prvAddNewTaskToReadyList+0xf8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <prvAddNewTaskToReadyList+0xec>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <prvAddNewTaskToReadyList+0x10c>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	200001ac 	.word	0x200001ac
 8002810:	200000c0 	.word	0x200000c0
 8002814:	200001b8 	.word	0x200001b8
 8002818:	200001c8 	.word	0x200001c8
 800281c:	200001b4 	.word	0x200001b4
 8002820:	200000c4 	.word	0x200000c4
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002830:	f000 fd08 	bl	8003244 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <vTaskDelete+0x18>
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <vTaskDelete+0x12c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e000      	b.n	8002842 <vTaskDelete+0x1a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3304      	adds	r3, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe6c 	bl	8002526 <uxListRemove>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d115      	bne.n	8002880 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	493f      	ldr	r1, [pc, #252]	; (8002958 <vTaskDelete+0x130>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <vTaskDelete+0x58>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	2201      	movs	r2, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <vTaskDelete+0x134>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4013      	ands	r3, r2
 800287c:	4a37      	ldr	r2, [pc, #220]	; (800295c <vTaskDelete+0x134>)
 800287e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3318      	adds	r3, #24
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fe4a 	bl	8002526 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <vTaskDelete+0x138>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a31      	ldr	r2, [pc, #196]	; (8002960 <vTaskDelete+0x138>)
 800289a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <vTaskDelete+0x12c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d118      	bne.n	80028d8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	482d      	ldr	r0, [pc, #180]	; (8002964 <vTaskDelete+0x13c>)
 80028ae:	f7ff fe16 	bl	80024de <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <vTaskDelete+0x140>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <vTaskDelete+0x140>)
 80028ba:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fb48 	bl	8004f54 <SEGGER_SYSVIEW_ShrinkId>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4619      	mov	r1, r3
 80028c8:	2022      	movs	r0, #34	; 0x22
 80028ca:	f001 fe89 	bl	80045e0 <SEGGER_SYSVIEW_RecordU32>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f8f9 	bl	8003ac8 <SYSVIEW_DeleteTask>
 80028d6:	e016      	b.n	8002906 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <vTaskDelete+0x144>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <vTaskDelete+0x144>)
 80028e0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fb35 	bl	8004f54 <SEGGER_SYSVIEW_ShrinkId>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	2022      	movs	r0, #34	; 0x22
 80028f0:	f001 fe76 	bl	80045e0 <SEGGER_SYSVIEW_RecordU32>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f8e6 	bl	8003ac8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 faff 	bl	8002f00 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002902:	f000 fb0d 	bl	8002f20 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002906:	f000 fccd 	bl	80032a4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <vTaskDelete+0x148>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01b      	beq.n	800294a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <vTaskDelete+0x12c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d116      	bne.n	800294a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <vTaskDelete+0x14c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <vTaskDelete+0x112>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60bb      	str	r3, [r7, #8]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <vTaskDelete+0x150>)
 800293c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200000c0 	.word	0x200000c0
 8002958:	200000c4 	.word	0x200000c4
 800295c:	200001b4 	.word	0x200001b4
 8002960:	200001c8 	.word	0x200001c8
 8002964:	20000194 	.word	0x20000194
 8002968:	200001a8 	.word	0x200001a8
 800296c:	200001ac 	.word	0x200001ac
 8002970:	200001b8 	.word	0x200001b8
 8002974:	200001d4 	.word	0x200001d4
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <vTaskStartScheduler+0x98>)
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2300      	movs	r3, #0
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <vTaskStartScheduler+0x9c>)
 8002990:	4822      	ldr	r0, [pc, #136]	; (8002a1c <vTaskStartScheduler+0xa0>)
 8002992:	f7ff fdf2 	bl	800257a <xTaskCreate>
 8002996:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d124      	bne.n	80029e8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	60bb      	str	r3, [r7, #8]
    }
 80029b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <vTaskStartScheduler+0xa4>)
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <vTaskStartScheduler+0xa8>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <vTaskStartScheduler+0xac>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <vTaskStartScheduler+0xb0>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <vTaskStartScheduler+0x98>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d102      	bne.n	80029d8 <vTaskStartScheduler+0x5c>
 80029d2:	f002 f9dd 	bl	8004d90 <SEGGER_SYSVIEW_OnIdle>
 80029d6:	e004      	b.n	80029e2 <vTaskStartScheduler+0x66>
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <vTaskStartScheduler+0xb0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fa35 	bl	8004e4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029e2:	f000 fb8d 	bl	8003100 <xPortStartScheduler>
 80029e6:	e00e      	b.n	8002a06 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ee:	d10a      	bne.n	8002a06 <vTaskStartScheduler+0x8a>
        __asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	607b      	str	r3, [r7, #4]
    }
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <vTaskStartScheduler+0xb4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200001d0 	.word	0x200001d0
 8002a18:	08005550 	.word	0x08005550
 8002a1c:	08002e01 	.word	0x08002e01
 8002a20:	200001cc 	.word	0x200001cc
 8002a24:	200001b8 	.word	0x200001b8
 8002a28:	200001b0 	.word	0x200001b0
 8002a2c:	200000c0 	.word	0x200000c0
 8002a30:	2000000c 	.word	0x2000000c

08002a34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <vTaskSuspendAll+0x18>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <vTaskSuspendAll+0x18>)
 8002a40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	200001d4 	.word	0x200001d4

08002a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a5e:	4b43      	ldr	r3, [pc, #268]	; (8002b6c <xTaskResumeAll+0x11c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <xTaskResumeAll+0x2c>
        __asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	603b      	str	r3, [r7, #0]
    }
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a7c:	f000 fbe2 	bl	8003244 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a80:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <xTaskResumeAll+0x11c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4a39      	ldr	r2, [pc, #228]	; (8002b6c <xTaskResumeAll+0x11c>)
 8002a88:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <xTaskResumeAll+0x11c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d165      	bne.n	8002b5e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <xTaskResumeAll+0x120>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d061      	beq.n	8002b5e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a9a:	e032      	b.n	8002b02 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <xTaskResumeAll+0x124>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fd3c 	bl	8002526 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fd37 	bl	8002526 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 fa08 	bl	8004ed0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <xTaskResumeAll+0x128>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <xTaskResumeAll+0x128>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <xTaskResumeAll+0x12c>)
 8002ae0:	441a      	add	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7ff fcf8 	bl	80024de <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <xTaskResumeAll+0x130>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d302      	bcc.n	8002b02 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <xTaskResumeAll+0x134>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <xTaskResumeAll+0x124>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1c8      	bne.n	8002a9c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b10:	f000 fa06 	bl	8002f20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <xTaskResumeAll+0x138>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b20:	f000 f848 	bl	8002bb4 <xTaskIncrementTick>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <xTaskResumeAll+0x134>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f1      	bne.n	8002b20 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <xTaskResumeAll+0x138>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <xTaskResumeAll+0x134>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <xTaskResumeAll+0x13c>)
 8002b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b5e:	f000 fba1 	bl	80032a4 <vPortExitCritical>

    return xAlreadyYielded;
 8002b62:	68bb      	ldr	r3, [r7, #8]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200001d4 	.word	0x200001d4
 8002b70:	200001ac 	.word	0x200001ac
 8002b74:	20000180 	.word	0x20000180
 8002b78:	200001b4 	.word	0x200001b4
 8002b7c:	200000c4 	.word	0x200000c4
 8002b80:	200000c0 	.word	0x200000c0
 8002b84:	200001c0 	.word	0x200001c0
 8002b88:	200001bc 	.word	0x200001bc
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b96:	f000 fc41 	bl	800341c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <xTaskGetTickCountFromISR+0x20>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ba4:	683b      	ldr	r3, [r7, #0]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200001b0 	.word	0x200001b0

08002bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <xTaskIncrementTick+0x14c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8092 	bne.w	8002cec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <xTaskIncrementTick+0x150>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <xTaskIncrementTick+0x150>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d120      	bne.n	8002c1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <xTaskIncrementTick+0x154>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <xTaskIncrementTick+0x48>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	603b      	str	r3, [r7, #0]
    }
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <xTaskIncrementTick+0x46>
 8002bfc:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <xTaskIncrementTick+0x154>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <xTaskIncrementTick+0x158>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <xTaskIncrementTick+0x154>)
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <xTaskIncrementTick+0x158>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <xTaskIncrementTick+0x15c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	4a3e      	ldr	r2, [pc, #248]	; (8002d10 <xTaskIncrementTick+0x15c>)
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	f000 f981 	bl	8002f20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <xTaskIncrementTick+0x160>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d34c      	bcc.n	8002cc2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <xTaskIncrementTick+0x154>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <xTaskIncrementTick+0x160>)
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c38:	601a      	str	r2, [r3, #0]
                    break;
 8002c3a:	e042      	b.n	8002cc2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <xTaskIncrementTick+0x154>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d203      	bcs.n	8002c5c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <xTaskIncrementTick+0x160>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c5a:	e032      	b.n	8002cc2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc60 	bl	8002526 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3318      	adds	r3, #24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fc57 	bl	8002526 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 f928 	bl	8004ed0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <xTaskIncrementTick+0x164>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <xTaskIncrementTick+0x164>)
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <xTaskIncrementTick+0x168>)
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7ff fc18 	bl	80024de <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <xTaskIncrementTick+0x16c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3b5      	bcc.n	8002c28 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cc0:	e7b2      	b.n	8002c28 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <xTaskIncrementTick+0x16c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4914      	ldr	r1, [pc, #80]	; (8002d1c <xTaskIncrementTick+0x168>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d901      	bls.n	8002cde <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <xTaskIncrementTick+0x170>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e004      	b.n	8002cf6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <xTaskIncrementTick+0x174>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <xTaskIncrementTick+0x174>)
 8002cf4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cf6:	697b      	ldr	r3, [r7, #20]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200001d4 	.word	0x200001d4
 8002d04:	200001b0 	.word	0x200001b0
 8002d08:	20000178 	.word	0x20000178
 8002d0c:	2000017c 	.word	0x2000017c
 8002d10:	200001c4 	.word	0x200001c4
 8002d14:	200001cc 	.word	0x200001cc
 8002d18:	200001b4 	.word	0x200001b4
 8002d1c:	200000c4 	.word	0x200000c4
 8002d20:	200000c0 	.word	0x200000c0
 8002d24:	200001c0 	.word	0x200001c0
 8002d28:	200001bc 	.word	0x200001bc

08002d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <vTaskSwitchContext+0xbc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <vTaskSwitchContext+0xc0>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d40:	e04d      	b.n	8002dde <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <vTaskSwitchContext+0xc0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <vTaskSwitchContext+0xc4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d56:	7afb      	ldrb	r3, [r7, #11]
 8002d58:	f1c3 031f 	rsb	r3, r3, #31
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	4925      	ldr	r1, [pc, #148]	; (8002df4 <vTaskSwitchContext+0xc8>)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	607b      	str	r3, [r7, #4]
    }
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <vTaskSwitchContext+0x5a>
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <vTaskSwitchContext+0xc8>)
 8002d94:	4413      	add	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3308      	adds	r3, #8
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d104      	bne.n	8002db8 <vTaskSwitchContext+0x8c>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <vTaskSwitchContext+0xcc>)
 8002dc0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <vTaskSwitchContext+0xcc>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <vTaskSwitchContext+0xd0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d102      	bne.n	8002dd4 <vTaskSwitchContext+0xa8>
 8002dce:	f001 ffdf 	bl	8004d90 <SEGGER_SYSVIEW_OnIdle>
}
 8002dd2:	e004      	b.n	8002dde <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <vTaskSwitchContext+0xcc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 f837 	bl	8004e4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200001d4 	.word	0x200001d4
 8002dec:	200001c0 	.word	0x200001c0
 8002df0:	200001b4 	.word	0x200001b4
 8002df4:	200000c4 	.word	0x200000c4
 8002df8:	200000c0 	.word	0x200000c0
 8002dfc:	200001d0 	.word	0x200001d0

08002e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e08:	f000 f84c 	bl	8002ea4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <prvIdleTask+0x28>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d9f9      	bls.n	8002e08 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <prvIdleTask+0x2c>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e24:	e7f0      	b.n	8002e08 <prvIdleTask+0x8>
 8002e26:	bf00      	nop
 8002e28:	200000c4 	.word	0x200000c4
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	e00c      	b.n	8002e56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <prvInitialiseTaskLists+0x58>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb1a 	bl	8002484 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d9ef      	bls.n	8002e3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e5c:	480b      	ldr	r0, [pc, #44]	; (8002e8c <prvInitialiseTaskLists+0x5c>)
 8002e5e:	f7ff fb11 	bl	8002484 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e62:	480b      	ldr	r0, [pc, #44]	; (8002e90 <prvInitialiseTaskLists+0x60>)
 8002e64:	f7ff fb0e 	bl	8002484 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e68:	480a      	ldr	r0, [pc, #40]	; (8002e94 <prvInitialiseTaskLists+0x64>)
 8002e6a:	f7ff fb0b 	bl	8002484 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e6e:	480a      	ldr	r0, [pc, #40]	; (8002e98 <prvInitialiseTaskLists+0x68>)
 8002e70:	f7ff fb08 	bl	8002484 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <prvInitialiseTaskLists+0x6c>)
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <prvInitialiseTaskLists+0x5c>)
 8002e78:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <prvInitialiseTaskLists+0x70>)
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <prvInitialiseTaskLists+0x60>)
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200000c4 	.word	0x200000c4
 8002e8c:	20000150 	.word	0x20000150
 8002e90:	20000164 	.word	0x20000164
 8002e94:	20000180 	.word	0x20000180
 8002e98:	20000194 	.word	0x20000194
 8002e9c:	20000178 	.word	0x20000178
 8002ea0:	2000017c 	.word	0x2000017c

08002ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eaa:	e019      	b.n	8002ee0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002eac:	f000 f9ca 	bl	8003244 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <prvCheckTasksWaitingTermination+0x50>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fb32 	bl	8002526 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002eca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ed4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ed6:	f000 f9e5 	bl	80032a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f810 	bl	8002f00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e1      	bne.n	8002eac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000194 	.word	0x20000194
 8002ef8:	200001ac 	.word	0x200001ac
 8002efc:	200001a8 	.word	0x200001a8

08002f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fba5 	bl	800365c <vPortFree>
                vPortFree( pxTCB );
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fba2 	bl	800365c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f36:	e005      	b.n	8002f44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000178 	.word	0x20000178
 8002f54:	200001cc 	.word	0x200001cc

08002f58 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3b04      	subs	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3b04      	subs	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b04      	subs	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <pxPortInitialiseStack+0x64>)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3b14      	subs	r3, #20
 8002f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3b04      	subs	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f06f 0202 	mvn.w	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3b20      	subs	r3, #32
 8002fac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	08002fc1 	.word	0x08002fc1

08002fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <prvTaskExitError+0x54>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd2:	d00a      	beq.n	8002fea <prvTaskExitError+0x2a>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	60fb      	str	r3, [r7, #12]
    }
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <prvTaskExitError+0x28>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
    }
 8002ffc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ffe:	bf00      	nop
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0fc      	beq.n	8003000 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000010 	.word	0x20000010
	...

08003020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <pxCurrentTCBConst2>)
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	6808      	ldr	r0, [r1, #0]
 8003026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	f380 8809 	msr	PSP, r0
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f380 8811 	msr	BASEPRI, r0
 800303a:	4770      	bx	lr
 800303c:	f3af 8000 	nop.w

08003040 <pxCurrentTCBConst2>:
 8003040:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop

08003048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <prvPortStartFirstTask+0x24>)
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f380 8808 	msr	MSP, r0
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8814 	msr	CONTROL, r0
 800305a:	b662      	cpsie	i
 800305c:	b661      	cpsie	f
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	df00      	svc	0
 8003068:	bf00      	nop
 800306a:	0000      	.short	0x0000
 800306c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop

08003074 <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
//###########################################################
// Add function below in file port.c
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue(void) {
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
	volatile uint8_t *const pucFirstUserPriorityRegister =
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <vSetVarulMaxPRIGROUPValue+0x84>)
 800307c:	60fb      	str	r3, [r7, #12]
			(volatile uint8_t* const ) ( portNVIC_IP_REGISTERS_OFFSET_16
					+ portFIRST_USER_INTERRUPT_NUMBER);
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	 possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	22ff      	movs	r2, #255	; 0xff
 8003082:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	 of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 800308e:	2207      	movs	r2, #7
 8003090:	601a      	str	r2, [r3, #0]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003092:	e009      	b.n	80030a8 <vSetVarulMaxPRIGROUPValue+0x34>
		ulMaxPRIGROUPValue--;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 800309c:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= (uint8_t) 0x01;
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	71fb      	strb	r3, [r7, #7]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d0ef      	beq.n	8003094 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		 priority bits matches the number of priority bits actually queried
		 from the hardware. */
		configASSERT(
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1c3 0307 	rsb	r3, r3, #7
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d00a      	beq.n	80030d6 <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	60bb      	str	r3, [r7, #8]
    }
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <vSetVarulMaxPRIGROUPValue+0x60>
				( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS);
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	 register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 80030de:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <vSetVarulMaxPRIGROUPValue+0x88>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e400 	.word	0xe000e400
 80030fc:	200001dc 	.word	0x200001dc

08003100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <xPortStartScheduler+0x120>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a46      	ldr	r2, [pc, #280]	; (8003224 <xPortStartScheduler+0x124>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10a      	bne.n	8003126 <xPortStartScheduler+0x26>
        __asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	613b      	str	r3, [r7, #16]
    }
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <xPortStartScheduler+0x120>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <xPortStartScheduler+0x128>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10a      	bne.n	8003146 <xPortStartScheduler+0x46>
        __asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	60fb      	str	r3, [r7, #12]
    }
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <xPortStartScheduler+0x12c>)
 8003148:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	22ff      	movs	r2, #255	; 0xff
 8003156:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <xPortStartScheduler+0x130>)
 800316c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <xPortStartScheduler+0x134>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003174:	e009      	b.n	800318a <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003176:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <xPortStartScheduler+0x134>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <xPortStartScheduler+0x134>)
 800317e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d0ef      	beq.n	8003176 <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <xPortStartScheduler+0x134>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00a      	beq.n	80031b8 <xPortStartScheduler+0xb8>
        __asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	60bb      	str	r3, [r7, #8]
    }
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <xPortStartScheduler+0x134>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <xPortStartScheduler+0x134>)
 80031c0:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <xPortStartScheduler+0x134>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <xPortStartScheduler+0x134>)
 80031cc:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <xPortStartScheduler+0x138>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <xPortStartScheduler+0x138>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <xPortStartScheduler+0x138>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <xPortStartScheduler+0x138>)
 80031e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80031ec:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031ee:	f000 f8e5 	bl	80033bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <xPortStartScheduler+0x13c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80031f8:	f000 f904 	bl	8003404 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <xPortStartScheduler+0x140>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <xPortStartScheduler+0x140>)
 8003202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003206:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003208:	f7ff ff1e 	bl	8003048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800320c:	f7ff fd8e 	bl	8002d2c <vTaskSwitchContext>
    prvTaskExitError();
 8003210:	f7ff fed6 	bl	8002fc0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00
 8003224:	410fc271 	.word	0x410fc271
 8003228:	410fc270 	.word	0x410fc270
 800322c:	e000e400 	.word	0xe000e400
 8003230:	200001d8 	.word	0x200001d8
 8003234:	200001dc 	.word	0x200001dc
 8003238:	e000ed20 	.word	0xe000ed20
 800323c:	20000010 	.word	0x20000010
 8003240:	e000ef34 	.word	0xe000ef34

08003244 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
        __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	607b      	str	r3, [r7, #4]
    }
 800325c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <vPortEnterCritical+0x58>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <vPortEnterCritical+0x58>)
 8003266:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <vPortEnterCritical+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10f      	bne.n	8003290 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <vPortEnterCritical+0x5c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <vPortEnterCritical+0x4c>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	603b      	str	r3, [r7, #0]
    }
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <vPortEnterCritical+0x4a>
    }
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	20000010 	.word	0x20000010
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <vPortExitCritical+0x50>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <vPortExitCritical+0x24>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	607b      	str	r3, [r7, #4]
    }
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <vPortExitCritical+0x50>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <vPortExitCritical+0x50>)
 80032d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <vPortExitCritical+0x50>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <vPortExitCritical+0x42>
 80032da:	2300      	movs	r3, #0
 80032dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000010 	.word	0x20000010
	...

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f01e 0f10 	tst.w	lr, #16
 8003310:	bf08      	it	eq
 8003312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003324:	f380 8811 	msr	BASEPRI, r0
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f7ff fcfc 	bl	8002d2c <vTaskSwitchContext>
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f380 8811 	msr	BASEPRI, r0
 800333c:	bc09      	pop	{r0, r3}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003346:	f01e 0f10 	tst.w	lr, #16
 800334a:	bf08      	it	eq
 800334c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003350:	f380 8809 	msr	PSP, r0
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	f3af 8000 	nop.w

08003360 <pxCurrentTCBConst>:
 8003360:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
        __asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
    }
 8003380:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003382:	f001 fc8b 	bl	8004c9c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003386:	f7ff fc15 	bl	8002bb4 <xTaskIncrementTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003390:	f001 fce2 	bl	8004d58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <SysTick_Handler+0x50>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e001      	b.n	80033a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800339e:	f001 fcbf 	bl	8004d20 <SEGGER_SYSVIEW_RecordExitISR>
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f383 8811 	msr	BASEPRI, r3
    }
 80033ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <vPortSetupTimerInterrupt+0x38>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <vPortSetupTimerInterrupt+0x3c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <vPortSetupTimerInterrupt+0x40>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <vPortSetupTimerInterrupt+0x44>)
 80033da:	3b01      	subs	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010
 80033f4:	e000e018 	.word	0xe000e018
 80033f8:	20000000 	.word	0x20000000
 80033fc:	10624dd3 	.word	0x10624dd3
 8003400:	e000e014 	.word	0xe000e014

08003404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003414 <vPortEnableVFP+0x10>
 8003408:	6801      	ldr	r1, [r0, #0]
 800340a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800340e:	6001      	str	r1, [r0, #0]
 8003410:	4770      	bx	lr
 8003412:	0000      	.short	0x0000
 8003414:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop

0800341c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d914      	bls.n	8003458 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <vPortValidateInterruptPriority+0x70>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <vPortValidateInterruptPriority+0x74>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	7afa      	ldrb	r2, [r7, #11]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20a      	bcs.n	8003458 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <vPortValidateInterruptPriority+0x78>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <vPortValidateInterruptPriority+0x7c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90a      	bls.n	800347e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	603b      	str	r3, [r7, #0]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortValidateInterruptPriority+0x60>
    }
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e3f0 	.word	0xe000e3f0
 8003490:	200001d8 	.word	0x200001d8
 8003494:	e000ed0c 	.word	0xe000ed0c
 8003498:	200001dc 	.word	0x200001dc

0800349c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80034a8:	f7ff fac4 	bl	8002a34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034ac:	4b65      	ldr	r3, [pc, #404]	; (8003644 <pvPortMalloc+0x1a8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034b4:	f000 f934 	bl	8003720 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <pvPortMalloc+0x1ac>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 80a7 	bne.w	8003614 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02d      	beq.n	8003528 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80034cc:	2208      	movs	r2, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d227      	bcs.n	8003528 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80034d8:	2208      	movs	r2, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d021      	beq.n	800352e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f023 0307 	bic.w	r3, r3, #7
 80034f0:	3308      	adds	r3, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d214      	bcs.n	8003522 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	3308      	adds	r3, #8
 8003500:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <pvPortMalloc+0x92>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	617b      	str	r3, [r7, #20]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003526:	e002      	b.n	800352e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e000      	b.n	8003530 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800352e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06e      	beq.n	8003614 <pvPortMalloc+0x178>
 8003536:	4b45      	ldr	r3, [pc, #276]	; (800364c <pvPortMalloc+0x1b0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d869      	bhi.n	8003614 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <pvPortMalloc+0x1b4>)
 8003542:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <pvPortMalloc+0x1b4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800354a:	e004      	b.n	8003556 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d903      	bls.n	8003568 <pvPortMalloc+0xcc>
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f1      	bne.n	800354c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003568:	4b36      	ldr	r3, [pc, #216]	; (8003644 <pvPortMalloc+0x1a8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	429a      	cmp	r2, r3
 8003570:	d050      	beq.n	8003614 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2208      	movs	r2, #8
 8003578:	4413      	add	r3, r2
 800357a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	2308      	movs	r3, #8
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	429a      	cmp	r2, r3
 8003592:	d91f      	bls.n	80035d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <pvPortMalloc+0x120>
        __asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	613b      	str	r3, [r7, #16]
    }
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad2      	subs	r2, r2, r3
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035ce:	69b8      	ldr	r0, [r7, #24]
 80035d0:	f000 f908 	bl	80037e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <pvPortMalloc+0x1b0>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <pvPortMalloc+0x1b0>)
 80035e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <pvPortMalloc+0x1b0>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <pvPortMalloc+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d203      	bcs.n	80035f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <pvPortMalloc+0x1b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <pvPortMalloc+0x1b8>)
 80035f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <pvPortMalloc+0x1ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	431a      	orrs	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <pvPortMalloc+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <pvPortMalloc+0x1bc>)
 8003612:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003614:	f7ff fa1c 	bl	8002a50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <pvPortMalloc+0x19c>
        __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	60fb      	str	r3, [r7, #12]
    }
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <pvPortMalloc+0x19a>
    return pvReturn;
 8003638:	69fb      	ldr	r3, [r7, #28]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20003de8 	.word	0x20003de8
 8003648:	20003dfc 	.word	0x20003dfc
 800364c:	20003dec 	.word	0x20003dec
 8003650:	20003de0 	.word	0x20003de0
 8003654:	20003df0 	.word	0x20003df0
 8003658:	20003df4 	.word	0x20003df4

0800365c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d04d      	beq.n	800370a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800366e:	2308      	movs	r3, #8
 8003670:	425b      	negs	r3, r3
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4413      	add	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <vPortFree+0xb8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <vPortFree+0x44>
        __asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60fb      	str	r3, [r7, #12]
    }
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <vPortFree+0x62>
        __asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60bb      	str	r3, [r7, #8]
    }
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <vPortFree+0xb8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01e      	beq.n	800370a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11a      	bne.n	800370a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <vPortFree+0xb8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036e4:	f7ff f9a6 	bl	8002a34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <vPortFree+0xbc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <vPortFree+0xbc>)
 80036f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036f6:	6938      	ldr	r0, [r7, #16]
 80036f8:	f000 f874 	bl	80037e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <vPortFree+0xc0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	4a06      	ldr	r2, [pc, #24]	; (800371c <vPortFree+0xc0>)
 8003704:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003706:	f7ff f9a3 	bl	8002a50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20003dfc 	.word	0x20003dfc
 8003718:	20003dec 	.word	0x20003dec
 800371c:	20003df8 	.word	0x20003df8

08003720 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003726:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800372a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <prvHeapInit+0xac>)
 800372e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3307      	adds	r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0307 	bic.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <prvHeapInit+0xac>)
 8003750:	4413      	add	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <prvHeapInit+0xb0>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <prvHeapInit+0xb0>)
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	4413      	add	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800376c:	2208      	movs	r2, #8
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0307 	bic.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <prvHeapInit+0xb4>)
 8003780:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <prvHeapInit+0xb4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <prvHeapInit+0xb4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <prvHeapInit+0xb4>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <prvHeapInit+0xb8>)
 80037ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a09      	ldr	r2, [pc, #36]	; (80037dc <prvHeapInit+0xbc>)
 80037b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <prvHeapInit+0xc0>)
 80037ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200001e0 	.word	0x200001e0
 80037d0:	20003de0 	.word	0x20003de0
 80037d4:	20003de8 	.word	0x20003de8
 80037d8:	20003df0 	.word	0x20003df0
 80037dc:	20003dec 	.word	0x20003dec
 80037e0:	20003dfc 	.word	0x20003dfc

080037e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <prvInsertBlockIntoFreeList+0xac>)
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e002      	b.n	80037f8 <prvInsertBlockIntoFreeList+0x14>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d8f7      	bhi.n	80037f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4413      	add	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d108      	bne.n	8003826 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	441a      	add	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	441a      	add	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d118      	bne.n	800386c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <prvInsertBlockIntoFreeList+0xb0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d00d      	beq.n	8003862 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e008      	b.n	8003874 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <prvInsertBlockIntoFreeList+0xb0>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e003      	b.n	8003874 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d002      	beq.n	8003882 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20003de0 	.word	0x20003de0
 8003894:	20003de8 	.word	0x20003de8

08003898 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <_cbSendSystemDesc+0x14>)
 800389e:	f001 f9a7 	bl	8004bf0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038a2:	4803      	ldr	r0, [pc, #12]	; (80038b0 <_cbSendSystemDesc+0x18>)
 80038a4:	f001 f9a4 	bl	8004bf0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	08005558 	.word	0x08005558
 80038b0:	08005590 	.word	0x08005590

080038b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80038c2:	4a06      	ldr	r2, [pc, #24]	; (80038dc <SEGGER_SYSVIEW_Conf+0x28>)
 80038c4:	f000 fe1a 	bl	80044fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80038c8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80038cc:	f000 fe5a 	bl	8004584 <SEGGER_SYSVIEW_SetRAMBase>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000000 	.word	0x20000000
 80038d8:	08003899 	.word	0x08003899
 80038dc:	08005738 	.word	0x08005738

080038e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	e033      	b.n	8003954 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038ec:	491e      	ldr	r1, [pc, #120]	; (8003968 <_cbSendTaskList+0x88>)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	491a      	ldr	r1, [pc, #104]	; (8003968 <_cbSendTaskList+0x88>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3304      	adds	r3, #4
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	4c16      	ldr	r4, [pc, #88]	; (8003968 <_cbSendTaskList+0x88>)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4423      	add	r3, r4
 800391c:	3308      	adds	r3, #8
 800391e:	681c      	ldr	r4, [r3, #0]
 8003920:	4d11      	ldr	r5, [pc, #68]	; (8003968 <_cbSendTaskList+0x88>)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	442b      	add	r3, r5
 800392e:	330c      	adds	r3, #12
 8003930:	681d      	ldr	r5, [r3, #0]
 8003932:	4e0d      	ldr	r6, [pc, #52]	; (8003968 <_cbSendTaskList+0x88>)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4433      	add	r3, r6
 8003940:	3310      	adds	r3, #16
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	462b      	mov	r3, r5
 8003948:	4622      	mov	r2, r4
 800394a:	f000 f979 	bl	8003c40 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3301      	adds	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <_cbSendTaskList+0x8c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d3c6      	bcc.n	80038ec <_cbSendTaskList+0xc>
  }
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003968:	20003e00 	.word	0x20003e00
 800396c:	20003ea0 	.word	0x20003ea0

08003970 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003978:	f7ff f90a 	bl	8002b90 <xTaskGetTickCountFromISR>
 800397c:	4603      	mov	r3, r0
 800397e:	2200      	movs	r2, #0
 8003980:	469a      	mov	sl, r3
 8003982:	4693      	mov	fp, r2
 8003984:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	f04f 0a00 	mov.w	sl, #0
 8003994:	f04f 0b00 	mov.w	fp, #0
 8003998:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800399c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80039a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80039a4:	4652      	mov	r2, sl
 80039a6:	465b      	mov	r3, fp
 80039a8:	1a14      	subs	r4, r2, r0
 80039aa:	eb63 0501 	sbc.w	r5, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	00ab      	lsls	r3, r5, #2
 80039b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80039bc:	00a2      	lsls	r2, r4, #2
 80039be:	4614      	mov	r4, r2
 80039c0:	461d      	mov	r5, r3
 80039c2:	eb14 0800 	adds.w	r8, r4, r0
 80039c6:	eb45 0901 	adc.w	r9, r5, r1
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039de:	4690      	mov	r8, r2
 80039e0:	4699      	mov	r9, r3
 80039e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80039e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080039f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a06:	2205      	movs	r2, #5
 8003a08:	492b      	ldr	r1, [pc, #172]	; (8003ab8 <SYSVIEW_AddTask+0xc0>)
 8003a0a:	68b8      	ldr	r0, [r7, #8]
 8003a0c:	f001 fd6e 	bl	80054ec <memcmp>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04b      	beq.n	8003aae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b07      	cmp	r3, #7
 8003a1c:	d903      	bls.n	8003a26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a1e:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <SYSVIEW_AddTask+0xc8>)
 8003a20:	f001 fbea 	bl	80051f8 <SEGGER_SYSVIEW_Warn>
    return;
 8003a24:	e044      	b.n	8003ab0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4926      	ldr	r1, [pc, #152]	; (8003ac4 <SYSVIEW_AddTask+0xcc>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <SYSVIEW_AddTask+0xcc>)
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <SYSVIEW_AddTask+0xcc>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3308      	adds	r3, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <SYSVIEW_AddTask+0xcc>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	330c      	adds	r3, #12
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4910      	ldr	r1, [pc, #64]	; (8003ac4 <SYSVIEW_AddTask+0xcc>)
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <SYSVIEW_AddTask+0xc4>)
 8003a9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f8ca 	bl	8003c40 <SYSVIEW_SendTaskInfo>
 8003aac:	e000      	b.n	8003ab0 <SYSVIEW_AddTask+0xb8>
    return;
 8003aae:	bf00      	nop

}
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	080055a0 	.word	0x080055a0
 8003abc:	20003ea0 	.word	0x20003ea0
 8003ac0:	080055a8 	.word	0x080055a8
 8003ac4:	20003e00 	.word	0x20003e00

08003ac8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80ab 	beq.w	8003c30 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e00d      	b.n	8003afc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003ae0:	4956      	ldr	r1, [pc, #344]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d008      	beq.n	8003b08 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3ec      	bcc.n	8003ae0 <SYSVIEW_DeleteTask+0x18>
 8003b06:	e000      	b.n	8003b0a <SYSVIEW_DeleteTask+0x42>
      break;
 8003b08:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003b0a:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d111      	bne.n	8003b3a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a46      	ldr	r2, [pc, #280]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b22:	4413      	add	r3, r2
 8003b24:	2214      	movs	r2, #20
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fcfd 	bl	8005528 <memset>
    _NumTasks--;
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	4a40      	ldr	r2, [pc, #256]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	e07b      	b.n	8003c32 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d276      	bcs.n	8003c32 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	493c      	ldr	r1, [pc, #240]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	4838      	ldr	r0, [pc, #224]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4403      	add	r3, r0
 8003b66:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003b68:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	4933      	ldr	r1, [pc, #204]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	482f      	ldr	r0, [pc, #188]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4403      	add	r3, r0
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003b90:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1e5a      	subs	r2, r3, #1
 8003b96:	4929      	ldr	r1, [pc, #164]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	4825      	ldr	r0, [pc, #148]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	491f      	ldr	r1, [pc, #124]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	481b      	ldr	r0, [pc, #108]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4403      	add	r3, r0
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	1e5a      	subs	r2, r3, #1
 8003be6:	4915      	ldr	r1, [pc, #84]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3310      	adds	r3, #16
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	4811      	ldr	r0, [pc, #68]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4403      	add	r3, r0
 8003c04:	3310      	adds	r3, #16
 8003c06:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <SYSVIEW_DeleteTask+0x174>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fc82 	bl	8005528 <memset>
    _NumTasks--;
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	4a03      	ldr	r2, [pc, #12]	; (8003c38 <SYSVIEW_DeleteTask+0x170>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e000      	b.n	8003c32 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003c30:	bf00      	nop
  }
}
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20003ea0 	.word	0x20003ea0
 8003c3c:	20003e00 	.word	0x20003e00

08003c40 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	2214      	movs	r2, #20
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fc66 	bl	8005528 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fec3 	bl	8004a00 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <_DoInit+0xa0>)
 8003c8c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c8e:	22a8      	movs	r2, #168	; 0xa8
 8003c90:	2100      	movs	r1, #0
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f001 fc48 	bl	8005528 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <_DoInit+0xa4>)
 8003ca8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <_DoInit+0xa8>)
 8003cae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <_DoInit+0xa4>)
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <_DoInit+0xac>)
 8003cd4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	e00c      	b.n	8003d12 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1c3 030f 	rsb	r3, r3, #15
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <_DoInit+0xb0>)
 8003d00:	5cd1      	ldrb	r1, [r2, r3]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	460a      	mov	r2, r1
 8003d0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	607b      	str	r3, [r7, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b0f      	cmp	r3, #15
 8003d16:	d9ef      	bls.n	8003cf8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d18:	f3bf 8f5f 	dmb	sy
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20003ea4 	.word	0x20003ea4
 8003d28:	080055f8 	.word	0x080055f8
 8003d2c:	20003f4c 	.word	0x20003f4c
 8003d30:	2000434c 	.word	0x2000434c
 8003d34:	08005740 	.word	0x08005740

08003d38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <SEGGER_RTT_ReadNoLock+0x1e>
 8003d52:	f7ff ff97 	bl	8003c84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	3360      	adds	r3, #96	; 0x60
 8003d62:	4a37      	ldr	r2, [pc, #220]	; (8003e40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d92b      	bls.n	8003ddc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf28      	it	cs
 8003d96:	4613      	movcs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003daa:	f001 fbaf 	bl	800550c <memcpy>
    NumBytesRead += NumBytesRem;
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d101      	bne.n	8003ddc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf28      	it	cs
 8003dec:	4613      	movcs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	4413      	add	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e06:	f001 fb81 	bl	800550c <memcpy>
    NumBytesRead += NumBytesRem;
 8003e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4413      	add	r3, r2
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4413      	add	r3, r2
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20003ea4 	.word	0x20003ea4

08003e44 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e60:	f7ff ff10 	bl	8003c84 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e64:	f3ef 8311 	mrs	r3, BASEPRI
 8003e68:	f04f 0120 	mov.w	r1, #32
 8003e6c:	f381 8811 	msr	BASEPRI, r1
 8003e70:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e72:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e74:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e7a:	6939      	ldr	r1, [r7, #16]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	dbeb      	blt.n	8003e7a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ea2:	e000      	b.n	8003ea6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ea4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	da3f      	bge.n	8003f30 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3320      	adds	r3, #32
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003eee:	6939      	ldr	r1, [r7, #16]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	3328      	adds	r3, #40	; 0x28
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	3324      	adds	r3, #36	; 0x24
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	332c      	adds	r3, #44	; 0x2c
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f2a:	f3bf 8f5f 	dmb	sy
 8003f2e:	e002      	b.n	8003f36 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f34:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20003ea4 	.word	0x20003ea4

08003f4c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f5a:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f68:	f7ff fe8c 	bl	8003c84 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f6e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d82c      	bhi.n	8003fd0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f76:	f3ef 8311 	mrs	r3, BASEPRI
 8003f7a:	f04f 0120 	mov.w	r1, #32
 8003f7e:	f381 8811 	msr	BASEPRI, r1
 8003f82:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	3360      	adds	r3, #96	; 0x60
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00e      	beq.n	8003fba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fc0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	e002      	b.n	8003fd6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20003ea4 	.word	0x20003ea4

08003fe4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	60fa      	str	r2, [r7, #12]
 8003ffa:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d90a      	bls.n	8004018 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004006:	e007      	b.n	8004018 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	1c53      	adds	r3, r2, #1
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1c59      	adds	r1, r3, #1
 8004012:	60f9      	str	r1, [r7, #12]
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <_EncodeStr+0x46>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ee      	bne.n	8004008 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	b2da      	uxtb	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004036:	68fb      	ldr	r3, [r7, #12]
}
 8004038:	4618      	mov	r0, r3
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3307      	adds	r3, #7
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004062:	4b35      	ldr	r3, [pc, #212]	; (8004138 <_HandleIncomingPacket+0xdc>)
 8004064:	7e1b      	ldrb	r3, [r3, #24]
 8004066:	4618      	mov	r0, r3
 8004068:	1cfb      	adds	r3, r7, #3
 800406a:	2201      	movs	r2, #1
 800406c:	4619      	mov	r1, r3
 800406e:	f7ff fe63 	bl	8003d38 <SEGGER_RTT_ReadNoLock>
 8004072:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d052      	beq.n	8004120 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d031      	beq.n	80040e4 <_HandleIncomingPacket+0x88>
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	dc40      	bgt.n	8004106 <_HandleIncomingPacket+0xaa>
 8004084:	2b07      	cmp	r3, #7
 8004086:	dc15      	bgt.n	80040b4 <_HandleIncomingPacket+0x58>
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd3c      	ble.n	8004106 <_HandleIncomingPacket+0xaa>
 800408c:	3b01      	subs	r3, #1
 800408e:	2b06      	cmp	r3, #6
 8004090:	d839      	bhi.n	8004106 <_HandleIncomingPacket+0xaa>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <_HandleIncomingPacket+0x3c>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040bb 	.word	0x080040bb
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c7 	.word	0x080040c7
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d3 	.word	0x080040d3
 80040ac:	080040d9 	.word	0x080040d9
 80040b0:	080040df 	.word	0x080040df
 80040b4:	2b7f      	cmp	r3, #127	; 0x7f
 80040b6:	d035      	beq.n	8004124 <_HandleIncomingPacket+0xc8>
 80040b8:	e025      	b.n	8004106 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040ba:	f000 fb27 	bl	800470c <SEGGER_SYSVIEW_Start>
      break;
 80040be:	e036      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040c0:	f000 fbde 	bl	8004880 <SEGGER_SYSVIEW_Stop>
      break;
 80040c4:	e033      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040c6:	f000 fdb7 	bl	8004c38 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040ca:	e030      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040cc:	f000 fd7c 	bl	8004bc8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040d0:	e02d      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040d2:	f000 fbfb 	bl	80048cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80040d6:	e02a      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80040d8:	f000 fff4 	bl	80050c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040dc:	e027      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040de:	f000 ffd3 	bl	8005088 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040e2:	e024      	b.n	800412e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <_HandleIncomingPacket+0xdc>)
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
 80040e8:	4618      	mov	r0, r3
 80040ea:	1cfb      	adds	r3, r7, #3
 80040ec:	2201      	movs	r2, #1
 80040ee:	4619      	mov	r1, r3
 80040f0:	f7ff fe22 	bl	8003d38 <SEGGER_RTT_ReadNoLock>
 80040f4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 ff38 	bl	8004f74 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004104:	e010      	b.n	8004128 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	b25b      	sxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	da0e      	bge.n	800412c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <_HandleIncomingPacket+0xdc>)
 8004110:	7e1b      	ldrb	r3, [r3, #24]
 8004112:	4618      	mov	r0, r3
 8004114:	1cfb      	adds	r3, r7, #3
 8004116:	2201      	movs	r2, #1
 8004118:	4619      	mov	r1, r3
 800411a:	f7ff fe0d 	bl	8003d38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800411e:	e005      	b.n	800412c <_HandleIncomingPacket+0xd0>
    }
  }
 8004120:	bf00      	nop
 8004122:	e004      	b.n	800412e <_HandleIncomingPacket+0xd2>
      break;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <_HandleIncomingPacket+0xd2>
      break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <_HandleIncomingPacket+0xd2>
      break;
 800412c:	bf00      	nop
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20006b64 	.word	0x20006b64

0800413c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	; 0x30
 8004140:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004142:	2301      	movs	r3, #1
 8004144:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	e00b      	b.n	8004170 <_TrySendOverflowPacket+0x34>
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b7f      	cmp	r3, #127	; 0x7f
 8004174:	d8f0      	bhi.n	8004158 <_TrySendOverflowPacket+0x1c>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <_TrySendOverflowPacket+0xe0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e00b      	b.n	80041b8 <_TrySendOverflowPacket+0x7c>
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	6279      	str	r1, [r7, #36]	; 0x24
 80041aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	09db      	lsrs	r3, r3, #7
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	2b7f      	cmp	r3, #127	; 0x7f
 80041bc:	d8f0      	bhi.n	80041a0 <_TrySendOverflowPacket+0x64>
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	627a      	str	r2, [r7, #36]	; 0x24
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	4618      	mov	r0, r3
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	f7fc f816 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041e4:	4603      	mov	r3, r0
 80041e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e004      	b.n	800420c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	4a03      	ldr	r2, [pc, #12]	; (8004218 <_TrySendOverflowPacket+0xdc>)
 800420a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800420c:	693b      	ldr	r3, [r7, #16]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3730      	adds	r7, #48	; 0x30
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20006b64 	.word	0x20006b64
 800421c:	e0001004 	.word	0xe0001004

08004220 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800422c:	4b98      	ldr	r3, [pc, #608]	; (8004490 <_SendPacket+0x270>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d010      	beq.n	8004256 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004234:	4b96      	ldr	r3, [pc, #600]	; (8004490 <_SendPacket+0x270>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 812d 	beq.w	8004498 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800423e:	4b94      	ldr	r3, [pc, #592]	; (8004490 <_SendPacket+0x270>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d109      	bne.n	800425a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004246:	f7ff ff79 	bl	800413c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800424a:	4b91      	ldr	r3, [pc, #580]	; (8004490 <_SendPacket+0x270>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	f040 8124 	bne.w	800449c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004254:	e001      	b.n	800425a <_SendPacket+0x3a>
    goto Send;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <_SendPacket+0x3c>
Send:
 800425a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b1f      	cmp	r3, #31
 8004260:	d809      	bhi.n	8004276 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <_SendPacket+0x270>)
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8115 	bne.w	80044a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b17      	cmp	r3, #23
 800427a:	d807      	bhi.n	800428c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3b01      	subs	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e0c4      	b.n	8004416 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b7f      	cmp	r3, #127	; 0x7f
 8004298:	d912      	bls.n	80042c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	09da      	lsrs	r2, r3, #7
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	3a01      	subs	r2, #1
 80042b2:	60fa      	str	r2, [r7, #12]
 80042b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e006      	b.n	80042ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b7e      	cmp	r3, #126	; 0x7e
 80042d2:	d807      	bhi.n	80042e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e098      	b.n	8004416 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ea:	d212      	bcs.n	8004312 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	09da      	lsrs	r2, r3, #7
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	3a01      	subs	r2, #1
 8004304:	60fa      	str	r2, [r7, #12]
 8004306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e081      	b.n	8004416 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004318:	d21d      	bcs.n	8004356 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0b9a      	lsrs	r2, r3, #14
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b01      	subs	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	09db      	lsrs	r3, r3, #7
 800432e:	b2db      	uxtb	r3, r3
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	3a01      	subs	r2, #1
 8004334:	60fa      	str	r2, [r7, #12]
 8004336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	3a01      	subs	r2, #1
 8004348:	60fa      	str	r2, [r7, #12]
 800434a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e05f      	b.n	8004416 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435c:	d228      	bcs.n	80043b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0d5a      	lsrs	r2, r3, #21
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b01      	subs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0b9b      	lsrs	r3, r3, #14
 8004372:	b2db      	uxtb	r3, r3
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	3a01      	subs	r2, #1
 8004378:	60fa      	str	r2, [r7, #12]
 800437a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	3a01      	subs	r2, #1
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	3a01      	subs	r2, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e032      	b.n	8004416 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0f1a      	lsrs	r2, r3, #28
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0d5b      	lsrs	r3, r3, #21
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	3a01      	subs	r2, #1
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0b9b      	lsrs	r3, r3, #14
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	3a01      	subs	r2, #1
 80043e0:	60fa      	str	r2, [r7, #12]
 80043e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	09db      	lsrs	r3, r3, #7
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	3a01      	subs	r2, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	3a01      	subs	r2, #1
 800440a:	60fa      	str	r2, [r7, #12]
 800440c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004416:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <_SendPacket+0x274>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <_SendPacket+0x270>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	e00b      	b.n	8004448 <_SendPacket+0x228>
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	6279      	str	r1, [r7, #36]	; 0x24
 800443a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	09db      	lsrs	r3, r3, #7
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b7f      	cmp	r3, #127	; 0x7f
 800444c:	d8f0      	bhi.n	8004430 <_SendPacket+0x210>
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	627a      	str	r2, [r7, #36]	; 0x24
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <_SendPacket+0x270>)
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	4618      	mov	r0, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	461a      	mov	r2, r3
 800446c:	68f9      	ldr	r1, [r7, #12]
 800446e:	f7fb fecf 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004472:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <_SendPacket+0x270>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e00f      	b.n	80044a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004482:	4b03      	ldr	r3, [pc, #12]	; (8004490 <_SendPacket+0x270>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b01      	ldr	r3, [pc, #4]	; (8004490 <_SendPacket+0x270>)
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e008      	b.n	80044a2 <_SendPacket+0x282>
 8004490:	20006b64 	.word	0x20006b64
 8004494:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004498:	bf00      	nop
 800449a:	e002      	b.n	80044a2 <_SendPacket+0x282>
      goto SendDone;
 800449c:	bf00      	nop
 800449e:	e000      	b.n	80044a2 <_SendPacket+0x282>
      goto SendDone;
 80044a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <_SendPacket+0x2d4>)
 80044a4:	7e1b      	ldrb	r3, [r3, #24]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <_SendPacket+0x2d8>)
 80044aa:	460b      	mov	r3, r1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	440b      	add	r3, r1
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	336c      	adds	r3, #108	; 0x6c
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <_SendPacket+0x2d4>)
 80044ba:	7e1b      	ldrb	r3, [r3, #24]
 80044bc:	4618      	mov	r0, r3
 80044be:	490e      	ldr	r1, [pc, #56]	; (80044f8 <_SendPacket+0x2d8>)
 80044c0:	4603      	mov	r3, r0
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4403      	add	r3, r0
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	440b      	add	r3, r1
 80044ca:	3370      	adds	r3, #112	; 0x70
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d00b      	beq.n	80044ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <_SendPacket+0x2d4>)
 80044d4:	789b      	ldrb	r3, [r3, #2]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <_SendPacket+0x2d4>)
 80044dc:	2201      	movs	r2, #1
 80044de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044e0:	f7ff fdbc 	bl	800405c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <_SendPacket+0x2d4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20006b64 	.word	0x20006b64
 80044f8:	20003ea4 	.word	0x20003ea4

080044fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800450a:	2300      	movs	r3, #0
 800450c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004510:	4917      	ldr	r1, [pc, #92]	; (8004570 <SEGGER_SYSVIEW_Init+0x74>)
 8004512:	4818      	ldr	r0, [pc, #96]	; (8004574 <SEGGER_SYSVIEW_Init+0x78>)
 8004514:	f7ff fc96 	bl	8003e44 <SEGGER_RTT_AllocUpBuffer>
 8004518:	4603      	mov	r3, r0
 800451a:	b2da      	uxtb	r2, r3
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 800451e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004522:	785a      	ldrb	r2, [r3, #1]
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004526:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 800452a:	7e1b      	ldrb	r3, [r3, #24]
 800452c:	4618      	mov	r0, r3
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2308      	movs	r3, #8
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <SEGGER_SYSVIEW_Init+0x80>)
 8004536:	490f      	ldr	r1, [pc, #60]	; (8004574 <SEGGER_SYSVIEW_Init+0x78>)
 8004538:	f7ff fd08 	bl	8003f4c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <SEGGER_SYSVIEW_Init+0x84>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004548:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800454a:	4a0b      	ldr	r2, [pc, #44]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800455c:	4a06      	ldr	r2, [pc, #24]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SEGGER_SYSVIEW_Init+0x7c>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	2000435c 	.word	0x2000435c
 8004574:	0800560c 	.word	0x0800560c
 8004578:	20006b64 	.word	0x20006b64
 800457c:	20006b5c 	.word	0x20006b5c
 8004580:	e0001004 	.word	0xe0001004

08004584 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6113      	str	r3, [r2, #16]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20006b64 	.word	0x20006b64

080045a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045ac:	f3ef 8311 	mrs	r3, BASEPRI
 80045b0:	f04f 0120 	mov.w	r1, #32
 80045b4:	f381 8811 	msr	BASEPRI, r1
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4808      	ldr	r0, [pc, #32]	; (80045dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80045bc:	f7ff fd42 	bl	8004044 <_PreparePacket>
 80045c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f7ff fe2a 	bl	8004220 <_SendPacket>
  RECORD_END();
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f383 8811 	msr	BASEPRI, r3
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20006b94 	.word	0x20006b94

080045e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045ea:	f3ef 8311 	mrs	r3, BASEPRI
 80045ee:	f04f 0120 	mov.w	r1, #32
 80045f2:	f381 8811 	msr	BASEPRI, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	4816      	ldr	r0, [pc, #88]	; (8004654 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80045fa:	f7ff fd23 	bl	8004044 <_PreparePacket>
 80045fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e00b      	b.n	8004626 <SEGGER_SYSVIEW_RecordU32+0x46>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	61f9      	str	r1, [r7, #28]
 8004618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	09db      	lsrs	r3, r3, #7
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b7f      	cmp	r3, #127	; 0x7f
 800462a:	d8f0      	bhi.n	800460e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	61fa      	str	r2, [r7, #28]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	6938      	ldr	r0, [r7, #16]
 8004642:	f7ff fded 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f383 8811 	msr	BASEPRI, r3
}
 800464c:	bf00      	nop
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20006b94 	.word	0x20006b94

08004658 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	; 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004664:	f3ef 8311 	mrs	r3, BASEPRI
 8004668:	f04f 0120 	mov.w	r1, #32
 800466c:	f381 8811 	msr	BASEPRI, r1
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	4825      	ldr	r0, [pc, #148]	; (8004708 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004674:	f7ff fce6 	bl	8004044 <_PreparePacket>
 8004678:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
 8004686:	e00b      	b.n	80046a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	b2da      	uxtb	r2, r3
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	09db      	lsrs	r3, r3, #7
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	2b7f      	cmp	r3, #127	; 0x7f
 80046a4:	d8f0      	bhi.n	8004688 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	e00b      	b.n	80046d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	6279      	str	r1, [r7, #36]	; 0x24
 80046ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	09db      	lsrs	r3, r3, #7
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b7f      	cmp	r3, #127	; 0x7f
 80046dc:	d8f0      	bhi.n	80046c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	627a      	str	r2, [r7, #36]	; 0x24
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f7ff fd94 	bl	8004220 <_SendPacket>
  RECORD_END();
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f383 8811 	msr	BASEPRI, r3
}
 80046fe:	bf00      	nop
 8004700:	3730      	adds	r7, #48	; 0x30
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20006b94 	.word	0x20006b94

0800470c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004712:	4b58      	ldr	r3, [pc, #352]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	f04f 0120 	mov.w	r1, #32
 8004720:	f381 8811 	msr	BASEPRI, r1
 8004724:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004726:	4b53      	ldr	r3, [pc, #332]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	220a      	movs	r2, #10
 800472c:	4952      	ldr	r1, [pc, #328]	; (8004878 <SEGGER_SYSVIEW_Start+0x16c>)
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb fd6e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800473a:	200a      	movs	r0, #10
 800473c:	f7ff ff32 	bl	80045a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004740:	f3ef 8311 	mrs	r3, BASEPRI
 8004744:	f04f 0120 	mov.w	r1, #32
 8004748:	f381 8811 	msr	BASEPRI, r1
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	484b      	ldr	r0, [pc, #300]	; (800487c <SEGGER_SYSVIEW_Start+0x170>)
 8004750:	f7ff fc78 	bl	8004044 <_PreparePacket>
 8004754:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475e:	4b45      	ldr	r3, [pc, #276]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
 8004764:	e00b      	b.n	800477e <SEGGER_SYSVIEW_Start+0x72>
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	09db      	lsrs	r3, r3, #7
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	2b7f      	cmp	r3, #127	; 0x7f
 8004782:	d8f0      	bhi.n	8004766 <SEGGER_SYSVIEW_Start+0x5a>
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800478a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	4b36      	ldr	r3, [pc, #216]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	e00b      	b.n	80047b8 <SEGGER_SYSVIEW_Start+0xac>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	6279      	str	r1, [r7, #36]	; 0x24
 80047aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	09db      	lsrs	r3, r3, #7
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b7f      	cmp	r3, #127	; 0x7f
 80047bc:	d8f0      	bhi.n	80047a0 <SEGGER_SYSVIEW_Start+0x94>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	627a      	str	r2, [r7, #36]	; 0x24
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e00b      	b.n	80047f2 <SEGGER_SYSVIEW_Start+0xe6>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	1c59      	adds	r1, r3, #1
 80047e2:	61f9      	str	r1, [r7, #28]
 80047e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	09db      	lsrs	r3, r3, #7
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b7f      	cmp	r3, #127	; 0x7f
 80047f6:	d8f0      	bhi.n	80047da <SEGGER_SYSVIEW_Start+0xce>
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	61fa      	str	r2, [r7, #28]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	e00b      	b.n	800482a <SEGGER_SYSVIEW_Start+0x11e>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1c59      	adds	r1, r3, #1
 800481a:	6179      	str	r1, [r7, #20]
 800481c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	09db      	lsrs	r3, r3, #7
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b7f      	cmp	r3, #127	; 0x7f
 800482e:	d8f0      	bhi.n	8004812 <SEGGER_SYSVIEW_Start+0x106>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	617a      	str	r2, [r7, #20]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004840:	2218      	movs	r2, #24
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fceb 	bl	8004220 <_SendPacket>
      RECORD_END();
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <SEGGER_SYSVIEW_Start+0x168>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800485e:	f000 f9eb 	bl	8004c38 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004862:	f000 f9b1 	bl	8004bc8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004866:	f000 fc2d 	bl	80050c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800486a:	bf00      	nop
 800486c:	3730      	adds	r7, #48	; 0x30
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20006b64 	.word	0x20006b64
 8004878:	08005754 	.word	0x08005754
 800487c:	20006b94 	.word	0x20006b94

08004880 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	f04f 0120 	mov.w	r1, #32
 800488e:	f381 8811 	msr	BASEPRI, r1
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	480b      	ldr	r0, [pc, #44]	; (80048c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004896:	f7ff fbd5 	bl	8004044 <_PreparePacket>
 800489a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048a4:	220b      	movs	r2, #11
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6838      	ldr	r0, [r7, #0]
 80048aa:	f7ff fcb9 	bl	8004220 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f383 8811 	msr	BASEPRI, r3
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20006b94 	.word	0x20006b94
 80048c8:	20006b64 	.word	0x20006b64

080048cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	; 0x30
 80048d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048d2:	f3ef 8311 	mrs	r3, BASEPRI
 80048d6:	f04f 0120 	mov.w	r1, #32
 80048da:	f381 8811 	msr	BASEPRI, r1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	4845      	ldr	r0, [pc, #276]	; (80049f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048e2:	f7ff fbaf 	bl	8004044 <_PreparePacket>
 80048e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f6:	e00b      	b.n	8004910 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	1c59      	adds	r1, r3, #1
 8004900:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b7f      	cmp	r3, #127	; 0x7f
 8004914:	d8f0      	bhi.n	80048f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	4b34      	ldr	r3, [pc, #208]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	e00b      	b.n	800494a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1c59      	adds	r1, r3, #1
 800493a:	6279      	str	r1, [r7, #36]	; 0x24
 800493c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b7f      	cmp	r3, #127	; 0x7f
 800494e:	d8f0      	bhi.n	8004932 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	627a      	str	r2, [r7, #36]	; 0x24
 8004956:	6a3a      	ldr	r2, [r7, #32]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e00b      	b.n	8004984 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	61f9      	str	r1, [r7, #28]
 8004976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	09db      	lsrs	r3, r3, #7
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d8f0      	bhi.n	800496c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	61fa      	str	r2, [r7, #28]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e00b      	b.n	80049bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	6179      	str	r1, [r7, #20]
 80049ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	09db      	lsrs	r3, r3, #7
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b7f      	cmp	r3, #127	; 0x7f
 80049c0:	d8f0      	bhi.n	80049a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	617a      	str	r2, [r7, #20]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049d2:	2218      	movs	r2, #24
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f7ff fc22 	bl	8004220 <_SendPacket>
  RECORD_END();
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4798      	blx	r3
  }
}
 80049f0:	bf00      	nop
 80049f2:	3730      	adds	r7, #48	; 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20006b94 	.word	0x20006b94
 80049fc:	20006b64 	.word	0x20006b64

08004a00 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b092      	sub	sp, #72	; 0x48
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a08:	f3ef 8311 	mrs	r3, BASEPRI
 8004a0c:	f04f 0120 	mov.w	r1, #32
 8004a10:	f381 8811 	msr	BASEPRI, r1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	486a      	ldr	r0, [pc, #424]	; (8004bc0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a18:	f7ff fb14 	bl	8004044 <_PreparePacket>
 8004a1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b66      	ldr	r3, [pc, #408]	; (8004bc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	e00b      	b.n	8004a4c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	6479      	str	r1, [r7, #68]	; 0x44
 8004a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	09db      	lsrs	r3, r3, #7
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a50:	d8f0      	bhi.n	8004a34 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	647a      	str	r2, [r7, #68]	; 0x44
 8004a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a6c:	e00b      	b.n	8004a86 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	1c59      	adds	r1, r3, #1
 8004a76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	09db      	lsrs	r3, r3, #7
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8a:	d8f0      	bhi.n	8004a6e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fa9d 	bl	8003fe4 <_EncodeStr>
 8004aaa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004aac:	2209      	movs	r2, #9
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6938      	ldr	r0, [r7, #16]
 8004ab2:	f7ff fbb5 	bl	8004220 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b40      	ldr	r3, [pc, #256]	; (8004bc4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aca:	e00b      	b.n	8004ae4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	6379      	str	r1, [r7, #52]	; 0x34
 8004ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae8:	d8f0      	bhi.n	8004acc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	637a      	str	r2, [r7, #52]	; 0x34
 8004af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b04:	e00b      	b.n	8004b1e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	1c59      	adds	r1, r3, #1
 8004b0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	2b7f      	cmp	r3, #127	; 0x7f
 8004b22:	d8f0      	bhi.n	8004b06 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	e00b      	b.n	8004b58 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	6279      	str	r1, [r7, #36]	; 0x24
 8004b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	09db      	lsrs	r3, r3, #7
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b5c:	d8f0      	bhi.n	8004b40 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	627a      	str	r2, [r7, #36]	; 0x24
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e00b      	b.n	8004b90 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	61f9      	str	r1, [r7, #28]
 8004b82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	09db      	lsrs	r3, r3, #7
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b7f      	cmp	r3, #127	; 0x7f
 8004b94:	d8f0      	bhi.n	8004b78 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	61fa      	str	r2, [r7, #28]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004ba6:	2215      	movs	r2, #21
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	6938      	ldr	r0, [r7, #16]
 8004bac:	f7ff fb38 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f383 8811 	msr	BASEPRI, r3
}
 8004bb6:	bf00      	nop
 8004bb8:	3748      	adds	r7, #72	; 0x48
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20006b94 	.word	0x20006b94
 8004bc4:	20006b64 	.word	0x20006b64

08004bc8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004bde:	4b03      	ldr	r3, [pc, #12]	; (8004bec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4798      	blx	r3
  }
}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20006b64 	.word	0x20006b64

08004bf0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bfc:	f04f 0120 	mov.w	r1, #32
 8004c00:	f381 8811 	msr	BASEPRI, r1
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	480b      	ldr	r0, [pc, #44]	; (8004c34 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c08:	f7ff fa1c 	bl	8004044 <_PreparePacket>
 8004c0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6938      	ldr	r0, [r7, #16]
 8004c14:	f7ff f9e6 	bl	8003fe4 <_EncodeStr>
 8004c18:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c1a:	220e      	movs	r2, #14
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f7ff fafe 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f383 8811 	msr	BASEPRI, r3
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20006b94 	.word	0x20006b94

08004c38 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01a      	beq.n	8004c7c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4798      	blx	r3
 8004c58:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c5c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	000a      	movs	r2, r1
 8004c6c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c6e:	4613      	mov	r3, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4621      	mov	r1, r4
 8004c74:	200d      	movs	r0, #13
 8004c76:	f7ff fcef 	bl	8004658 <SEGGER_SYSVIEW_RecordU32x2>
 8004c7a:	e006      	b.n	8004c8a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	200c      	movs	r0, #12
 8004c84:	f7ff fcac 	bl	80045e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20006b64 	.word	0x20006b64
 8004c98:	e0001004 	.word	0xe0001004

08004c9c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca6:	f04f 0120 	mov.w	r1, #32
 8004caa:	f381 8811 	msr	BASEPRI, r1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	4819      	ldr	r0, [pc, #100]	; (8004d18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004cb2:	f7ff f9c7 	bl	8004044 <_PreparePacket>
 8004cb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e00b      	b.n	8004ce8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	6179      	str	r1, [r7, #20]
 8004cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b7f      	cmp	r3, #127	; 0x7f
 8004cec:	d8f0      	bhi.n	8004cd0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	617a      	str	r2, [r7, #20]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cfe:	2202      	movs	r2, #2
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	68b8      	ldr	r0, [r7, #8]
 8004d04:	f7ff fa8c 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20006b94 	.word	0x20006b94
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d26:	f3ef 8311 	mrs	r3, BASEPRI
 8004d2a:	f04f 0120 	mov.w	r1, #32
 8004d2e:	f381 8811 	msr	BASEPRI, r1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	4807      	ldr	r0, [pc, #28]	; (8004d54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d36:	f7ff f985 	bl	8004044 <_PreparePacket>
 8004d3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	f7ff fa6d 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f383 8811 	msr	BASEPRI, r3
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20006b94 	.word	0x20006b94

08004d58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d62:	f04f 0120 	mov.w	r1, #32
 8004d66:	f381 8811 	msr	BASEPRI, r1
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	4807      	ldr	r0, [pc, #28]	; (8004d8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d6e:	f7ff f969 	bl	8004044 <_PreparePacket>
 8004d72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d74:	2212      	movs	r2, #18
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6838      	ldr	r0, [r7, #0]
 8004d7a:	f7ff fa51 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f383 8811 	msr	BASEPRI, r3
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20006b94 	.word	0x20006b94

08004d90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9a:	f04f 0120 	mov.w	r1, #32
 8004d9e:	f381 8811 	msr	BASEPRI, r1
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004da6:	f7ff f94d 	bl	8004044 <_PreparePacket>
 8004daa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004dac:	2211      	movs	r2, #17
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6838      	ldr	r0, [r7, #0]
 8004db2:	f7ff fa35 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f383 8811 	msr	BASEPRI, r3
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20006b94 	.word	0x20006b94

08004dc8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd4:	f04f 0120 	mov.w	r1, #32
 8004dd8:	f381 8811 	msr	BASEPRI, r1
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	4819      	ldr	r0, [pc, #100]	; (8004e44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004de0:	f7ff f930 	bl	8004044 <_PreparePacket>
 8004de4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	e00b      	b.n	8004e16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	61f9      	str	r1, [r7, #28]
 8004e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	09db      	lsrs	r3, r3, #7
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b7f      	cmp	r3, #127	; 0x7f
 8004e1a:	d8f0      	bhi.n	8004dfe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	61fa      	str	r2, [r7, #28]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f7ff f9f5 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f383 8811 	msr	BASEPRI, r3
}
 8004e3c:	bf00      	nop
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20006b94 	.word	0x20006b94
 8004e48:	20006b64 	.word	0x20006b64

08004e4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e54:	f3ef 8311 	mrs	r3, BASEPRI
 8004e58:	f04f 0120 	mov.w	r1, #32
 8004e5c:	f381 8811 	msr	BASEPRI, r1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	4819      	ldr	r0, [pc, #100]	; (8004ec8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e64:	f7ff f8ee 	bl	8004044 <_PreparePacket>
 8004e68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e6e:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e00b      	b.n	8004e9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	61f9      	str	r1, [r7, #28]
 8004e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9e:	d8f0      	bhi.n	8004e82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	61fa      	str	r2, [r7, #28]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	6938      	ldr	r0, [r7, #16]
 8004eb6:	f7ff f9b3 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f383 8811 	msr	BASEPRI, r3
}
 8004ec0:	bf00      	nop
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20006b94 	.word	0x20006b94
 8004ecc:	20006b64 	.word	0x20006b64

08004ed0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8004edc:	f04f 0120 	mov.w	r1, #32
 8004ee0:	f381 8811 	msr	BASEPRI, r1
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	4819      	ldr	r0, [pc, #100]	; (8004f4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ee8:	f7ff f8ac 	bl	8004044 <_PreparePacket>
 8004eec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	61f9      	str	r1, [r7, #28]
 8004f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	61fa      	str	r2, [r7, #28]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f34:	2206      	movs	r2, #6
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6938      	ldr	r0, [r7, #16]
 8004f3a:	f7ff f971 	bl	8004220 <_SendPacket>
  RECORD_END();
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f383 8811 	msr	BASEPRI, r3
}
 8004f44:	bf00      	nop
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20006b94 	.word	0x20006b94
 8004f50:	20006b64 	.word	0x20006b64

08004f54 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	1ad3      	subs	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20006b64 	.word	0x20006b64

08004f74 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f7e:	4b40      	ldr	r3, [pc, #256]	; (8005080 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d077      	beq.n	8005076 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004f86:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f90:	e008      	b.n	8004fa4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d3f2      	bcc.n	8004f92 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004fac:	e000      	b.n	8004fb0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004fae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d055      	beq.n	8005062 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fba:	f04f 0120 	mov.w	r1, #32
 8004fbe:	f381 8811 	msr	BASEPRI, r1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	482f      	ldr	r0, [pc, #188]	; (8005084 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004fc6:	f7ff f83d 	bl	8004044 <_PreparePacket>
 8004fca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	6279      	str	r1, [r7, #36]	; 0x24
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_SendModule+0x66>
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	e00b      	b.n	800502c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	61f9      	str	r1, [r7, #28]
 800501e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	09db      	lsrs	r3, r3, #7
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b7f      	cmp	r3, #127	; 0x7f
 8005030:	d8f0      	bhi.n	8005014 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	4619      	mov	r1, r3
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7fe ffca 	bl	8003fe4 <_EncodeStr>
 8005050:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005052:	2216      	movs	r2, #22
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f7ff f8e2 	bl	8004220 <_SendPacket>
      RECORD_END();
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <SEGGER_SYSVIEW_SendModule+0x102>
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4798      	blx	r3
    }
  }
}
 8005076:	bf00      	nop
 8005078:	3730      	adds	r7, #48	; 0x30
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20006b8c 	.word	0x20006b8c
 8005084:	20006b94 	.word	0x20006b94

08005088 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00f      	beq.n	80050b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f2      	bne.n	800509c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20006b8c 	.word	0x20006b8c

080050c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050ca:	f3ef 8311 	mrs	r3, BASEPRI
 80050ce:	f04f 0120 	mov.w	r1, #32
 80050d2:	f381 8811 	msr	BASEPRI, r1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	4817      	ldr	r0, [pc, #92]	; (8005138 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050da:	f7fe ffb3 	bl	8004044 <_PreparePacket>
 80050de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e00b      	b.n	8005108 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	6179      	str	r1, [r7, #20]
 80050fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	09db      	lsrs	r3, r3, #7
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b7f      	cmp	r3, #127	; 0x7f
 800510c:	d8f0      	bhi.n	80050f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	617a      	str	r2, [r7, #20]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800511e:	221b      	movs	r2, #27
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7ff f87c 	bl	8004220 <_SendPacket>
  RECORD_END();
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20006b94 	.word	0x20006b94
 800513c:	20006b90 	.word	0x20006b90

08005140 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005148:	f3ef 8311 	mrs	r3, BASEPRI
 800514c:	f04f 0120 	mov.w	r1, #32
 8005150:	f381 8811 	msr	BASEPRI, r1
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	4827      	ldr	r0, [pc, #156]	; (80051f4 <SEGGER_SYSVIEW_Print+0xb4>)
 8005158:	f7fe ff74 	bl	8004044 <_PreparePacket>
 800515c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f7fe ff3e 	bl	8003fe4 <_EncodeStr>
 8005168:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	2300      	movs	r3, #0
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	e00b      	b.n	800518c <SEGGER_SYSVIEW_Print+0x4c>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	6279      	str	r1, [r7, #36]	; 0x24
 800517e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b7f      	cmp	r3, #127	; 0x7f
 8005190:	d8f0      	bhi.n	8005174 <SEGGER_SYSVIEW_Print+0x34>
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	627a      	str	r2, [r7, #36]	; 0x24
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e00b      	b.n	80051c4 <SEGGER_SYSVIEW_Print+0x84>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	61f9      	str	r1, [r7, #28]
 80051b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b7f      	cmp	r3, #127	; 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <SEGGER_SYSVIEW_Print+0x6c>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	61fa      	str	r2, [r7, #28]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051da:	221a      	movs	r2, #26
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	6938      	ldr	r0, [r7, #16]
 80051e0:	f7ff f81e 	bl	8004220 <_SendPacket>
  RECORD_END();
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f383 8811 	msr	BASEPRI, r3
}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20006b94 	.word	0x20006b94

080051f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005200:	f3ef 8311 	mrs	r3, BASEPRI
 8005204:	f04f 0120 	mov.w	r1, #32
 8005208:	f381 8811 	msr	BASEPRI, r1
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	4827      	ldr	r0, [pc, #156]	; (80052ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8005210:	f7fe ff18 	bl	8004044 <_PreparePacket>
 8005214:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f7fe fee2 	bl	8003fe4 <_EncodeStr>
 8005220:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	2301      	movs	r3, #1
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	e00b      	b.n	8005244 <SEGGER_SYSVIEW_Warn+0x4c>
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	6279      	str	r1, [r7, #36]	; 0x24
 8005236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	09db      	lsrs	r3, r3, #7
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b7f      	cmp	r3, #127	; 0x7f
 8005248:	d8f0      	bhi.n	800522c <SEGGER_SYSVIEW_Warn+0x34>
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	627a      	str	r2, [r7, #36]	; 0x24
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	2300      	movs	r3, #0
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e00b      	b.n	800527c <SEGGER_SYSVIEW_Warn+0x84>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1c59      	adds	r1, r3, #1
 800526c:	61f9      	str	r1, [r7, #28]
 800526e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	09db      	lsrs	r3, r3, #7
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b7f      	cmp	r3, #127	; 0x7f
 8005280:	d8f0      	bhi.n	8005264 <SEGGER_SYSVIEW_Warn+0x6c>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	61fa      	str	r2, [r7, #28]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005292:	221a      	movs	r2, #26
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	6938      	ldr	r0, [r7, #16]
 8005298:	f7fe ffc2 	bl	8004220 <_SendPacket>
  RECORD_END();
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f383 8811 	msr	BASEPRI, r3
}
 80052a2:	bf00      	nop
 80052a4:	3728      	adds	r7, #40	; 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20006b94 	.word	0x20006b94

080052b0 <my_main>:
static void MyTask2(void *pvParameters);
static void MyTask3(void *pvParameters);
static void MyTask4(void *pvParameters);
static void MyTask5(void *pvParameters);
static void MyIdleTask(void *pvParameters);
void my_main(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af02      	add	r7, sp, #8

	// Segger System View Configuration
	// 1- Enable  CYCCNT (Cycle Counter Register) for Segger SystemView
	DWT->CTRL |= (1 << 0);
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <my_main+0x68>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <my_main+0x68>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	6013      	str	r3, [r2, #0]

	// 2-  Start Recording
	SEGGER_SYSVIEW_Conf();
 80052c2:	f7fe faf7 	bl	80038b4 <SEGGER_SYSVIEW_Conf>
	vSetVarulMaxPRIGROUPValue();
 80052c6:	f7fd fed5 	bl	8003074 <vSetVarulMaxPRIGROUPValue>
	SEGGER_SYSVIEW_Start();
 80052ca:	f7ff fa1f 	bl	800470c <SEGGER_SYSVIEW_Start>
	SEGGER_SYSVIEW_Print("Hello From Programm. \n"); // some text to check if J_Link RTT Viewer is working
 80052ce:	4813      	ldr	r0, [pc, #76]	; (800531c <my_main+0x6c>)
 80052d0:	f7ff ff36 	bl	8005140 <SEGGER_SYSVIEW_Print>

	//3- Create Tasks	/* Create the 2 tasks with priorities 1 and 3. */
	xTaskCreate((TaskFunction_t) MyTask1, (const char*) "Task1",
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <my_main+0x70>)
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	2301      	movs	r3, #1
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	4910      	ldr	r1, [pc, #64]	; (8005324 <my_main+0x74>)
 80052e2:	4811      	ldr	r0, [pc, #68]	; (8005328 <my_main+0x78>)
 80052e4:	f7fd f949 	bl	800257a <xTaskCreate>
	configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_1);
	xTaskCreate(MyTask3, (const char*) "Task3", configMINIMAL_STACK_SIZE, NULL,
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <my_main+0x7c>)
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2303      	movs	r3, #3
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	490e      	ldr	r1, [pc, #56]	; (8005330 <my_main+0x80>)
 80052f6:	480f      	ldr	r0, [pc, #60]	; (8005334 <my_main+0x84>)
 80052f8:	f7fd f93f 	bl	800257a <xTaskCreate>
			3, &TaskHandle_3);

	xTaskCreate(MyIdleTask, (const char*) "IdleTask", configMINIMAL_STACK_SIZE,
 80052fc:	2300      	movs	r3, #0
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	2300      	movs	r3, #0
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	490b      	ldr	r1, [pc, #44]	; (8005338 <my_main+0x88>)
 800530a:	480c      	ldr	r0, [pc, #48]	; (800533c <my_main+0x8c>)
 800530c:	f7fd f935 	bl	800257a <xTaskCreate>
	NULL, tskIDLE_PRIORITY, NULL);

	vTaskStartScheduler(); /* Start the schedular */
 8005310:	f7fd fb34 	bl	800297c <vTaskStartScheduler>
	while (1) {
 8005314:	e7fe      	b.n	8005314 <my_main+0x64>
 8005316:	bf00      	nop
 8005318:	e0001000 	.word	0xe0001000
 800531c:	08005614 	.word	0x08005614
 8005320:	20006c78 	.word	0x20006c78
 8005324:	0800562c 	.word	0x0800562c
 8005328:	08005341 	.word	0x08005341
 800532c:	20006c80 	.word	0x20006c80
 8005330:	08005634 	.word	0x08005634
 8005334:	08005391 	.word	0x08005391
 8005338:	0800563c 	.word	0x0800563c
 800533c:	08005491 	.word	0x08005491

08005340 <MyTask1>:

	}
}

static void MyTask1(void *pvParameters) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

	SEGGER_SYSVIEW_Print("\n\rIn Task1");
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <MyTask1+0x20>)
 800534a:	f7ff fef9 	bl	8005140 <SEGGER_SYSVIEW_Print>
	vTaskDelete(TaskHandle_1);
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <MyTask1+0x24>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd fa68 	bl	8002828 <vTaskDelete>
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	08005648 	.word	0x08005648
 8005364:	20006c78 	.word	0x20006c78

08005368 <MyTask2>:

static void MyTask2(void *pvParameters) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Print("\n\rIn Task2 ");
 8005370:	4805      	ldr	r0, [pc, #20]	; (8005388 <MyTask2+0x20>)
 8005372:	f7ff fee5 	bl	8005140 <SEGGER_SYSVIEW_Print>
	vTaskDelete(TaskHandle_2);
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <MyTask2+0x24>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd fa54 	bl	8002828 <vTaskDelete>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08005654 	.word	0x08005654
 800538c:	20006c7c 	.word	0x20006c7c

08005390 <MyTask3>:

static void MyTask3(void *pvParameters) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]

	SEGGER_SYSVIEW_Print("\n\rTask3, creating new tasks 2");
 8005398:	481b      	ldr	r0, [pc, #108]	; (8005408 <MyTask3+0x78>)
 800539a:	f7ff fed1 	bl	8005140 <SEGGER_SYSVIEW_Print>

	/* Create two new tasks 2, 4 */
	xTaskCreate(MyTask2, (const char*) "Task2", configMINIMAL_STACK_SIZE, NULL,
 800539e:	4b1b      	ldr	r3, [pc, #108]	; (800540c <MyTask3+0x7c>)
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	2302      	movs	r3, #2
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	4919      	ldr	r1, [pc, #100]	; (8005410 <MyTask3+0x80>)
 80053ac:	4819      	ldr	r0, [pc, #100]	; (8005414 <MyTask3+0x84>)
 80053ae:	f7fd f8e4 	bl	800257a <xTaskCreate>
			2, &TaskHandle_2);
	taskENTER_CRITICAL();
 80053b2:	f7fd ff47 	bl	8003244 <vPortEnterCritical>
	SEGGER_SYSVIEW_Print("\n\rTask3, creating new tasks 4");
 80053b6:	4818      	ldr	r0, [pc, #96]	; (8005418 <MyTask3+0x88>)
 80053b8:	f7ff fec2 	bl	8005140 <SEGGER_SYSVIEW_Print>

	xTaskCreate(MyTask4, (const char*) "Task4", configMINIMAL_STACK_SIZE, NULL,
 80053bc:	4b17      	ldr	r3, [pc, #92]	; (800541c <MyTask3+0x8c>)
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	2304      	movs	r3, #4
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	4915      	ldr	r1, [pc, #84]	; (8005420 <MyTask3+0x90>)
 80053ca:	4816      	ldr	r0, [pc, #88]	; (8005424 <MyTask3+0x94>)
 80053cc:	f7fd f8d5 	bl	800257a <xTaskCreate>
			4, &TaskHandle_4);

	SEGGER_SYSVIEW_Print("\n\rBack in Task3, Creating Task5");
 80053d0:	4815      	ldr	r0, [pc, #84]	; (8005428 <MyTask3+0x98>)
 80053d2:	f7ff feb5 	bl	8005140 <SEGGER_SYSVIEW_Print>

	xTaskCreate(MyTask5, (const char*) "Task5", configMINIMAL_STACK_SIZE, NULL,
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <MyTask3+0x9c>)
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2305      	movs	r3, #5
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	4913      	ldr	r1, [pc, #76]	; (8005430 <MyTask3+0xa0>)
 80053e4:	4813      	ldr	r0, [pc, #76]	; (8005434 <MyTask3+0xa4>)
 80053e6:	f7fd f8c8 	bl	800257a <xTaskCreate>
			5, &TaskHandle_5);
	taskEXIT_CRITICAL();
 80053ea:	f7fd ff5b 	bl	80032a4 <vPortExitCritical>

	SEGGER_SYSVIEW_Print("\n\rBack in Task3, Exiting task3");
 80053ee:	4812      	ldr	r0, [pc, #72]	; (8005438 <MyTask3+0xa8>)
 80053f0:	f7ff fea6 	bl	8005140 <SEGGER_SYSVIEW_Print>

	vTaskDelete(TaskHandle_3);
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <MyTask3+0xac>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fd fa15 	bl	8002828 <vTaskDelete>

}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	08005660 	.word	0x08005660
 800540c:	20006c7c 	.word	0x20006c7c
 8005410:	08005680 	.word	0x08005680
 8005414:	08005369 	.word	0x08005369
 8005418:	08005688 	.word	0x08005688
 800541c:	20006c84 	.word	0x20006c84
 8005420:	080056a8 	.word	0x080056a8
 8005424:	08005441 	.word	0x08005441
 8005428:	080056b0 	.word	0x080056b0
 800542c:	20006c88 	.word	0x20006c88
 8005430:	080056d0 	.word	0x080056d0
 8005434:	08005469 	.word	0x08005469
 8005438:	080056d8 	.word	0x080056d8
 800543c:	20006c80 	.word	0x20006c80

08005440 <MyTask4>:

static void MyTask4(void *pvParameters) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

	SEGGER_SYSVIEW_Print("\n\rIn Task4");
 8005448:	4805      	ldr	r0, [pc, #20]	; (8005460 <MyTask4+0x20>)
 800544a:	f7ff fe79 	bl	8005140 <SEGGER_SYSVIEW_Print>
	vTaskDelete(TaskHandle_4);
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <MyTask4+0x24>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd f9e8 	bl	8002828 <vTaskDelete>
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	080056f8 	.word	0x080056f8
 8005464:	20006c84 	.word	0x20006c84

08005468 <MyTask5>:

static void MyTask5(void *pvParameters) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

	SEGGER_SYSVIEW_Print("\n\rIn Task5");
 8005470:	4805      	ldr	r0, [pc, #20]	; (8005488 <MyTask5+0x20>)
 8005472:	f7ff fe65 	bl	8005140 <SEGGER_SYSVIEW_Print>
	vTaskDelete(TaskHandle_5);
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <MyTask5+0x24>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd f9d4 	bl	8002828 <vTaskDelete>
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	08005704 	.word	0x08005704
 800548c:	20006c88 	.word	0x20006c88

08005490 <MyIdleTask>:

static void MyIdleTask(void *pvParameters) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Print("\n\rIn idle state");
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <MyIdleTask+0x10>)
 800549a:	f7ff fe51 	bl	8005140 <SEGGER_SYSVIEW_Print>
	while (1) {
 800549e:	e7fe      	b.n	800549e <MyIdleTask+0xe>
 80054a0:	08005710 	.word	0x08005710

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	; (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	; (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	; (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 f83e 	bl	8005538 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005768 	.word	0x08005768
 80054e0:	08005768 	.word	0x08005768
 80054e4:	08005768 	.word	0x08005768
 80054e8:	0800576c 	.word	0x0800576c

080054ec <memcmp>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	3901      	subs	r1, #1
 80054f0:	4402      	add	r2, r0
 80054f2:	4290      	cmp	r0, r2
 80054f4:	d101      	bne.n	80054fa <memcmp+0xe>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e005      	b.n	8005506 <memcmp+0x1a>
 80054fa:	7803      	ldrb	r3, [r0, #0]
 80054fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005500:	42a3      	cmp	r3, r4
 8005502:	d001      	beq.n	8005508 <memcmp+0x1c>
 8005504:	1b18      	subs	r0, r3, r4
 8005506:	bd10      	pop	{r4, pc}
 8005508:	3001      	adds	r0, #1
 800550a:	e7f2      	b.n	80054f2 <memcmp+0x6>

0800550c <memcpy>:
 800550c:	440a      	add	r2, r1
 800550e:	4291      	cmp	r1, r2
 8005510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005514:	d100      	bne.n	8005518 <memcpy+0xc>
 8005516:	4770      	bx	lr
 8005518:	b510      	push	{r4, lr}
 800551a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800551e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005522:	4291      	cmp	r1, r2
 8005524:	d1f9      	bne.n	800551a <memcpy+0xe>
 8005526:	bd10      	pop	{r4, pc}

08005528 <memset>:
 8005528:	4402      	add	r2, r0
 800552a:	4603      	mov	r3, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
