
FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005e1c  08005e1c  00015e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f94  08005f94  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f9c  08005f9c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c80  20000014  08005fb8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005c94  08005fb8  00025c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016700  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e73  00000000  00000000  00036744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217e9  00000000  00000000  0003bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016714  00000000  00000000  0005d3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d027e  00000000  00000000  00073ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143d63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  00143db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e04 	.word	0x08005e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005e04 	.word	0x08005e04

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20003ec0 	.word	0x20003ec0

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c8:	f000 b974 	b.w	80005b4 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468e      	mov	lr, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d14d      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f2:	428a      	cmp	r2, r1
 80002f4:	4694      	mov	ip, r2
 80002f6:	d969      	bls.n	80003cc <__udivmoddi4+0xe8>
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	b152      	cbz	r2, 8000314 <__udivmoddi4+0x30>
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	f1c2 0120 	rsb	r1, r2, #32
 8000306:	fa20 f101 	lsr.w	r1, r0, r1
 800030a:	fa0c fc02 	lsl.w	ip, ip, r2
 800030e:	ea41 0e03 	orr.w	lr, r1, r3
 8000312:	4094      	lsls	r4, r2
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	0c21      	lsrs	r1, r4, #16
 800031a:	fbbe f6f8 	udiv	r6, lr, r8
 800031e:	fa1f f78c 	uxth.w	r7, ip
 8000322:	fb08 e316 	mls	r3, r8, r6, lr
 8000326:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800032a:	fb06 f107 	mul.w	r1, r6, r7
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800033a:	f080 811f 	bcs.w	800057c <__udivmoddi4+0x298>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 811c 	bls.w	800057c <__udivmoddi4+0x298>
 8000344:	3e02      	subs	r6, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000350:	fb08 3310 	mls	r3, r8, r0, r3
 8000354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000358:	fb00 f707 	mul.w	r7, r0, r7
 800035c:	42a7      	cmp	r7, r4
 800035e:	d90a      	bls.n	8000376 <__udivmoddi4+0x92>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x29c>
 800036c:	42a7      	cmp	r7, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x29c>
 8000372:	4464      	add	r4, ip
 8000374:	3802      	subs	r0, #2
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	1be4      	subs	r4, r4, r7
 800037c:	2600      	movs	r6, #0
 800037e:	b11d      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 8000380:	40d4      	lsrs	r4, r2
 8000382:	2300      	movs	r3, #0
 8000384:	e9c5 4300 	strd	r4, r3, [r5]
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0xc2>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80ef 	beq.w	8000576 <__udivmoddi4+0x292>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x160>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xd4>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80f9 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0303 	sbc.w	r3, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	469e      	mov	lr, r3
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e0      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ca:	e7dd      	b.n	8000388 <__udivmoddi4+0xa4>
 80003cc:	b902      	cbnz	r2, 80003d0 <__udivmoddi4+0xec>
 80003ce:	deff      	udf	#255	; 0xff
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	f040 8092 	bne.w	80004fe <__udivmoddi4+0x21a>
 80003da:	eba1 010c 	sub.w	r1, r1, ip
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	2601      	movs	r6, #1
 80003e8:	0c20      	lsrs	r0, r4, #16
 80003ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ee:	fb07 1113 	mls	r1, r7, r3, r1
 80003f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f6:	fb0e f003 	mul.w	r0, lr, r3
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x12c>
 80003fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000402:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x12a>
 8000408:	4288      	cmp	r0, r1
 800040a:	f200 80cb 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 800040e:	4643      	mov	r3, r8
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f7 	udiv	r0, r1, r7
 8000418:	fb07 1110 	mls	r1, r7, r0, r1
 800041c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000420:	fb0e fe00 	mul.w	lr, lr, r0
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x156>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x154>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f200 80bb 	bhi.w	80005ae <__udivmoddi4+0x2ca>
 8000438:	4608      	mov	r0, r1
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000442:	e79c      	b.n	800037e <__udivmoddi4+0x9a>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	40b3      	lsls	r3, r6
 800044a:	fa22 fc07 	lsr.w	ip, r2, r7
 800044e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000452:	fa20 f407 	lsr.w	r4, r0, r7
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	431c      	orrs	r4, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000462:	fa00 f306 	lsl.w	r3, r0, r6
 8000466:	fbb1 f8f9 	udiv	r8, r1, r9
 800046a:	0c20      	lsrs	r0, r4, #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fb09 1118 	mls	r1, r9, r8, r1
 8000474:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000478:	fb08 f00e 	mul.w	r0, r8, lr
 800047c:	4288      	cmp	r0, r1
 800047e:	fa02 f206 	lsl.w	r2, r2, r6
 8000482:	d90b      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800048c:	f080 8088 	bcs.w	80005a0 <__udivmoddi4+0x2bc>
 8000490:	4288      	cmp	r0, r1
 8000492:	f240 8085 	bls.w	80005a0 <__udivmoddi4+0x2bc>
 8000496:	f1a8 0802 	sub.w	r8, r8, #2
 800049a:	4461      	add	r1, ip
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a4:	fb09 1110 	mls	r1, r9, r0, r1
 80004a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80004b0:	458e      	cmp	lr, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x1e2>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004bc:	d26c      	bcs.n	8000598 <__udivmoddi4+0x2b4>
 80004be:	458e      	cmp	lr, r1
 80004c0:	d96a      	bls.n	8000598 <__udivmoddi4+0x2b4>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ca:	fba0 9402 	umull	r9, r4, r0, r2
 80004ce:	eba1 010e 	sub.w	r1, r1, lr
 80004d2:	42a1      	cmp	r1, r4
 80004d4:	46c8      	mov	r8, r9
 80004d6:	46a6      	mov	lr, r4
 80004d8:	d356      	bcc.n	8000588 <__udivmoddi4+0x2a4>
 80004da:	d053      	beq.n	8000584 <__udivmoddi4+0x2a0>
 80004dc:	b15d      	cbz	r5, 80004f6 <__udivmoddi4+0x212>
 80004de:	ebb3 0208 	subs.w	r2, r3, r8
 80004e2:	eb61 010e 	sbc.w	r1, r1, lr
 80004e6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ea:	fa22 f306 	lsr.w	r3, r2, r6
 80004ee:	40f1      	lsrs	r1, r6
 80004f0:	431f      	orrs	r7, r3
 80004f2:	e9c5 7100 	strd	r7, r1, [r5]
 80004f6:	2600      	movs	r6, #0
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	40d8      	lsrs	r0, r3
 8000504:	fa0c fc02 	lsl.w	ip, ip, r2
 8000508:	fa21 f303 	lsr.w	r3, r1, r3
 800050c:	4091      	lsls	r1, r2
 800050e:	4301      	orrs	r1, r0
 8000510:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000514:	fa1f fe8c 	uxth.w	lr, ip
 8000518:	fbb3 f0f7 	udiv	r0, r3, r7
 800051c:	fb07 3610 	mls	r6, r7, r0, r3
 8000520:	0c0b      	lsrs	r3, r1, #16
 8000522:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000526:	fb00 f60e 	mul.w	r6, r0, lr
 800052a:	429e      	cmp	r6, r3
 800052c:	fa04 f402 	lsl.w	r4, r4, r2
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x260>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053a:	d22f      	bcs.n	800059c <__udivmoddi4+0x2b8>
 800053c:	429e      	cmp	r6, r3
 800053e:	d92d      	bls.n	800059c <__udivmoddi4+0x2b8>
 8000540:	3802      	subs	r0, #2
 8000542:	4463      	add	r3, ip
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb3 f6f7 	udiv	r6, r3, r7
 800054c:	fb07 3316 	mls	r3, r7, r6, r3
 8000550:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000554:	fb06 f30e 	mul.w	r3, r6, lr
 8000558:	428b      	cmp	r3, r1
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x28a>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000564:	d216      	bcs.n	8000594 <__udivmoddi4+0x2b0>
 8000566:	428b      	cmp	r3, r1
 8000568:	d914      	bls.n	8000594 <__udivmoddi4+0x2b0>
 800056a:	3e02      	subs	r6, #2
 800056c:	4461      	add	r1, ip
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000574:	e738      	b.n	80003e8 <__udivmoddi4+0x104>
 8000576:	462e      	mov	r6, r5
 8000578:	4628      	mov	r0, r5
 800057a:	e705      	b.n	8000388 <__udivmoddi4+0xa4>
 800057c:	4606      	mov	r6, r0
 800057e:	e6e3      	b.n	8000348 <__udivmoddi4+0x64>
 8000580:	4618      	mov	r0, r3
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x92>
 8000584:	454b      	cmp	r3, r9
 8000586:	d2a9      	bcs.n	80004dc <__udivmoddi4+0x1f8>
 8000588:	ebb9 0802 	subs.w	r8, r9, r2
 800058c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000590:	3801      	subs	r0, #1
 8000592:	e7a3      	b.n	80004dc <__udivmoddi4+0x1f8>
 8000594:	4646      	mov	r6, r8
 8000596:	e7ea      	b.n	800056e <__udivmoddi4+0x28a>
 8000598:	4620      	mov	r0, r4
 800059a:	e794      	b.n	80004c6 <__udivmoddi4+0x1e2>
 800059c:	4640      	mov	r0, r8
 800059e:	e7d1      	b.n	8000544 <__udivmoddi4+0x260>
 80005a0:	46d0      	mov	r8, sl
 80005a2:	e77b      	b.n	800049c <__udivmoddi4+0x1b8>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	e732      	b.n	8000410 <__udivmoddi4+0x12c>
 80005aa:	4630      	mov	r0, r6
 80005ac:	e709      	b.n	80003c2 <__udivmoddi4+0xde>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e742      	b.n	800043a <__udivmoddi4+0x156>

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005be:	f000 facf 	bl	8000b60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c2:	f000 f83b 	bl	800063c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c6:	f000 f8cd 	bl	8000764 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ca:	f000 f8a1 	bl	8000710 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Segger System View Configuration
	// 1- Enable  CYCCNT (Cycle Counter Register) for Segger SystemView
	DWT->CTRL |= (1 << 0);
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <main+0x64>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <main+0x64>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6013      	str	r3, [r2, #0]
	// 2 - Start Recording
	SEGGER_SYSVIEW_Conf();
 80005da:	f003 fac3 	bl	8003b64 <SEGGER_SYSVIEW_Conf>
	vSetVarulMaxPRIGROUPValue();
 80005de:	f002 fea1 	bl	8003324 <vSetVarulMaxPRIGROUPValue>
	SEGGER_SYSVIEW_Start();
 80005e2:	f004 fdff 	bl	80051e4 <SEGGER_SYSVIEW_Start>
	SEGGER_RTT_printf(0, "%sHello From Programm. \n"); // some text to check if J_Link RTT Viewer is working
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0x68>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f004 fa4f 	bl	8004a8c <SEGGER_RTT_printf>
	// Create Tasks

	xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2,
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <main+0x6c>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	490b      	ldr	r1, [pc, #44]	; (8000628 <main+0x70>)
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x74>)
 80005fe:	f002 f87b 	bl	80026f8 <xTaskCreate>
			&xTaskHander1);
	xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2,
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <main+0x78>)
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <main+0x7c>)
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <main+0x80>)
 8000612:	f002 f871 	bl	80026f8 <xTaskCreate>
			&xTaskHander2);

	// Start the Sceduler
	vTaskStartScheduler();
 8000616:	f002 fa81 	bl	8002b1c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800061a:	e7fe      	b.n	800061a <main+0x62>
 800061c:	e0001000 	.word	0xe0001000
 8000620:	08005e1c 	.word	0x08005e1c
 8000624:	20000030 	.word	0x20000030
 8000628:	08005e38 	.word	0x08005e38
 800062c:	08000805 	.word	0x08000805
 8000630:	20000034 	.word	0x20000034
 8000634:	08005e40 	.word	0x08005e40
 8000638:	08000859 	.word	0x08000859

0800063c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fbd2 	bl	8005df4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 ff6f 	bl	80015a8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
		Error_Handler();
 80006d0:	f000 f8f8 	bl	80008c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2103      	movs	r1, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd07 	bl	8001104 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc4>
		Error_Handler();
 80006fc:	f000 f8e2 	bl	80008c4 <Error_Handler>
	}
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fc60 	bl	800200c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000752:	f000 f8b7 	bl	80008c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000038 	.word	0x20000038
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0x98>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0x98>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0x98>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0x98>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_GPIO_Init+0x98>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <MX_GPIO_Init+0x98>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_GPIO_Init+0x98>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LDG_Pin | LDO_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2103      	movs	r1, #3
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0x9c>)
 80007d4:	f000 fc7c 	bl	80010d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LDG_Pin LDO_Pin */
	GPIO_InitStruct.Pin = LDG_Pin | LDO_Pin;
 80007d8:	2303      	movs	r3, #3
 80007da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0x9c>)
 80007f0:	f000 fada 	bl	8000da8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40021000 	.word	0x40021000

08000804 <vTask1_handler>:

/* USER CODE BEGIN 4 */
void vTask1_handler() {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	 SEGGER_RTT_WriteString(0, "Hello from task A!\n");
 800080a:	4910      	ldr	r1, [pc, #64]	; (800084c <vTask1_handler+0x48>)
 800080c:	2000      	movs	r0, #0
 800080e:	f003 fcf3 	bl	80041f8 <SEGGER_RTT_WriteString>
	uint32_t xLastWakeTime = xTaskGetTickCount();
 8000812:	f002 fa8d 	bl	8002d30 <xTaskGetTickCount>
 8000816:	4603      	mov	r3, r0
 8000818:	607b      	str	r3, [r7, #4]
	while (1) {
		GPIO_toggle(LDO);
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <vTask1_handler+0x4c>)
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <vTask1_handler+0x2a>
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <vTask1_handler+0x4c>)
 8000828:	2202      	movs	r2, #2
 800082a:	619a      	str	r2, [r3, #24]
 800082c:	e003      	b.n	8000836 <vTask1_handler+0x32>
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <vTask1_handler+0x4c>)
 8000830:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000834:	619a      	str	r2, [r3, #24]
		SEGGER_RTT_WriteString(0, "task 1\n");
 8000836:	4907      	ldr	r1, [pc, #28]	; (8000854 <vTask1_handler+0x50>)
 8000838:	2000      	movs	r0, #0
 800083a:	f003 fcdd 	bl	80041f8 <SEGGER_RTT_WriteString>
		vTaskDelayUntil(&xLastWakeTime, 3000);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000844:	4618      	mov	r0, r3
 8000846:	f002 f8af 	bl	80029a8 <xTaskDelayUntil>
		GPIO_toggle(LDO);
 800084a:	e7e6      	b.n	800081a <vTask1_handler+0x16>
 800084c:	08005e48 	.word	0x08005e48
 8000850:	40021000 	.word	0x40021000
 8000854:	08005e5c 	.word	0x08005e5c

08000858 <vTask2_handler>:
		//vTaskDelay(1000);

	}
}

void vTask2_handler() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	 SEGGER_RTT_WriteString(0, "Hello from task B!\n");
 800085c:	490d      	ldr	r1, [pc, #52]	; (8000894 <vTask2_handler+0x3c>)
 800085e:	2000      	movs	r0, #0
 8000860:	f003 fcca 	bl	80041f8 <SEGGER_RTT_WriteString>
	while (1) {
		GPIO_toggle(LDG);
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <vTask2_handler+0x40>)
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d103      	bne.n	8000878 <vTask2_handler+0x20>
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <vTask2_handler+0x40>)
 8000872:	2201      	movs	r2, #1
 8000874:	619a      	str	r2, [r3, #24]
 8000876:	e003      	b.n	8000880 <vTask2_handler+0x28>
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <vTask2_handler+0x40>)
 800087a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087e:	619a      	str	r2, [r3, #24]
        SEGGER_RTT_WriteString(0, "task 2\n");
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <vTask2_handler+0x44>)
 8000882:	2000      	movs	r0, #0
 8000884:	f003 fcb8 	bl	80041f8 <SEGGER_RTT_WriteString>
		vTaskDelay(3000);
 8000888:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800088c:	f002 f90e 	bl	8002aac <vTaskDelay>
		GPIO_toggle(LDG);
 8000890:	e7e8      	b.n	8000864 <vTask2_handler+0xc>
 8000892:	bf00      	nop
 8000894:	08005e64 	.word	0x08005e64
 8000898:	40021000 	.word	0x40021000
 800089c:	08005e78 	.word	0x08005e78

080008a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008b2:	f000 f977 	bl	8000ba4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40002000 	.word	0x40002000

080008c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x88>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097a:	230c      	movs	r3, #12
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x8c>)
 8000996:	f000 fa07 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_InitTick+0xe4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <HAL_InitTick+0xe4>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 0210 	add.w	r2, r7, #16
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fdac 	bl	8001544 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f6:	f000 fd7d 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 80009fa:	6378      	str	r0, [r7, #52]	; 0x34
 80009fc:	e004      	b.n	8000a08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fe:	f000 fd79 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8000a02:	4603      	mov	r3, r0
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <HAL_InitTick+0xe8>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	0c9b      	lsrs	r3, r3, #18
 8000a12:	3b01      	subs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <HAL_InitTick+0xec>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <HAL_InitTick+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_InitTick+0xec>)
 8000a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a22:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_InitTick+0xec>)
 8000a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a28:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_InitTick+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_InitTick+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <HAL_InitTick+0xec>)
 8000a3e:	f001 f837 	bl	8001ab0 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d11b      	bne.n	8000a88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_InitTick+0xec>)
 8000a52:	f001 f887 	bl	8001b64 <HAL_TIM_Base_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d111      	bne.n	8000a88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a64:	202d      	movs	r0, #45	; 0x2d
 8000a66:	f000 f991 	bl	8000d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d808      	bhi.n	8000a82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	202d      	movs	r0, #45	; 0x2d
 8000a76:	f000 f96d 	bl	8000d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_InitTick+0xf4>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e002      	b.n	8000a88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3738      	adds	r7, #56	; 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	2000007c 	.word	0x2000007c
 8000aa0:	40002000 	.word	0x40002000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ada:	f001 f8b3 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000007c 	.word	0x2000007c

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f005 f919 	bl	8005d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fd3b 	bl	80005b8 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b44:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b50:	08005fa4 	.word	0x08005fa4
  ldr r2, =_sbss
 8000b54:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b58:	20005c94 	.word	0x20005c94

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f8d8 	bl	8000d3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f7ff ff0e 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fe9c 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200000c4 	.word	0x200000c4

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000c4 	.word	0x200000c4

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff4c 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d66:	f7ff ff61 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	68b9      	ldr	r1, [r7, #8]
 8000d70:	6978      	ldr	r0, [r7, #20]
 8000d72:	f7ff ffb1 	bl	8000cd8 <NVIC_EncodePriority>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff80 	bl	8000c84 <__NVIC_SetPriority>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff54 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e165      	b.n	8001090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8154 	bne.w	800108a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80ae 	beq.w	800108a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a5c      	ldr	r2, [pc, #368]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4a:	4a58      	ldr	r2, [pc, #352]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x308>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x21a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x30c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x216>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x310>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x212>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x314>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x20e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x318>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x20a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x31c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x206>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x320>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x202>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x21c>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <HAL_GPIO_Init+0x324>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a31      	ldr	r2, [pc, #196]	; (80010cc <HAL_GPIO_Init+0x324>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_GPIO_Init+0x324>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_GPIO_Init+0x324>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_GPIO_Init+0x324>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_GPIO_Init+0x324>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_GPIO_Init+0x324>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_GPIO_Init+0x324>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae96 	bls.w	8000dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0cc      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d90c      	bls.n	8001140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d044      	beq.n	8001224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e067      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 0203 	bic.w	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fcea 	bl	8000bcc <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff fce6 	bl	8000bcc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e04f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 020c 	and.w	r2, r3, #12
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d1eb      	bne.n	80011fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20c      	bcs.n	800124c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f821 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb80 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	08005f44 	.word	0x08005f44
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d4:	b094      	sub	sp, #80	; 0x50
 80012d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
 80012dc:	2300      	movs	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e8:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d00d      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x40>
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	f200 80e1 	bhi.w	80014bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x34>
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d003      	beq.n	800130a <HAL_RCC_GetSysClockFreq+0x3a>
 8001302:	e0db      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001308:	e0db      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800130a:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800130e:	e0d8      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001310:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001326:	4b6a      	ldr	r3, [pc, #424]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	2200      	movs	r2, #0
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
 800133e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001342:	4622      	mov	r2, r4
 8001344:	462b      	mov	r3, r5
 8001346:	f04f 0000 	mov.w	r0, #0
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	0159      	lsls	r1, r3, #5
 8001350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001354:	0150      	lsls	r0, r2, #5
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4621      	mov	r1, r4
 800135c:	1a51      	subs	r1, r2, r1
 800135e:	6139      	str	r1, [r7, #16]
 8001360:	4629      	mov	r1, r5
 8001362:	eb63 0301 	sbc.w	r3, r3, r1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001374:	4659      	mov	r1, fp
 8001376:	018b      	lsls	r3, r1, #6
 8001378:	4651      	mov	r1, sl
 800137a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800137e:	4651      	mov	r1, sl
 8001380:	018a      	lsls	r2, r1, #6
 8001382:	4651      	mov	r1, sl
 8001384:	ebb2 0801 	subs.w	r8, r2, r1
 8001388:	4659      	mov	r1, fp
 800138a:	eb63 0901 	sbc.w	r9, r3, r1
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800139a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800139e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013a2:	4690      	mov	r8, r2
 80013a4:	4699      	mov	r9, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	eb18 0303 	adds.w	r3, r8, r3
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	462b      	mov	r3, r5
 80013b0:	eb49 0303 	adc.w	r3, r9, r3
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013c2:	4629      	mov	r1, r5
 80013c4:	024b      	lsls	r3, r1, #9
 80013c6:	4621      	mov	r1, r4
 80013c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013cc:	4621      	mov	r1, r4
 80013ce:	024a      	lsls	r2, r1, #9
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d6:	2200      	movs	r2, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e0:	f7fe ff68 	bl	80002b4 <__aeabi_uldivmod>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4613      	mov	r3, r2
 80013ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ec:	e058      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	2200      	movs	r2, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	4611      	mov	r1, r2
 80013fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
 8001404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001408:	4642      	mov	r2, r8
 800140a:	464b      	mov	r3, r9
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	0159      	lsls	r1, r3, #5
 8001416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800141a:	0150      	lsls	r0, r2, #5
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4641      	mov	r1, r8
 8001422:	ebb2 0a01 	subs.w	sl, r2, r1
 8001426:	4649      	mov	r1, r9
 8001428:	eb63 0b01 	sbc.w	fp, r3, r1
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800143c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001440:	ebb2 040a 	subs.w	r4, r2, sl
 8001444:	eb63 050b 	sbc.w	r5, r3, fp
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	00eb      	lsls	r3, r5, #3
 8001452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001456:	00e2      	lsls	r2, r4, #3
 8001458:	4614      	mov	r4, r2
 800145a:	461d      	mov	r5, r3
 800145c:	4643      	mov	r3, r8
 800145e:	18e3      	adds	r3, r4, r3
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	464b      	mov	r3, r9
 8001464:	eb45 0303 	adc.w	r3, r5, r3
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001476:	4629      	mov	r1, r5
 8001478:	028b      	lsls	r3, r1, #10
 800147a:	4621      	mov	r1, r4
 800147c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001480:	4621      	mov	r1, r4
 8001482:	028a      	lsls	r2, r1, #10
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	2200      	movs	r2, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	61fa      	str	r2, [r7, #28]
 8001490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001494:	f7fe ff0e 	bl	80002b4 <__aeabi_uldivmod>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4613      	mov	r3, r2
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	3301      	adds	r3, #1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80014be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3750      	adds	r7, #80	; 0x50
 80014c8:	46bd      	mov	sp, r7
 80014ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	00f42400 	.word	0x00f42400
 80014d8:	007a1200 	.word	0x007a1200

080014dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014f8:	f7ff fff0 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4903      	ldr	r1, [pc, #12]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800150a:	5ccb      	ldrb	r3, [r1, r3]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	08005f54 	.word	0x08005f54

0800151c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001520:	f7ff ffdc 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0b5b      	lsrs	r3, r3, #13
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	4903      	ldr	r1, [pc, #12]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	08005f54 	.word	0x08005f54

08001544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	220f      	movs	r2, #15
 8001552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_RCC_GetClockConfig+0x60>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0207 	and.w	r2, r3, #7
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e273      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d00c      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b82      	ldr	r3, [pc, #520]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e24e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a75      	ldr	r2, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6f      	ldr	r2, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6c      	ldr	r2, [pc, #432]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a65      	ldr	r2, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fab4 	bl	8000bcc <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fab0 	bl	8000bcc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e213      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff faa0 	bl	8000bcc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fa9c 	bl	8000bcc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1ff      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1d3      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x244>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fa55 	bl	8000bcc <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fa51 	bl	8000bcc <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1b4      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x244>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa34 	bl	8000bcc <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fa30 	bl	8000bcc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e193      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d036      	beq.n	8001800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x248>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fa14 	bl	8000bcc <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fa10 	bl	8000bcc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e173      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
 80017c6:	e01b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_OscConfig+0x248>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f9fd 	bl	8000bcc <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e00e      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff f9f9 	bl	8000bcc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d907      	bls.n	80017f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e15c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	42470000 	.word	0x42470000
 80017f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b8a      	ldr	r3, [pc, #552]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ea      	bne.n	80017d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8097 	beq.w	800193c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b83      	ldr	r3, [pc, #524]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <HAL_RCC_OscConfig+0x47c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x47c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x47c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff f9b9 	bl	8000bcc <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff f9b5 	bl	8000bcc <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e118      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x47c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x2ea>
 8001884:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a65      	ldr	r2, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e01c      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x30c>
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0x324>
 80018b4:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a59      	ldr	r2, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d015      	beq.n	8001900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff f97a 	bl	8000bcc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff f976 	bl	8000bcc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0d7      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0ee      	beq.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff f964 	bl	8000bcc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff f960 	bl	8000bcc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0c1      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ee      	bne.n	8001908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80ad 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d060      	beq.n	8001a14 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d145      	bne.n	80019e6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_RCC_OscConfig+0x480>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f934 	bl	8000bcc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f930 	bl	8000bcc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e093      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	071b      	lsls	r3, r3, #28
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x480>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f905 	bl	8000bcc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f901 	bl	8000bcc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e064      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x41e>
 80019e4:	e05c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x480>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8ee 	bl	8000bcc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f8ea 	bl	8000bcc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e04d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x478>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x44c>
 8001a12:	e045      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e040      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d129      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d122      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d119      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d10f      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f839 	bl	8001b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 f9d8 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d001      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e04e      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba6:	d01d      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d010      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010400 	.word	0x40010400
 8001c3c:	40014000 	.word	0x40014000
 8001c40:	40001800 	.word	0x40001800

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0202 	mvn.w	r2, #2
 8001c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ee 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e0 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8f1 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c4 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8b6 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8c7 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0208 	mvn.w	r2, #8
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f89a 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f88c 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f89d 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f870 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f862 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f873 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0201 	mvn.w	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fd6c 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f902 	bl	8001ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f838 	bl	8001e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8cc 	bl	8001fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <TIM_Base_SetConfig+0x118>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <TIM_Base_SetConfig+0x11c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <TIM_Base_SetConfig+0x120>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d027      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <TIM_Base_SetConfig+0x118>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d023      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <TIM_Base_SetConfig+0x11c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <TIM_Base_SetConfig+0x120>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d017      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <TIM_Base_SetConfig+0x128>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <TIM_Base_SetConfig+0x12c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <TIM_Base_SetConfig+0x130>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <TIM_Base_SetConfig+0x134>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <TIM_Base_SetConfig+0x138>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <TIM_Base_SetConfig+0x13c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0xf8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40010400 	.word	0x40010400
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	40014400 	.word	0x40014400
 8001fd4:	40014800 	.word	0x40014800
 8001fd8:	40001800 	.word	0x40001800
 8001fdc:	40001c00 	.word	0x40001c00
 8001fe0:	40002000 	.word	0x40002000

08001fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e03f      	b.n	800209e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fc74 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	; 0x24
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f829 	bl	80020a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b0c0      	sub	sp, #256	; 0x100
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	ea40 0301 	orr.w	r3, r0, r1
 80020d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	431a      	orrs	r2, r3
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002100:	f021 010c 	bic.w	r1, r1, #12
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800210e:	430b      	orrs	r3, r1
 8002110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002122:	6999      	ldr	r1, [r3, #24]
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	ea40 0301 	orr.w	r3, r0, r1
 800212e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <UART_SetConfig+0x2cc>)
 8002138:	429a      	cmp	r2, r3
 800213a:	d005      	beq.n	8002148 <UART_SetConfig+0xa0>
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b8d      	ldr	r3, [pc, #564]	; (8002378 <UART_SetConfig+0x2d0>)
 8002144:	429a      	cmp	r2, r3
 8002146:	d104      	bne.n	8002152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002148:	f7ff f9e8 	bl	800151c <HAL_RCC_GetPCLK2Freq>
 800214c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002150:	e003      	b.n	800215a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002152:	f7ff f9cf 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8002156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002164:	f040 810c 	bne.w	8002380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800216c:	2200      	movs	r2, #0
 800216e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800217a:	4622      	mov	r2, r4
 800217c:	462b      	mov	r3, r5
 800217e:	1891      	adds	r1, r2, r2
 8002180:	65b9      	str	r1, [r7, #88]	; 0x58
 8002182:	415b      	adcs	r3, r3
 8002184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800218a:	4621      	mov	r1, r4
 800218c:	eb12 0801 	adds.w	r8, r2, r1
 8002190:	4629      	mov	r1, r5
 8002192:	eb43 0901 	adc.w	r9, r3, r1
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021aa:	4690      	mov	r8, r2
 80021ac:	4699      	mov	r9, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	eb18 0303 	adds.w	r3, r8, r3
 80021b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021b8:	462b      	mov	r3, r5
 80021ba:	eb49 0303 	adc.w	r3, r9, r3
 80021be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021d6:	460b      	mov	r3, r1
 80021d8:	18db      	adds	r3, r3, r3
 80021da:	653b      	str	r3, [r7, #80]	; 0x50
 80021dc:	4613      	mov	r3, r2
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	657b      	str	r3, [r7, #84]	; 0x54
 80021e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021ec:	f7fe f862 	bl	80002b4 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <UART_SetConfig+0x2d4>)
 80021f6:	fba3 2302 	umull	r2, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	011c      	lsls	r4, r3, #4
 80021fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800220c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002210:	4642      	mov	r2, r8
 8002212:	464b      	mov	r3, r9
 8002214:	1891      	adds	r1, r2, r2
 8002216:	64b9      	str	r1, [r7, #72]	; 0x48
 8002218:	415b      	adcs	r3, r3
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800221c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002220:	4641      	mov	r1, r8
 8002222:	eb12 0a01 	adds.w	sl, r2, r1
 8002226:	4649      	mov	r1, r9
 8002228:	eb43 0b01 	adc.w	fp, r3, r1
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800223c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002240:	4692      	mov	sl, r2
 8002242:	469b      	mov	fp, r3
 8002244:	4643      	mov	r3, r8
 8002246:	eb1a 0303 	adds.w	r3, sl, r3
 800224a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800224e:	464b      	mov	r3, r9
 8002250:	eb4b 0303 	adc.w	r3, fp, r3
 8002254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800226c:	460b      	mov	r3, r1
 800226e:	18db      	adds	r3, r3, r3
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
 8002272:	4613      	mov	r3, r2
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
 800227a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800227e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002282:	f7fe f817 	bl	80002b4 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4611      	mov	r1, r2
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <UART_SetConfig+0x2d4>)
 800228e:	fba3 2301 	umull	r2, r3, r3, r1
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2264      	movs	r2, #100	; 0x64
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	1acb      	subs	r3, r1, r3
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <UART_SetConfig+0x2d4>)
 80022a4:	fba3 2302 	umull	r2, r3, r3, r2
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b0:	441c      	add	r4, r3
 80022b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	1891      	adds	r1, r2, r2
 80022ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80022cc:	415b      	adcs	r3, r3
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022d4:	4641      	mov	r1, r8
 80022d6:	1851      	adds	r1, r2, r1
 80022d8:	6339      	str	r1, [r7, #48]	; 0x30
 80022da:	4649      	mov	r1, r9
 80022dc:	414b      	adcs	r3, r1
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022ec:	4659      	mov	r1, fp
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4651      	mov	r1, sl
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4642      	mov	r2, r8
 8002302:	189b      	adds	r3, r3, r2
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002308:	464b      	mov	r3, r9
 800230a:	460a      	mov	r2, r1
 800230c:	eb42 0303 	adc.w	r3, r2, r3
 8002310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002328:	460b      	mov	r3, r1
 800232a:	18db      	adds	r3, r3, r3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
 800232e:	4613      	mov	r3, r2
 8002330:	eb42 0303 	adc.w	r3, r2, r3
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800233e:	f7fd ffb9 	bl	80002b4 <__aeabi_uldivmod>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <UART_SetConfig+0x2d4>)
 8002348:	fba3 1302 	umull	r1, r3, r3, r2
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2164      	movs	r1, #100	; 0x64
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	3332      	adds	r3, #50	; 0x32
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <UART_SetConfig+0x2d4>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4422      	add	r2, r4
 800236e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002370:	e105      	b.n	800257e <UART_SetConfig+0x4d6>
 8002372:	bf00      	nop
 8002374:	40011000 	.word	0x40011000
 8002378:	40011400 	.word	0x40011400
 800237c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800238a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800238e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002392:	4642      	mov	r2, r8
 8002394:	464b      	mov	r3, r9
 8002396:	1891      	adds	r1, r2, r2
 8002398:	6239      	str	r1, [r7, #32]
 800239a:	415b      	adcs	r3, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a2:	4641      	mov	r1, r8
 80023a4:	1854      	adds	r4, r2, r1
 80023a6:	4649      	mov	r1, r9
 80023a8:	eb43 0501 	adc.w	r5, r3, r1
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	00eb      	lsls	r3, r5, #3
 80023b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ba:	00e2      	lsls	r2, r4, #3
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	4643      	mov	r3, r8
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023c8:	464b      	mov	r3, r9
 80023ca:	eb45 0303 	adc.w	r3, r5, r3
 80023ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023ee:	4629      	mov	r1, r5
 80023f0:	008b      	lsls	r3, r1, #2
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f8:	4621      	mov	r1, r4
 80023fa:	008a      	lsls	r2, r1, #2
 80023fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002400:	f7fd ff58 	bl	80002b4 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4b60      	ldr	r3, [pc, #384]	; (800258c <UART_SetConfig+0x4e4>)
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	011c      	lsls	r4, r3, #4
 8002412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800241c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	1891      	adds	r1, r2, r2
 800242a:	61b9      	str	r1, [r7, #24]
 800242c:	415b      	adcs	r3, r3
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002434:	4641      	mov	r1, r8
 8002436:	1851      	adds	r1, r2, r1
 8002438:	6139      	str	r1, [r7, #16]
 800243a:	4649      	mov	r1, r9
 800243c:	414b      	adcs	r3, r1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800244c:	4659      	mov	r1, fp
 800244e:	00cb      	lsls	r3, r1, #3
 8002450:	4651      	mov	r1, sl
 8002452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002456:	4651      	mov	r1, sl
 8002458:	00ca      	lsls	r2, r1, #3
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	4603      	mov	r3, r0
 8002460:	4642      	mov	r2, r8
 8002462:	189b      	adds	r3, r3, r2
 8002464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002468:	464b      	mov	r3, r9
 800246a:	460a      	mov	r2, r1
 800246c:	eb42 0303 	adc.w	r3, r2, r3
 8002470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	67bb      	str	r3, [r7, #120]	; 0x78
 800247e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800248c:	4649      	mov	r1, r9
 800248e:	008b      	lsls	r3, r1, #2
 8002490:	4641      	mov	r1, r8
 8002492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002496:	4641      	mov	r1, r8
 8002498:	008a      	lsls	r2, r1, #2
 800249a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800249e:	f7fd ff09 	bl	80002b4 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <UART_SetConfig+0x4e4>)
 80024a8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	2164      	movs	r1, #100	; 0x64
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	3332      	adds	r3, #50	; 0x32
 80024ba:	4a34      	ldr	r2, [pc, #208]	; (800258c <UART_SetConfig+0x4e4>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c6:	441c      	add	r4, r3
 80024c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024cc:	2200      	movs	r2, #0
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
 80024d0:	677a      	str	r2, [r7, #116]	; 0x74
 80024d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024d6:	4642      	mov	r2, r8
 80024d8:	464b      	mov	r3, r9
 80024da:	1891      	adds	r1, r2, r2
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	415b      	adcs	r3, r3
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e6:	4641      	mov	r1, r8
 80024e8:	1851      	adds	r1, r2, r1
 80024ea:	6039      	str	r1, [r7, #0]
 80024ec:	4649      	mov	r1, r9
 80024ee:	414b      	adcs	r3, r1
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024fe:	4659      	mov	r1, fp
 8002500:	00cb      	lsls	r3, r1, #3
 8002502:	4651      	mov	r1, sl
 8002504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002508:	4651      	mov	r1, sl
 800250a:	00ca      	lsls	r2, r1, #3
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	4603      	mov	r3, r0
 8002512:	4642      	mov	r2, r8
 8002514:	189b      	adds	r3, r3, r2
 8002516:	66bb      	str	r3, [r7, #104]	; 0x68
 8002518:	464b      	mov	r3, r9
 800251a:	460a      	mov	r2, r1
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	663b      	str	r3, [r7, #96]	; 0x60
 800252c:	667a      	str	r2, [r7, #100]	; 0x64
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800253a:	4649      	mov	r1, r9
 800253c:	008b      	lsls	r3, r1, #2
 800253e:	4641      	mov	r1, r8
 8002540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002544:	4641      	mov	r1, r8
 8002546:	008a      	lsls	r2, r1, #2
 8002548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800254c:	f7fd feb2 	bl	80002b4 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <UART_SetConfig+0x4e4>)
 8002556:	fba3 1302 	umull	r1, r3, r3, r2
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2164      	movs	r1, #100	; 0x64
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	3332      	adds	r3, #50	; 0x32
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <UART_SetConfig+0x4e4>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4422      	add	r2, r4
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	bf00      	nop
 8002580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258a:	bf00      	nop
 800258c:	51eb851f 	.word	0x51eb851f

08002590 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002648:	d103      	bne.n	8002652 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e00c      	b.n	800266c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3308      	adds	r3, #8
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <vListInsert+0x2e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d2f6      	bcs.n	800265a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6892      	ldr	r2, [r2, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d103      	bne.n	80026d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f001 f81d 	bl	800374c <pvPortMalloc>
 8002712:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00e      	beq.n	8002738 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800271a:	2054      	movs	r0, #84	; 0x54
 800271c:	f001 f816 	bl	800374c <pvPortMalloc>
 8002720:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e005      	b.n	800273c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f001 f8eb 	bl	800390c <vPortFree>
 8002736:	e001      	b.n	800273c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d013      	beq.n	800276a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	2300      	movs	r3, #0
 8002746:	9303      	str	r3, [sp, #12]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f80e 	bl	800277a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800275e:	69f8      	ldr	r0, [r7, #28]
 8002760:	f000 f89a 	bl	8002898 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002764:	2301      	movs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e002      	b.n	8002770 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002770:	69bb      	ldr	r3, [r7, #24]
    }
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002792:	3b01      	subs	r3, #1
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f023 0307 	bic.w	r3, r3, #7
 80027a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01f      	beq.n	8002808 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	e012      	b.n	80027f4 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	7819      	ldrb	r1, [r3, #0]
 80027d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	3334      	adds	r3, #52	; 0x34
 80027de:	460a      	mov	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	d9e9      	bls.n	80027ce <prvInitialiseNewTask+0x54>
 80027fa:	e000      	b.n	80027fe <prvInitialiseNewTask+0x84>
            {
                break;
 80027fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002806:	e003      	b.n	8002810 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	2b06      	cmp	r3, #6
 8002814:	d901      	bls.n	800281a <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002816:	2306      	movs	r3, #6
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	2200      	movs	r2, #0
 800282a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	3304      	adds	r3, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fecd 	bl	80025d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	3318      	adds	r3, #24
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fec8 	bl	80025d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002844:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	f1c3 0207 	rsb	r2, r3, #7
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	334c      	adds	r3, #76	; 0x4c
 800285a:	2204      	movs	r2, #4
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fac8 	bl	8005df4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	3350      	adds	r3, #80	; 0x50
 8002868:	2201      	movs	r2, #1
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fac1 	bl	8005df4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	69b8      	ldr	r0, [r7, #24]
 8002878:	f000 fcc6 	bl	8003208 <pxPortInitialiseStack>
 800287c:	4602      	mov	r2, r0
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80028a0:	f000 fe28 	bl	80034f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <prvAddNewTaskToReadyList+0xf4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <prvAddNewTaskToReadyList+0xf4>)
 80028ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80028ae:	4b38      	ldr	r3, [pc, #224]	; (8002990 <prvAddNewTaskToReadyList+0xf8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028b6:	4a36      	ldr	r2, [pc, #216]	; (8002990 <prvAddNewTaskToReadyList+0xf8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <prvAddNewTaskToReadyList+0xf4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d110      	bne.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028c4:	f000 fb94 	bl	8002ff0 <prvInitialiseTaskLists>
 80028c8:	e00d      	b.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <prvAddNewTaskToReadyList+0xfc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <prvAddNewTaskToReadyList+0xf8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d802      	bhi.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028e0:	4a2b      	ldr	r2, [pc, #172]	; (8002990 <prvAddNewTaskToReadyList+0xf8>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <prvAddNewTaskToReadyList+0x100>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <prvAddNewTaskToReadyList+0x100>)
 80028ee:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <prvAddNewTaskToReadyList+0x8c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 ffd1 	bl	80058a0 <SEGGER_SYSVIEW_OnTaskCreate>
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	461d      	mov	r5, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461c      	mov	r4, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	1ae3      	subs	r3, r4, r3
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	462b      	mov	r3, r5
 8002920:	f001 f9c2 	bl	8003ca8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f83e 	bl	80059a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2201      	movs	r2, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <prvAddNewTaskToReadyList+0x104>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <prvAddNewTaskToReadyList+0x104>)
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <prvAddNewTaskToReadyList+0x108>)
 800294c:	441a      	add	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7ff fe48 	bl	80025ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800295a:	f000 fdfb 	bl	8003554 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <prvAddNewTaskToReadyList+0xfc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00e      	beq.n	8002984 <prvAddNewTaskToReadyList+0xec>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <prvAddNewTaskToReadyList+0xf8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d207      	bcs.n	8002984 <prvAddNewTaskToReadyList+0xec>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <prvAddNewTaskToReadyList+0x10c>)
 8002976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	200001c8 	.word	0x200001c8
 8002990:	200000c8 	.word	0x200000c8
 8002994:	200001d4 	.word	0x200001d4
 8002998:	200001e4 	.word	0x200001e4
 800299c:	200001d0 	.word	0x200001d0
 80029a0:	200000cc 	.word	0x200000cc
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xTaskDelayUntil+0x2a>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	617b      	str	r3, [r7, #20]
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xTaskDelayUntil+0x46>
        __asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	613b      	str	r3, [r7, #16]
    }
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <xTaskDelayUntil+0xf8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <xTaskDelayUntil+0x64>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	60fb      	str	r3, [r7, #12]
    }
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002a0c:	f000 f8e2 	bl	8002bd4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <xTaskDelayUntil+0xfc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d20b      	bcs.n	8002a42 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d211      	bcs.n	8002a58 <xTaskDelayUntil+0xb0>
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d90d      	bls.n	8002a58 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e00a      	b.n	8002a58 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d303      	bcc.n	8002a54 <xTaskDelayUntil+0xac>
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d901      	bls.n	8002a58 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002a64:	2024      	movs	r0, #36	; 0x24
 8002a66:	f002 fb09 	bl	800507c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb56 	bl	8003124 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002a78:	f000 f8ba 	bl	8002bf0 <xTaskResumeAll>
 8002a7c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <xTaskDelayUntil+0x100>)
 8002a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a96:	4618      	mov	r0, r3
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200001f0 	.word	0x200001f0
 8002aa4:	200001cc 	.word	0x200001cc
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01b      	beq.n	8002af6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <vTaskDelay+0x68>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <vTaskDelay+0x30>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	60bb      	str	r3, [r7, #8]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002adc:	f000 f87a 	bl	8002bd4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	2023      	movs	r0, #35	; 0x23
 8002ae4:	f002 fae8 	bl	80050b8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ae8:	2100      	movs	r1, #0
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb1a 	bl	8003124 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002af0:	f000 f87e 	bl	8002bf0 <xTaskResumeAll>
 8002af4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <vTaskDelay+0x6c>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200001f0 	.word	0x200001f0
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <vTaskStartScheduler+0x98>)
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <vTaskStartScheduler+0x9c>)
 8002b30:	4822      	ldr	r0, [pc, #136]	; (8002bbc <vTaskStartScheduler+0xa0>)
 8002b32:	f7ff fde1 	bl	80026f8 <xTaskCreate>
 8002b36:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d124      	bne.n	8002b88 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	60bb      	str	r3, [r7, #8]
    }
 8002b50:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <vTaskStartScheduler+0xa4>)
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b58:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <vTaskStartScheduler+0xa8>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <vTaskStartScheduler+0xac>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <vTaskStartScheduler+0xb0>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <vTaskStartScheduler+0x98>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d102      	bne.n	8002b78 <vTaskStartScheduler+0x5c>
 8002b72:	f002 fe79 	bl	8005868 <SEGGER_SYSVIEW_OnIdle>
 8002b76:	e004      	b.n	8002b82 <vTaskStartScheduler+0x66>
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <vTaskStartScheduler+0xb0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 fed1 	bl	8005924 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b82:	f000 fc15 	bl	80033b0 <xPortStartScheduler>
 8002b86:	e00e      	b.n	8002ba6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b8e:	d10a      	bne.n	8002ba6 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	607b      	str	r3, [r7, #4]
    }
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <vTaskStartScheduler+0xb4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200001ec 	.word	0x200001ec
 8002bb8:	08005e80 	.word	0x08005e80
 8002bbc:	08002fc1 	.word	0x08002fc1
 8002bc0:	200001e8 	.word	0x200001e8
 8002bc4:	200001d4 	.word	0x200001d4
 8002bc8:	200001cc 	.word	0x200001cc
 8002bcc:	200000c8 	.word	0x200000c8
 8002bd0:	2000000c 	.word	0x2000000c

08002bd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <vTaskSuspendAll+0x18>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <vTaskSuspendAll+0x18>)
 8002be0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200001f0 	.word	0x200001f0

08002bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bfe:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <xTaskResumeAll+0x2c>
        __asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	603b      	str	r3, [r7, #0]
    }
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c1c:	f000 fc6a 	bl	80034f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c20:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a39      	ldr	r2, [pc, #228]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <xTaskResumeAll+0x11c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d165      	bne.n	8002cfe <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <xTaskResumeAll+0x120>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d061      	beq.n	8002cfe <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c3a:	e032      	b.n	8002ca2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <xTaskResumeAll+0x124>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3318      	adds	r3, #24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fd2b 	bl	80026a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fd26 	bl	80026a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fea4 	bl	80059a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <xTaskResumeAll+0x128>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <xTaskResumeAll+0x128>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <xTaskResumeAll+0x12c>)
 8002c80:	441a      	add	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3304      	adds	r3, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7ff fcae 	bl	80025ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <xTaskResumeAll+0x130>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <xTaskResumeAll+0x134>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <xTaskResumeAll+0x124>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1c8      	bne.n	8002c3c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cb0:	f000 fa1c 	bl	80030ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <xTaskResumeAll+0x138>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cc0:	f000 f858 	bl	8002d74 <xTaskIncrementTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <xTaskResumeAll+0x134>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f1      	bne.n	8002cc0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <xTaskResumeAll+0x138>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <xTaskResumeAll+0x134>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <xTaskResumeAll+0x13c>)
 8002cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cfe:	f000 fc29 	bl	8003554 <vPortExitCritical>

    return xAlreadyYielded;
 8002d02:	68bb      	ldr	r3, [r7, #8]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200001f0 	.word	0x200001f0
 8002d10:	200001c8 	.word	0x200001c8
 8002d14:	20000188 	.word	0x20000188
 8002d18:	200001d0 	.word	0x200001d0
 8002d1c:	200000cc 	.word	0x200000cc
 8002d20:	200000c8 	.word	0x200000c8
 8002d24:	200001dc 	.word	0x200001dc
 8002d28:	200001d8 	.word	0x200001d8
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <xTaskGetTickCount+0x1c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d3c:	687b      	ldr	r3, [r7, #4]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	200001cc 	.word	0x200001cc

08002d50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d56:	f000 fcb9 	bl	80036cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <xTaskGetTickCountFromISR+0x20>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d64:	683b      	ldr	r3, [r7, #0]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200001cc 	.word	0x200001cc

08002d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <xTaskIncrementTick+0x14c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8092 	bne.w	8002eac <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d88:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <xTaskIncrementTick+0x150>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d90:	4a4c      	ldr	r2, [pc, #304]	; (8002ec4 <xTaskIncrementTick+0x150>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d120      	bne.n	8002dde <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <xTaskIncrementTick+0x48>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	603b      	str	r3, [r7, #0]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskIncrementTick+0x46>
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <xTaskIncrementTick+0x15c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	; (8002ed0 <xTaskIncrementTick+0x15c>)
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	f000 f987 	bl	80030ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <xTaskIncrementTick+0x160>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d34c      	bcc.n	8002e82 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de8:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <xTaskIncrementTick+0x160>)
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df8:	601a      	str	r2, [r3, #0]
                    break;
 8002dfa:	e042      	b.n	8002e82 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d203      	bcs.n	8002e1c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e14:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <xTaskIncrementTick+0x160>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e1a:	e032      	b.n	8002e82 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fc3f 	bl	80026a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3318      	adds	r3, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fc36 	bl	80026a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fdb4 	bl	80059a8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <xTaskIncrementTick+0x164>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <xTaskIncrementTick+0x164>)
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <xTaskIncrementTick+0x168>)
 8002e60:	441a      	add	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7ff fbbe 	bl	80025ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <xTaskIncrementTick+0x16c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3b5      	bcc.n	8002de8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e80:	e7b2      	b.n	8002de8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <xTaskIncrementTick+0x16c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4914      	ldr	r1, [pc, #80]	; (8002edc <xTaskIncrementTick+0x168>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d901      	bls.n	8002e9e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <xTaskIncrementTick+0x170>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e004      	b.n	8002eb6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <xTaskIncrementTick+0x174>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <xTaskIncrementTick+0x174>)
 8002eb4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eb6:	697b      	ldr	r3, [r7, #20]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200001f0 	.word	0x200001f0
 8002ec4:	200001cc 	.word	0x200001cc
 8002ec8:	20000180 	.word	0x20000180
 8002ecc:	20000184 	.word	0x20000184
 8002ed0:	200001e0 	.word	0x200001e0
 8002ed4:	200001e8 	.word	0x200001e8
 8002ed8:	200001d0 	.word	0x200001d0
 8002edc:	200000cc 	.word	0x200000cc
 8002ee0:	200000c8 	.word	0x200000c8
 8002ee4:	200001dc 	.word	0x200001dc
 8002ee8:	200001d8 	.word	0x200001d8

08002eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <vTaskSwitchContext+0xbc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <vTaskSwitchContext+0xc0>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002f00:	e04d      	b.n	8002f9e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <vTaskSwitchContext+0xc0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <vTaskSwitchContext+0xc4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	f1c3 031f 	rsb	r3, r3, #31
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <vTaskSwitchContext+0xc8>)
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	607b      	str	r3, [r7, #4]
    }
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vTaskSwitchContext+0x5a>
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <vTaskSwitchContext+0xc8>)
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d104      	bne.n	8002f78 <vTaskSwitchContext+0x8c>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <vTaskSwitchContext+0xcc>)
 8002f80:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <vTaskSwitchContext+0xcc>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <vTaskSwitchContext+0xd0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d102      	bne.n	8002f94 <vTaskSwitchContext+0xa8>
 8002f8e:	f002 fc6b 	bl	8005868 <SEGGER_SYSVIEW_OnIdle>
}
 8002f92:	e004      	b.n	8002f9e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <vTaskSwitchContext+0xcc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fcc3 	bl	8005924 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200001f0 	.word	0x200001f0
 8002fac:	200001dc 	.word	0x200001dc
 8002fb0:	200001d0 	.word	0x200001d0
 8002fb4:	200000cc 	.word	0x200000cc
 8002fb8:	200000c8 	.word	0x200000c8
 8002fbc:	200001ec 	.word	0x200001ec

08002fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fc8:	f000 f852 	bl	8003070 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <prvIdleTask+0x28>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d9f9      	bls.n	8002fc8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <prvIdleTask+0x2c>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fe4:	e7f0      	b.n	8002fc8 <prvIdleTask+0x8>
 8002fe6:	bf00      	nop
 8002fe8:	200000cc 	.word	0x200000cc
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	e00c      	b.n	8003016 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <prvInitialiseTaskLists+0x60>)
 8003008:	4413      	add	r3, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fac0 	bl	8002590 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3301      	adds	r3, #1
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b06      	cmp	r3, #6
 800301a:	d9ef      	bls.n	8002ffc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800301c:	480d      	ldr	r0, [pc, #52]	; (8003054 <prvInitialiseTaskLists+0x64>)
 800301e:	f7ff fab7 	bl	8002590 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <prvInitialiseTaskLists+0x68>)
 8003024:	f7ff fab4 	bl	8002590 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <prvInitialiseTaskLists+0x6c>)
 800302a:	f7ff fab1 	bl	8002590 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800302e:	480c      	ldr	r0, [pc, #48]	; (8003060 <prvInitialiseTaskLists+0x70>)
 8003030:	f7ff faae 	bl	8002590 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003034:	480b      	ldr	r0, [pc, #44]	; (8003064 <prvInitialiseTaskLists+0x74>)
 8003036:	f7ff faab 	bl	8002590 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <prvInitialiseTaskLists+0x78>)
 800303c:	4a05      	ldr	r2, [pc, #20]	; (8003054 <prvInitialiseTaskLists+0x64>)
 800303e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <prvInitialiseTaskLists+0x7c>)
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <prvInitialiseTaskLists+0x68>)
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200000cc 	.word	0x200000cc
 8003054:	20000158 	.word	0x20000158
 8003058:	2000016c 	.word	0x2000016c
 800305c:	20000188 	.word	0x20000188
 8003060:	2000019c 	.word	0x2000019c
 8003064:	200001b4 	.word	0x200001b4
 8003068:	20000180 	.word	0x20000180
 800306c:	20000184 	.word	0x20000184

08003070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003076:	e019      	b.n	80030ac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003078:	f000 fa3c 	bl	80034f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <prvCheckTasksWaitingTermination+0x50>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fb0b 	bl	80026a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <prvCheckTasksWaitingTermination+0x54>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3b01      	subs	r3, #1
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <prvCheckTasksWaitingTermination+0x54>)
 8003096:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <prvCheckTasksWaitingTermination+0x58>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <prvCheckTasksWaitingTermination+0x58>)
 80030a0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80030a2:	f000 fa57 	bl	8003554 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f810 	bl	80030cc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <prvCheckTasksWaitingTermination+0x58>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e1      	bne.n	8003078 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000019c 	.word	0x2000019c
 80030c4:	200001c8 	.word	0x200001c8
 80030c8:	200001b0 	.word	0x200001b0

080030cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fc17 	bl	800390c <vPortFree>
                vPortFree( pxTCB );
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fc14 	bl	800390c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <prvResetNextTaskUnblockTime+0x30>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <prvResetNextTaskUnblockTime+0x34>)
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003100:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003102:	e005      	b.n	8003110 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <prvResetNextTaskUnblockTime+0x30>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <prvResetNextTaskUnblockTime+0x34>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000180 	.word	0x20000180
 8003120:	200001e8 	.word	0x200001e8

08003124 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fab2 	bl	80026a4 <uxListRemove>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4013      	ands	r3, r2
 800315a:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800315c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d10a      	bne.n	800317c <prvAddCurrentTaskToDelayedList+0x58>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4820      	ldr	r0, [pc, #128]	; (80031f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003176:	f7ff fa38 	bl	80025ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800317a:	e032      	b.n	80031e2 <prvAddCurrentTaskToDelayedList+0xbe>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d20f      	bcs.n	80031b4 <prvAddCurrentTaskToDelayedList+0x90>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2104      	movs	r1, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fc46 	bl	8005a2c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7ff fa40 	bl	8002632 <vListInsert>
}
 80031b2:	e016      	b.n	80031e2 <prvAddCurrentTaskToDelayedList+0xbe>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2104      	movs	r1, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fc36 	bl	8005a2c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <prvAddCurrentTaskToDelayedList+0xdc>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff fa30 	bl	8002632 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <prvAddCurrentTaskToDelayedList+0xe0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d202      	bcs.n	80031e2 <prvAddCurrentTaskToDelayedList+0xbe>
                        xNextTaskUnblockTime = xTimeToWake;
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <prvAddCurrentTaskToDelayedList+0xe0>)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6013      	str	r3, [r2, #0]
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200001cc 	.word	0x200001cc
 80031f0:	200000c8 	.word	0x200000c8
 80031f4:	200001d0 	.word	0x200001d0
 80031f8:	200001b4 	.word	0x200001b4
 80031fc:	20000184 	.word	0x20000184
 8003200:	20000180 	.word	0x20000180
 8003204:	200001e8 	.word	0x200001e8

08003208 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b04      	subs	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003220:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3b04      	subs	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3b04      	subs	r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <pxPortInitialiseStack+0x64>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b14      	subs	r3, #20
 8003242:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3b04      	subs	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f06f 0202 	mvn.w	r2, #2
 8003256:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3b20      	subs	r3, #32
 800325c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	08003271 	.word	0x08003271

08003270 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <prvTaskExitError+0x54>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003282:	d00a      	beq.n	800329a <prvTaskExitError+0x2a>
        __asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	60fb      	str	r3, [r7, #12]
    }
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <prvTaskExitError+0x28>
        __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	60bb      	str	r3, [r7, #8]
    }
 80032ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80032ae:	bf00      	nop
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0fc      	beq.n	80032b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000010 	.word	0x20000010
	...

080032d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <pxCurrentTCBConst2>)
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	6808      	ldr	r0, [r1, #0]
 80032d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032da:	f380 8809 	msr	PSP, r0
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8811 	msr	BASEPRI, r0
 80032ea:	4770      	bx	lr
 80032ec:	f3af 8000 	nop.w

080032f0 <pxCurrentTCBConst2>:
 80032f0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop

080032f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032f8:	4808      	ldr	r0, [pc, #32]	; (800331c <prvPortStartFirstTask+0x24>)
 80032fa:	6800      	ldr	r0, [r0, #0]
 80032fc:	6800      	ldr	r0, [r0, #0]
 80032fe:	f380 8808 	msr	MSP, r0
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f380 8814 	msr	CONTROL, r0
 800330a:	b662      	cpsie	i
 800330c:	b661      	cpsie	f
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	df00      	svc	0
 8003318:	bf00      	nop
 800331a:	0000      	.short	0x0000
 800331c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop

08003324 <vSetVarulMaxPRIGROUPValue>:
/*-----------------------------------------------------------*/
//###########################################################
// Add function below in file port.c
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue(void) {
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
	volatile uint8_t *const pucFirstUserPriorityRegister =
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <vSetVarulMaxPRIGROUPValue+0x84>)
 800332c:	60fb      	str	r3, [r7, #12]
			(volatile uint8_t* const ) ( portNVIC_IP_REGISTERS_OFFSET_16
					+ portFIRST_USER_INTERRUPT_NUMBER);
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	 possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	 of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 800333e:	2207      	movs	r2, #7
 8003340:	601a      	str	r2, [r3, #0]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003342:	e009      	b.n	8003358 <vSetVarulMaxPRIGROUPValue+0x34>
		ulMaxPRIGROUPValue--;
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 800334c:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= (uint8_t) 0x01;
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	71fb      	strb	r3, [r7, #7]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d0ef      	beq.n	8003344 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		 priority bits matches the number of priority bits actually queried
		 from the hardware. */
		configASSERT(
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1c3 0307 	rsb	r3, r3, #7
 800336c:	2b04      	cmp	r3, #4
 800336e:	d00a      	beq.n	8003386 <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	60bb      	str	r3, [r7, #8]
    }
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <vSetVarulMaxPRIGROUPValue+0x60>
				( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS);
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	 register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 800338e:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <vSetVarulMaxPRIGROUPValue+0x88>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e400 	.word	0xe000e400
 80033ac:	200001f8 	.word	0x200001f8

080033b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <xPortStartScheduler+0x120>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <xPortStartScheduler+0x124>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10a      	bne.n	80033d6 <xPortStartScheduler+0x26>
        __asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	613b      	str	r3, [r7, #16]
    }
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033d6:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <xPortStartScheduler+0x120>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <xPortStartScheduler+0x128>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10a      	bne.n	80033f6 <xPortStartScheduler+0x46>
        __asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	60fb      	str	r3, [r7, #12]
    }
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033f6:	4b39      	ldr	r3, [pc, #228]	; (80034dc <xPortStartScheduler+0x12c>)
 80033f8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <xPortStartScheduler+0x130>)
 800341c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <xPortStartScheduler+0x134>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003424:	e009      	b.n	800343a <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003426:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <xPortStartScheduler+0x134>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3b01      	subs	r3, #1
 800342c:	4a2d      	ldr	r2, [pc, #180]	; (80034e4 <xPortStartScheduler+0x134>)
 800342e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d0ef      	beq.n	8003426 <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <xPortStartScheduler+0x134>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	d00a      	beq.n	8003468 <xPortStartScheduler+0xb8>
        __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60bb      	str	r3, [r7, #8]
    }
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <xPortStartScheduler+0x134>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <xPortStartScheduler+0x134>)
 8003470:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <xPortStartScheduler+0x134>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <xPortStartScheduler+0x134>)
 800347c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <xPortStartScheduler+0x138>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <xPortStartScheduler+0x138>)
 800348c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003490:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <xPortStartScheduler+0x138>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <xPortStartScheduler+0x138>)
 8003498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800349c:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800349e:	f000 f8e5 	bl	800366c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <xPortStartScheduler+0x13c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034a8:	f000 f904 	bl	80036b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034ac:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <xPortStartScheduler+0x140>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <xPortStartScheduler+0x140>)
 80034b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034b6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034b8:	f7ff ff1e 	bl	80032f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034bc:	f7ff fd16 	bl	8002eec <vTaskSwitchContext>
    prvTaskExitError();
 80034c0:	f7ff fed6 	bl	8003270 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00
 80034d4:	410fc271 	.word	0x410fc271
 80034d8:	410fc270 	.word	0x410fc270
 80034dc:	e000e400 	.word	0xe000e400
 80034e0:	200001f4 	.word	0x200001f4
 80034e4:	200001f8 	.word	0x200001f8
 80034e8:	e000ed20 	.word	0xe000ed20
 80034ec:	20000010 	.word	0x20000010
 80034f0:	e000ef34 	.word	0xe000ef34

080034f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
        __asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	607b      	str	r3, [r7, #4]
    }
 800350c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <vPortEnterCritical+0x58>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <vPortEnterCritical+0x58>)
 8003516:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <vPortEnterCritical+0x58>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10f      	bne.n	8003540 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <vPortEnterCritical+0x5c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <vPortEnterCritical+0x4c>
        __asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	603b      	str	r3, [r7, #0]
    }
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <vPortEnterCritical+0x4a>
    }
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000010 	.word	0x20000010
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <vPortExitCritical+0x50>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <vPortExitCritical+0x24>
        __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	607b      	str	r3, [r7, #4]
    }
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <vPortExitCritical+0x50>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <vPortExitCritical+0x50>)
 8003580:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <vPortExitCritical+0x50>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <vPortExitCritical+0x42>
 800358a:	2300      	movs	r3, #0
 800358c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003594:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000010 	.word	0x20000010
	...

080035b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80035b0:	f3ef 8009 	mrs	r0, PSP
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <pxCurrentTCBConst>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f01e 0f10 	tst.w	lr, #16
 80035c0:	bf08      	it	eq
 80035c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035d4:	f380 8811 	msr	BASEPRI, r0
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f7ff fc84 	bl	8002eec <vTaskSwitchContext>
 80035e4:	f04f 0000 	mov.w	r0, #0
 80035e8:	f380 8811 	msr	BASEPRI, r0
 80035ec:	bc09      	pop	{r0, r3}
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	6808      	ldr	r0, [r1, #0]
 80035f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f6:	f01e 0f10 	tst.w	lr, #16
 80035fa:	bf08      	it	eq
 80035fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003600:	f380 8809 	msr	PSP, r0
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w

08003610 <pxCurrentTCBConst>:
 8003610:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop

08003618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
        __asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	607b      	str	r3, [r7, #4]
    }
 8003630:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003632:	f002 f89f 	bl	8005774 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003636:	f7ff fb9d 	bl	8002d74 <xTaskIncrementTick>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003640:	f002 f8f6 	bl	8005830 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <SysTick_Handler+0x50>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e001      	b.n	8003652 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800364e:	f002 f8d3 	bl	80057f8 <SEGGER_SYSVIEW_RecordExitISR>
 8003652:	2300      	movs	r3, #0
 8003654:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f383 8811 	msr	BASEPRI, r3
    }
 800365c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vPortSetupTimerInterrupt+0x38>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <vPortSetupTimerInterrupt+0x3c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <vPortSetupTimerInterrupt+0x40>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <vPortSetupTimerInterrupt+0x44>)
 800368a:	3b01      	subs	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010
 80036a4:	e000e018 	.word	0xe000e018
 80036a8:	20000000 	.word	0x20000000
 80036ac:	10624dd3 	.word	0x10624dd3
 80036b0:	e000e014 	.word	0xe000e014

080036b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036c4 <vPortEnableVFP+0x10>
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	4770      	bx	lr
 80036c2:	0000      	.short	0x0000
 80036c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop

080036cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80036d2:	f3ef 8305 	mrs	r3, IPSR
 80036d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d914      	bls.n	8003708 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <vPortValidateInterruptPriority+0x70>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <vPortValidateInterruptPriority+0x74>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	7afa      	ldrb	r2, [r7, #11]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20a      	bcs.n	8003708 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	607b      	str	r3, [r7, #4]
    }
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <vPortValidateInterruptPriority+0x78>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <vPortValidateInterruptPriority+0x7c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d90a      	bls.n	800372e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	603b      	str	r3, [r7, #0]
    }
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <vPortValidateInterruptPriority+0x60>
    }
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e3f0 	.word	0xe000e3f0
 8003740:	200001f4 	.word	0x200001f4
 8003744:	e000ed0c 	.word	0xe000ed0c
 8003748:	200001f8 	.word	0x200001f8

0800374c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003758:	f7ff fa3c 	bl	8002bd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800375c:	4b65      	ldr	r3, [pc, #404]	; (80038f4 <pvPortMalloc+0x1a8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003764:	f000 f934 	bl	80039d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003768:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <pvPortMalloc+0x1ac>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 80a7 	bne.w	80038c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02d      	beq.n	80037d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800377c:	2208      	movs	r2, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d227      	bcs.n	80037d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003788:	2208      	movs	r2, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	3308      	adds	r3, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d214      	bcs.n	80037d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	3308      	adds	r3, #8
 80037b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <pvPortMalloc+0x92>
        __asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	617b      	str	r3, [r7, #20]
    }
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037d6:	e002      	b.n	80037de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e000      	b.n	80037e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06e      	beq.n	80038c4 <pvPortMalloc+0x178>
 80037e6:	4b45      	ldr	r3, [pc, #276]	; (80038fc <pvPortMalloc+0x1b0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d869      	bhi.n	80038c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <pvPortMalloc+0x1b4>)
 80037f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <pvPortMalloc+0x1b4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037fa:	e004      	b.n	8003806 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d903      	bls.n	8003818 <pvPortMalloc+0xcc>
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <pvPortMalloc+0x1a8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d050      	beq.n	80038c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2208      	movs	r2, #8
 8003828:	4413      	add	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	2308      	movs	r3, #8
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d91f      	bls.n	8003884 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <pvPortMalloc+0x120>
        __asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	613b      	str	r3, [r7, #16]
    }
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800387e:	69b8      	ldr	r0, [r7, #24]
 8003880:	f000 f908 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <pvPortMalloc+0x1b0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <pvPortMalloc+0x1b0>)
 8003890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <pvPortMalloc+0x1b0>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <pvPortMalloc+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d203      	bcs.n	80038a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <pvPortMalloc+0x1b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <pvPortMalloc+0x1b8>)
 80038a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <pvPortMalloc+0x1ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <pvPortMalloc+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	4a11      	ldr	r2, [pc, #68]	; (8003908 <pvPortMalloc+0x1bc>)
 80038c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038c4:	f7ff f994 	bl	8002bf0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <pvPortMalloc+0x19c>
        __asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	60fb      	str	r3, [r7, #12]
    }
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80038e8:	69fb      	ldr	r3, [r7, #28]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20003e04 	.word	0x20003e04
 80038f8:	20003e18 	.word	0x20003e18
 80038fc:	20003e08 	.word	0x20003e08
 8003900:	20003dfc 	.word	0x20003dfc
 8003904:	20003e0c 	.word	0x20003e0c
 8003908:	20003e10 	.word	0x20003e10

0800390c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d04d      	beq.n	80039ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800391e:	2308      	movs	r3, #8
 8003920:	425b      	negs	r3, r3
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4413      	add	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <vPortFree+0xb8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <vPortFree+0x44>
        __asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60fb      	str	r3, [r7, #12]
    }
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <vPortFree+0x62>
        __asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60bb      	str	r3, [r7, #8]
    }
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <vPortFree+0xb8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01e      	beq.n	80039ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <vPortFree+0xb8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003994:	f7ff f91e 	bl	8002bd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <vPortFree+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <vPortFree+0xbc>)
 80039a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f000 f874 	bl	8003a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <vPortFree+0xc0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a06      	ldr	r2, [pc, #24]	; (80039cc <vPortFree+0xc0>)
 80039b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039b6:	f7ff f91b 	bl	8002bf0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20003e18 	.word	0x20003e18
 80039c8:	20003e08 	.word	0x20003e08
 80039cc:	20003e14 	.word	0x20003e14

080039d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80039da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <prvHeapInit+0xac>)
 80039de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3307      	adds	r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <prvHeapInit+0xac>)
 8003a00:	4413      	add	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <prvHeapInit+0xb0>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <prvHeapInit+0xb0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <prvHeapInit+0xb4>)
 8003a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <prvHeapInit+0xb4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <prvHeapInit+0xb4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <prvHeapInit+0xb4>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <prvHeapInit+0xb8>)
 8003a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <prvHeapInit+0xbc>)
 8003a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <prvHeapInit+0xc0>)
 8003a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a6e:	601a      	str	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	200001fc 	.word	0x200001fc
 8003a80:	20003dfc 	.word	0x20003dfc
 8003a84:	20003e04 	.word	0x20003e04
 8003a88:	20003e0c 	.word	0x20003e0c
 8003a8c:	20003e08 	.word	0x20003e08
 8003a90:	20003e18 	.word	0x20003e18

08003a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <prvInsertBlockIntoFreeList+0xac>)
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <prvInsertBlockIntoFreeList+0x14>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d8f7      	bhi.n	8003aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d108      	bne.n	8003ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d118      	bne.n	8003b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d00d      	beq.n	8003b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <prvInsertBlockIntoFreeList+0xb0>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e003      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d002      	beq.n	8003b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20003dfc 	.word	0x20003dfc
 8003b44:	20003e04 	.word	0x20003e04

08003b48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b4c:	4803      	ldr	r0, [pc, #12]	; (8003b5c <_cbSendSystemDesc+0x14>)
 8003b4e:	f001 fdbb 	bl	80056c8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <_cbSendSystemDesc+0x18>)
 8003b54:	f001 fdb8 	bl	80056c8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08005e88 	.word	0x08005e88
 8003b60:	08005ec0 	.word	0x08005ec0

08003b64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <SEGGER_SYSVIEW_Conf+0x28>)
 8003b74:	f001 fa2e 	bl	8004fd4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b78:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003b7c:	f001 fa6e 	bl	800505c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000000 	.word	0x20000000
 8003b88:	08003b49 	.word	0x08003b49
 8003b8c:	08005f5c 	.word	0x08005f5c

08003b90 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e033      	b.n	8003c04 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b9c:	491e      	ldr	r1, [pc, #120]	; (8003c18 <_cbSendTaskList+0x88>)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	491a      	ldr	r1, [pc, #104]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3304      	adds	r3, #4
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	4c16      	ldr	r4, [pc, #88]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4423      	add	r3, r4
 8003bcc:	3308      	adds	r3, #8
 8003bce:	681c      	ldr	r4, [r3, #0]
 8003bd0:	4d11      	ldr	r5, [pc, #68]	; (8003c18 <_cbSendTaskList+0x88>)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	442b      	add	r3, r5
 8003bde:	330c      	adds	r3, #12
 8003be0:	681d      	ldr	r5, [r3, #0]
 8003be2:	4e0d      	ldr	r6, [pc, #52]	; (8003c18 <_cbSendTaskList+0x88>)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4433      	add	r3, r6
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	f000 f8bd 	bl	8003d78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3301      	adds	r3, #1
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <_cbSendTaskList+0x8c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3c6      	bcc.n	8003b9c <_cbSendTaskList+0xc>
  }
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c18:	20003e1c 	.word	0x20003e1c
 8003c1c:	20003ebc 	.word	0x20003ebc

08003c20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c28:	f7ff f892 	bl	8002d50 <xTaskGetTickCountFromISR>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2200      	movs	r2, #0
 8003c30:	469a      	mov	sl, r3
 8003c32:	4693      	mov	fp, r2
 8003c34:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	f04f 0a00 	mov.w	sl, #0
 8003c44:	f04f 0b00 	mov.w	fp, #0
 8003c48:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c4c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c50:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c54:	4652      	mov	r2, sl
 8003c56:	465b      	mov	r3, fp
 8003c58:	1a14      	subs	r4, r2, r0
 8003c5a:	eb63 0501 	sbc.w	r5, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	00ab      	lsls	r3, r5, #2
 8003c68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c6c:	00a2      	lsls	r2, r4, #2
 8003c6e:	4614      	mov	r4, r2
 8003c70:	461d      	mov	r5, r3
 8003c72:	eb14 0800 	adds.w	r8, r4, r0
 8003c76:	eb45 0901 	adc.w	r9, r5, r1
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c8e:	4690      	mov	r8, r2
 8003c90:	4699      	mov	r9, r3
 8003c92:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c96:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ca8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	492b      	ldr	r1, [pc, #172]	; (8003d68 <SYSVIEW_AddTask+0xc0>)
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	f002 f87c 	bl	8005db8 <memcmp>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04b      	beq.n	8003d5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003cc6:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b07      	cmp	r3, #7
 8003ccc:	d903      	bls.n	8003cd6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <SYSVIEW_AddTask+0xc8>)
 8003cd0:	f001 fff2 	bl	8005cb8 <SEGGER_SYSVIEW_Warn>
    return;
 8003cd4:	e044      	b.n	8003d60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	491b      	ldr	r1, [pc, #108]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3308      	adds	r3, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4916      	ldr	r1, [pc, #88]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	330c      	adds	r3, #12
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4910      	ldr	r1, [pc, #64]	; (8003d74 <SYSVIEW_AddTask+0xcc>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <SYSVIEW_AddTask+0xc4>)
 8003d4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f80e 	bl	8003d78 <SYSVIEW_SendTaskInfo>
 8003d5c:	e000      	b.n	8003d60 <SYSVIEW_AddTask+0xb8>
    return;
 8003d5e:	bf00      	nop

}
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08005ed0 	.word	0x08005ed0
 8003d6c:	20003ebc 	.word	0x20003ebc
 8003d70:	08005ed8 	.word	0x08005ed8
 8003d74:	20003e1c 	.word	0x20003e1c

08003d78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	2214      	movs	r2, #20
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f002 f830 	bl	8005df4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fb93 	bl	80054d8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003db2:	bf00      	nop
 8003db4:	3728      	adds	r7, #40	; 0x28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <_DoInit+0xa0>)
 8003dc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003dc6:	22a8      	movs	r2, #168	; 0xa8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f002 f812 	bl	8005df4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <_DoInit+0xa4>)
 8003de0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <_DoInit+0xa8>)
 8003de6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <_DoInit+0xa4>)
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <_DoInit+0xac>)
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2200      	movs	r2, #0
 8003e24:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e26:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	e00c      	b.n	8003e4a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1c3 030f 	rsb	r3, r3, #15
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <_DoInit+0xb0>)
 8003e38:	5cd1      	ldrb	r1, [r2, r3]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	460a      	mov	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d9ef      	bls.n	8003e30 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e50:	f3bf 8f5f 	dmb	sy
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20003ec0 	.word	0x20003ec0
 8003e60:	08005f28 	.word	0x08005f28
 8003e64:	20003f68 	.word	0x20003f68
 8003e68:	20004368 	.word	0x20004368
 8003e6c:	08005f64 	.word	0x08005f64

08003e70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d905      	bls.n	8003ea0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e007      	b.n	8003eb0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	1acb      	subs	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b01      	subs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf28      	it	cs
 8003ebe:	4613      	movcs	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf28      	it	cs
 8003eca:	4613      	movcs	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	6978      	ldr	r0, [r7, #20]
 8003ede:	f001 ff7b 	bl	8005dd8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	4413      	add	r3, r2
 8003ee8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	4413      	add	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	4413      	add	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d101      	bne.n	8003f10 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f10:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1b2      	bne.n	8003e86 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3728      	adds	r7, #40	; 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b088      	sub	sp, #32
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d911      	bls.n	8003f72 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	6938      	ldr	r0, [r7, #16]
 8003f5e:	f001 ff3b 	bl	8005dd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f62:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f70:	e01f      	b.n	8003fb2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6938      	ldr	r0, [r7, #16]
 8003f86:	f001 ff27 	bl	8005dd8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6938      	ldr	r0, [r7, #16]
 8003fa4:	f001 ff18 	bl	8005dd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fa8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	60da      	str	r2, [r3, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d808      	bhi.n	8003fe8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800400c:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <SEGGER_RTT_ReadNoLock+0x108>)
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <SEGGER_RTT_ReadNoLock+0x1e>
 800401a:	f7ff fecf 	bl	8003dbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	3360      	adds	r3, #96	; 0x60
 800402a:	4a37      	ldr	r2, [pc, #220]	; (8004108 <SEGGER_RTT_ReadNoLock+0x108>)
 800402c:	4413      	add	r3, r2
 800402e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	429a      	cmp	r2, r3
 800404a:	d92b      	bls.n	80040a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4293      	cmp	r3, r2
 800405c:	bf28      	it	cs
 800405e:	4613      	movcs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	4413      	add	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004072:	f001 feb1 	bl	8005dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4413      	add	r3, r2
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800408e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409c:	429a      	cmp	r2, r3
 800409e:	d101      	bne.n	80040a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf28      	it	cs
 80040b4:	4613      	movcs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	4413      	add	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ce:	f001 fe83 	bl	8005dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4413      	add	r3, r2
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20003ec0 	.word	0x20003ec0

0800410c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800412a:	4413      	add	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d029      	beq.n	800418a <SEGGER_RTT_WriteNoLock+0x7e>
 8004136:	2b02      	cmp	r3, #2
 8004138:	d82e      	bhi.n	8004198 <SEGGER_RTT_WriteNoLock+0x8c>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <SEGGER_RTT_WriteNoLock+0x38>
 800413e:	2b01      	cmp	r3, #1
 8004140:	d013      	beq.n	800416a <SEGGER_RTT_WriteNoLock+0x5e>
 8004142:	e029      	b.n	8004198 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f7ff ff38 	bl	8003fba <_GetAvailWriteSpace>
 800414a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d202      	bcs.n	800415a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004158:	e021      	b.n	800419e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f7ff fee1 	bl	8003f2a <_WriteNoCheck>
    break;
 8004168:	e019      	b.n	800419e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff25 	bl	8003fba <_GetAvailWriteSpace>
 8004170:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4293      	cmp	r3, r2
 8004178:	bf28      	it	cs
 800417a:	4613      	movcs	r3, r2
 800417c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff fed1 	bl	8003f2a <_WriteNoCheck>
    break;
 8004188:	e009      	b.n	800419e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff fe6e 	bl	8003e70 <_WriteBlocking>
 8004194:	61f8      	str	r0, [r7, #28]
    break;
 8004196:	e002      	b.n	800419e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
    break;
 800419c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800419e:	69fb      	ldr	r3, [r7, #28]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20003ec0 	.word	0x20003ec0

080041ac <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <SEGGER_RTT_Write+0x48>)
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <SEGGER_RTT_Write+0x1e>
 80041c6:	f7ff fdf9 	bl	8003dbc <_DoInit>
  SEGGER_RTT_LOCK();
 80041ca:	f3ef 8311 	mrs	r3, BASEPRI
 80041ce:	f04f 0120 	mov.w	r1, #32
 80041d2:	f381 8811 	msr	BASEPRI, r1
 80041d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ff95 	bl	800410c <SEGGER_RTT_WriteNoLock>
 80041e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80041ea:	697b      	ldr	r3, [r7, #20]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20003ec0 	.word	0x20003ec0

080041f8 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8004202:	6838      	ldr	r0, [r7, #0]
 8004204:	f7fc f84e 	bl	80002a4 <strlen>
 8004208:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ffcc 	bl	80041ac <SEGGER_RTT_Write>
 8004214:	4603      	mov	r3, r0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <SEGGER_RTT_AllocUpBuffer+0x20>
 800423c:	f7ff fdbe 	bl	8003dbc <_DoInit>
  SEGGER_RTT_LOCK();
 8004240:	f3ef 8311 	mrs	r3, BASEPRI
 8004244:	f04f 0120 	mov.w	r1, #32
 8004248:	f381 8811 	msr	BASEPRI, r1
 800424c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004250:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004256:	6939      	ldr	r1, [r7, #16]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	3304      	adds	r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3301      	adds	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	429a      	cmp	r2, r3
 800427c:	dbeb      	blt.n	8004256 <SEGGER_RTT_AllocUpBuffer+0x36>
 800427e:	e000      	b.n	8004282 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004280:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	429a      	cmp	r2, r3
 800428a:	da3f      	bge.n	800430c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800428c:	6939      	ldr	r1, [r7, #16]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	440b      	add	r3, r1
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80042a0:	6939      	ldr	r1, [r7, #16]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	3304      	adds	r3, #4
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80042b6:	6939      	ldr	r1, [r7, #16]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	3320      	adds	r3, #32
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3328      	adds	r3, #40	; 0x28
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80042de:	6939      	ldr	r1, [r7, #16]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	3324      	adds	r3, #36	; 0x24
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80042f2:	6939      	ldr	r1, [r7, #16]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	332c      	adds	r3, #44	; 0x2c
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004306:	f3bf 8f5f 	dmb	sy
 800430a:	e002      	b.n	8004312 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004310:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004318:	69fb      	ldr	r3, [r7, #28]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20003ec0 	.word	0x20003ec0

08004328 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004338:	623b      	str	r3, [r7, #32]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004344:	f7ff fd3a 	bl	8003dbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800434a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d82c      	bhi.n	80043ac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004352:	f3ef 8311 	mrs	r3, BASEPRI
 8004356:	f04f 0120 	mov.w	r1, #32
 800435a:	f381 8811 	msr	BASEPRI, r1
 800435e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	3360      	adds	r3, #96	; 0x60
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800439c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e002      	b.n	80043b2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20003ec0 	.word	0x20003ec0

080043c0 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d80e      	bhi.n	80043fc <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d115      	bne.n	8004434 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6918      	ldr	r0, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	461a      	mov	r2, r3
 8004416:	f7ff fec9 	bl	80041ac <SEGGER_RTT_Write>
 800441a:	4602      	mov	r2, r0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	d004      	beq.n	800442e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800442a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800442c:	e002      	b.n	8004434 <_StoreChar+0x74>
      p->Cnt = 0u;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800444e:	2301      	movs	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004456:	e007      	b.n	8004468 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004458:	6a3a      	ldr	r2, [r7, #32]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	623b      	str	r3, [r7, #32]
    Width++;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3301      	adds	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d2f3      	bcs.n	8004458 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	429a      	cmp	r2, r3
 8004476:	d901      	bls.n	800447c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d125      	bne.n	80044d2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d022      	beq.n	80044d2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <_PrintUnsigned+0x66>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <_PrintUnsigned+0x66>
        c = '0';
 800449c:	2330      	movs	r3, #48	; 0x30
 800449e:	76fb      	strb	r3, [r7, #27]
 80044a0:	e001      	b.n	80044a6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80044a2:	2320      	movs	r3, #32
 80044a4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044a6:	e00b      	b.n	80044c0 <_PrintUnsigned+0x84>
        FieldWidth--;
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	3b01      	subs	r3, #1
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80044ae:	7efb      	ldrb	r3, [r7, #27]
 80044b0:	4619      	mov	r1, r3
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff ff84 	bl	80043c0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db07      	blt.n	80044d0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <_PrintUnsigned+0x96>
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3ec      	bcc.n	80044a8 <_PrintUnsigned+0x6c>
 80044ce:	e000      	b.n	80044d2 <_PrintUnsigned+0x96>
          break;
 80044d0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db55      	blt.n	8004586 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d903      	bls.n	80044e8 <_PrintUnsigned+0xac>
        NumDigits--;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	e009      	b.n	80044fc <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d200      	bcs.n	80044fc <_PrintUnsigned+0xc0>
          break;
 80044fa:	e005      	b.n	8004508 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004506:	e7e8      	b.n	80044da <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <_PrintUnsigned+0x154>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff48 	bl	80043c0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db08      	blt.n	800454a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1df      	bne.n	8004508 <_PrintUnsigned+0xcc>
 8004548:	e000      	b.n	800454c <_PrintUnsigned+0x110>
        break;
 800454a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d017      	beq.n	8004586 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2b00      	cmp	r3, #0
 800455a:	d014      	beq.n	8004586 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800455c:	e00a      	b.n	8004574 <_PrintUnsigned+0x138>
          FieldWidth--;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	3b01      	subs	r3, #1
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8004564:	2120      	movs	r1, #32
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff ff2a 	bl	80043c0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db07      	blt.n	8004584 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <_PrintUnsigned+0x14a>
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	429a      	cmp	r2, r3
 8004580:	d3ed      	bcc.n	800455e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8004582:	e000      	b.n	8004586 <_PrintUnsigned+0x14a>
            break;
 8004584:	bf00      	nop
}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	; 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	08005f78 	.word	0x08005f78

08004594 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bfb8      	it	lt
 80045a8:	425b      	neglt	r3, r3
 80045aa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045b0:	e007      	b.n	80045c2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80045ba:	613b      	str	r3, [r7, #16]
    Width++;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	daf3      	bge.n	80045b2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d901      	bls.n	80045d6 <_PrintInt+0x42>
    Width = NumDigits;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <_PrintInt+0x5e>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db04      	blt.n	80045ec <_PrintInt+0x58>
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <_PrintInt+0x5e>
    FieldWidth--;
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <_PrintInt+0x6e>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01c      	beq.n	800463c <_PrintInt+0xa8>
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d117      	bne.n	800463c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004612:	e00a      	b.n	800462a <_PrintInt+0x96>
        FieldWidth--;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	3b01      	subs	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800461a:	2120      	movs	r1, #32
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff fecf 	bl	80043c0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	db07      	blt.n	800463a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <_PrintInt+0xa8>
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3ed      	bcc.n	8004614 <_PrintInt+0x80>
 8004638:	e000      	b.n	800463c <_PrintInt+0xa8>
          break;
 800463a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db4a      	blt.n	80046da <_PrintInt+0x146>
    if (v < 0) {
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	da07      	bge.n	800465a <_PrintInt+0xc6>
      v = -v;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	425b      	negs	r3, r3
 800464e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004650:	212d      	movs	r1, #45	; 0x2d
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff feb4 	bl	80043c0 <_StoreChar>
 8004658:	e008      	b.n	800466c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8004664:	212b      	movs	r1, #43	; 0x2b
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff feaa 	bl	80043c0 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db32      	blt.n	80046da <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01f      	beq.n	80046be <_PrintInt+0x12a>
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11a      	bne.n	80046be <_PrintInt+0x12a>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d117      	bne.n	80046be <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d014      	beq.n	80046be <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004694:	e00a      	b.n	80046ac <_PrintInt+0x118>
            FieldWidth--;
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	3b01      	subs	r3, #1
 800469a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800469c:	2130      	movs	r1, #48	; 0x30
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fe8e 	bl	80043c0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db07      	blt.n	80046bc <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <_PrintInt+0x12a>
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3ed      	bcc.n	8004696 <_PrintInt+0x102>
 80046ba:	e000      	b.n	80046be <_PrintInt+0x12a>
              break;
 80046bc:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	db09      	blt.n	80046da <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff feb1 	bl	800443c <_PrintUnsigned>
      }
    }
  }
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b0a2      	sub	sp, #136	; 0x88
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80046f6:	2340      	movs	r3, #64	; 0x40
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 80046fa:	2300      	movs	r3, #0
 80046fc:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8004714:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 819f 	beq.w	8004a5c <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800471e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004722:	2b25      	cmp	r3, #37	; 0x25
 8004724:	f040 818d 	bne.w	8004a42 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004728:	2300      	movs	r3, #0
 800472a:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 800472c:	2301      	movs	r3, #1
 800472e:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8004738:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800473c:	3b23      	subs	r3, #35	; 0x23
 800473e:	2b0d      	cmp	r3, #13
 8004740:	d83e      	bhi.n	80047c0 <SEGGER_RTT_vprintf+0xdc>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <SEGGER_RTT_vprintf+0x64>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	080047b1 	.word	0x080047b1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047c1 	.word	0x080047c1
 8004754:	080047c1 	.word	0x080047c1
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	080047c1 	.word	0x080047c1
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	08004781 	.word	0x08004781
 8004774:	080047c1 	.word	0x080047c1
 8004778:	080047c1 	.word	0x080047c1
 800477c:	08004791 	.word	0x08004791
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	673b      	str	r3, [r7, #112]	; 0x70
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3301      	adds	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	e01a      	b.n	80047c6 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	673b      	str	r3, [r7, #112]	; 0x70
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	3301      	adds	r3, #1
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	e012      	b.n	80047c6 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80047a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	673b      	str	r3, [r7, #112]	; 0x70
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	e00a      	b.n	80047c6 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80047b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b2:	f043 0308 	orr.w	r3, r3, #8
 80047b6:	673b      	str	r3, [r7, #112]	; 0x70
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	e002      	b.n	80047c6 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80047c0:	2300      	movs	r3, #0
 80047c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c4:	bf00      	nop
        }
      } while (v);
 80047c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1b1      	bne.n	8004730 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80047cc:	2300      	movs	r3, #0
 80047ce:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80047d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80047dc:	2b2f      	cmp	r3, #47	; 0x2f
 80047de:	d912      	bls.n	8004806 <SEGGER_RTT_vprintf+0x122>
 80047e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80047e4:	2b39      	cmp	r3, #57	; 0x39
 80047e6:	d80e      	bhi.n	8004806 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80047ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	461a      	mov	r2, r3
 80047fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80047fe:	4413      	add	r3, r2
 8004800:	3b30      	subs	r3, #48	; 0x30
 8004802:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8004804:	e7e4      	b.n	80047d0 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004806:	2300      	movs	r3, #0
 8004808:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8004812:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004816:	2b2e      	cmp	r3, #46	; 0x2e
 8004818:	d11d      	bne.n	8004856 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3301      	adds	r3, #1
 800481e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8004828:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800482c:	2b2f      	cmp	r3, #47	; 0x2f
 800482e:	d912      	bls.n	8004856 <SEGGER_RTT_vprintf+0x172>
 8004830:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004834:	2b39      	cmp	r3, #57	; 0x39
 8004836:	d80e      	bhi.n	8004856 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3301      	adds	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800483e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	461a      	mov	r2, r3
 800484a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800484e:	4413      	add	r3, r2
 8004850:	3b30      	subs	r3, #48	; 0x30
 8004852:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8004854:	e7e4      	b.n	8004820 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 800485e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004862:	2b6c      	cmp	r3, #108	; 0x6c
 8004864:	d003      	beq.n	800486e <SEGGER_RTT_vprintf+0x18a>
 8004866:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800486a:	2b68      	cmp	r3, #104	; 0x68
 800486c:	d107      	bne.n	800487e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3301      	adds	r3, #1
 8004872:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 800487c:	e7ef      	b.n	800485e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800487e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004882:	2b25      	cmp	r3, #37	; 0x25
 8004884:	f000 80d1 	beq.w	8004a2a <SEGGER_RTT_vprintf+0x346>
 8004888:	2b25      	cmp	r3, #37	; 0x25
 800488a:	f2c0 80d5 	blt.w	8004a38 <SEGGER_RTT_vprintf+0x354>
 800488e:	2b78      	cmp	r3, #120	; 0x78
 8004890:	f300 80d2 	bgt.w	8004a38 <SEGGER_RTT_vprintf+0x354>
 8004894:	2b58      	cmp	r3, #88	; 0x58
 8004896:	f2c0 80cf 	blt.w	8004a38 <SEGGER_RTT_vprintf+0x354>
 800489a:	3b58      	subs	r3, #88	; 0x58
 800489c:	2b20      	cmp	r3, #32
 800489e:	f200 80cb 	bhi.w	8004a38 <SEGGER_RTT_vprintf+0x354>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <SEGGER_RTT_vprintf+0x1c4>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	0800499f 	.word	0x0800499f
 80048ac:	08004a39 	.word	0x08004a39
 80048b0:	08004a39 	.word	0x08004a39
 80048b4:	08004a39 	.word	0x08004a39
 80048b8:	08004a39 	.word	0x08004a39
 80048bc:	08004a39 	.word	0x08004a39
 80048c0:	08004a39 	.word	0x08004a39
 80048c4:	08004a39 	.word	0x08004a39
 80048c8:	08004a39 	.word	0x08004a39
 80048cc:	08004a39 	.word	0x08004a39
 80048d0:	08004a39 	.word	0x08004a39
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	08004953 	.word	0x08004953
 80048dc:	08004a39 	.word	0x08004a39
 80048e0:	08004a39 	.word	0x08004a39
 80048e4:	08004a39 	.word	0x08004a39
 80048e8:	08004a39 	.word	0x08004a39
 80048ec:	08004a39 	.word	0x08004a39
 80048f0:	08004a39 	.word	0x08004a39
 80048f4:	08004a39 	.word	0x08004a39
 80048f8:	08004a39 	.word	0x08004a39
 80048fc:	08004a39 	.word	0x08004a39
 8004900:	08004a39 	.word	0x08004a39
 8004904:	08004a39 	.word	0x08004a39
 8004908:	08004a05 	.word	0x08004a05
 800490c:	08004a39 	.word	0x08004a39
 8004910:	08004a39 	.word	0x08004a39
 8004914:	080049c5 	.word	0x080049c5
 8004918:	08004a39 	.word	0x08004a39
 800491c:	08004979 	.word	0x08004979
 8004920:	08004a39 	.word	0x08004a39
 8004924:	08004a39 	.word	0x08004a39
 8004928:	0800499f 	.word	0x0800499f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1d19      	adds	r1, r3, #4
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 800493a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8004940:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fd38 	bl	80043c0 <_StoreChar>
        break;
 8004950:	e073      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1d19      	adds	r1, r3, #4
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6011      	str	r1, [r2, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004960:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800496e:	220a      	movs	r2, #10
 8004970:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004972:	f7ff fe0f 	bl	8004594 <_PrintInt>
        break;
 8004976:	e060      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	1d19      	adds	r1, r3, #4
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004986:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004988:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800498c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004996:	220a      	movs	r2, #10
 8004998:	f7ff fd50 	bl	800443c <_PrintUnsigned>
        break;
 800499c:	e04d      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	1d19      	adds	r1, r3, #4
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6011      	str	r1, [r2, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80049ac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049ae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80049b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049bc:	2210      	movs	r2, #16
 80049be:	f7ff fd3d 	bl	800443c <_PrintUnsigned>
        break;
 80049c2:	e03a      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1d19      	adds	r1, r3, #4
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 80049d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80049da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049dc:	3301      	adds	r3, #1
 80049de:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80049e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80049e8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80049ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fce4 	bl	80043c0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dae9      	bge.n	80049d2 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 80049fe:	e01c      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
              break;
 8004a00:	bf00      	nop
        break;
 8004a02:	e01a      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8004a12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a14:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2308      	movs	r3, #8
 8004a22:	2210      	movs	r2, #16
 8004a24:	f7ff fd0a 	bl	800443c <_PrintUnsigned>
        break;
 8004a28:	e007      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a2e:	2125      	movs	r1, #37	; 0x25
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fcc5 	bl	80043c0 <_StoreChar>
        break;
 8004a36:	e000      	b.n	8004a3a <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8004a38:	bf00      	nop
      }
      sFormat++;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	e007      	b.n	8004a52 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8004a42:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004a46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fcb7 	bl	80043c0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f6bf ae56 	bge.w	8004706 <SEGGER_RTT_vprintf+0x22>
 8004a5a:	e000      	b.n	8004a5e <SEGGER_RTT_vprintf+0x37a>
      break;
 8004a5c:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dd0d      	ble.n	8004a80 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8004a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8004a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6c:	f107 0310 	add.w	r3, r7, #16
 8004a70:	4619      	mov	r1, r3
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff fb9a 	bl	80041ac <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8004a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a7c:	4413      	add	r3, r2
 8004a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8004a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3780      	adds	r7, #128	; 0x80
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8004a8c:	b40e      	push	{r1, r2, r3}
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8004a96:	f107 0320 	add.w	r3, r7, #32
 8004a9a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fe1d 	bl	80046e4 <SEGGER_RTT_vprintf>
 8004aaa:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8004aac:	68fb      	ldr	r3, [r7, #12]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab8:	b003      	add	sp, #12
 8004aba:	4770      	bx	lr

08004abc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60fa      	str	r2, [r7, #12]
 8004ad2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d90a      	bls.n	8004af0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004ade:	e007      	b.n	8004af0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	1c53      	adds	r3, r2, #1
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	60f9      	str	r1, [r7, #12]
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1e5a      	subs	r2, r3, #1
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <_EncodeStr+0x46>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3307      	adds	r3, #7
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b3a:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <_HandleIncomingPacket+0xdc>)
 8004b3c:	7e1b      	ldrb	r3, [r3, #24]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	1cfb      	adds	r3, r7, #3
 8004b42:	2201      	movs	r2, #1
 8004b44:	4619      	mov	r1, r3
 8004b46:	f7ff fa5b 	bl	8004000 <SEGGER_RTT_ReadNoLock>
 8004b4a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d052      	beq.n	8004bf8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	2b80      	cmp	r3, #128	; 0x80
 8004b56:	d031      	beq.n	8004bbc <_HandleIncomingPacket+0x88>
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	dc40      	bgt.n	8004bde <_HandleIncomingPacket+0xaa>
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	dc15      	bgt.n	8004b8c <_HandleIncomingPacket+0x58>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dd3c      	ble.n	8004bde <_HandleIncomingPacket+0xaa>
 8004b64:	3b01      	subs	r3, #1
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d839      	bhi.n	8004bde <_HandleIncomingPacket+0xaa>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <_HandleIncomingPacket+0x3c>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b93 	.word	0x08004b93
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004b9f 	.word	0x08004b9f
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bb7 	.word	0x08004bb7
 8004b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8e:	d035      	beq.n	8004bfc <_HandleIncomingPacket+0xc8>
 8004b90:	e025      	b.n	8004bde <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b92:	f000 fb27 	bl	80051e4 <SEGGER_SYSVIEW_Start>
      break;
 8004b96:	e036      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b98:	f000 fbde 	bl	8005358 <SEGGER_SYSVIEW_Stop>
      break;
 8004b9c:	e033      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b9e:	f000 fdb7 	bl	8005710 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ba2:	e030      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ba4:	f000 fd7c 	bl	80056a0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ba8:	e02d      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004baa:	f000 fbfb 	bl	80053a4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004bae:	e02a      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004bb0:	f001 f844 	bl	8005c3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004bb4:	e027      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004bb6:	f001 f823 	bl	8005c00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004bba:	e024      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bbc:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <_HandleIncomingPacket+0xdc>)
 8004bbe:	7e1b      	ldrb	r3, [r3, #24]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	1cfb      	adds	r3, r7, #3
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f7ff fa1a 	bl	8004000 <SEGGER_RTT_ReadNoLock>
 8004bcc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ff88 	bl	8005aec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004bdc:	e010      	b.n	8004c00 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da0e      	bge.n	8004c04 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <_HandleIncomingPacket+0xdc>)
 8004be8:	7e1b      	ldrb	r3, [r3, #24]
 8004bea:	4618      	mov	r0, r3
 8004bec:	1cfb      	adds	r3, r7, #3
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f7ff fa05 	bl	8004000 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004bf6:	e005      	b.n	8004c04 <_HandleIncomingPacket+0xd0>
    }
  }
 8004bf8:	bf00      	nop
 8004bfa:	e004      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
      break;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
      break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <_HandleIncomingPacket+0xd2>
      break;
 8004c04:	bf00      	nop
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20005b80 	.word	0x20005b80

08004c14 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	; 0x30
 8004c18:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	e00b      	b.n	8004c48 <_TrySendOverflowPacket+0x34>
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	09db      	lsrs	r3, r3, #7
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c4c:	d8f0      	bhi.n	8004c30 <_TrySendOverflowPacket+0x1c>
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c5e:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <_TrySendOverflowPacket+0xe0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e00b      	b.n	8004c90 <_TrySendOverflowPacket+0x7c>
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6279      	str	r1, [r7, #36]	; 0x24
 8004c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	09db      	lsrs	r3, r3, #7
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	2b7f      	cmp	r3, #127	; 0x7f
 8004c94:	d8f0      	bhi.n	8004c78 <_TrySendOverflowPacket+0x64>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	4618      	mov	r0, r3
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fb faaa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e004      	b.n	8004ce4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <_TrySendOverflowPacket+0xdc>)
 8004ce2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ce4:	693b      	ldr	r3, [r7, #16]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3730      	adds	r7, #48	; 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20005b80 	.word	0x20005b80
 8004cf4:	e0001004 	.word	0xe0001004

08004cf8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004d04:	4b98      	ldr	r3, [pc, #608]	; (8004f68 <_SendPacket+0x270>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d010      	beq.n	8004d2e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <_SendPacket+0x270>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 812d 	beq.w	8004f70 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004d16:	4b94      	ldr	r3, [pc, #592]	; (8004f68 <_SendPacket+0x270>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d109      	bne.n	8004d32 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d1e:	f7ff ff79 	bl	8004c14 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004d22:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <_SendPacket+0x270>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	f040 8124 	bne.w	8004f74 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004d2c:	e001      	b.n	8004d32 <_SendPacket+0x3a>
    goto Send;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <_SendPacket+0x3c>
Send:
 8004d32:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b1f      	cmp	r3, #31
 8004d38:	d809      	bhi.n	8004d4e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d3a:	4b8b      	ldr	r3, [pc, #556]	; (8004f68 <_SendPacket+0x270>)
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 8115 	bne.w	8004f78 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b17      	cmp	r3, #23
 8004d52:	d807      	bhi.n	8004d64 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e0c4      	b.n	8004eee <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d70:	d912      	bls.n	8004d98 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	09da      	lsrs	r2, r3, #7
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e006      	b.n	8004da6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b7e      	cmp	r3, #126	; 0x7e
 8004daa:	d807      	bhi.n	8004dbc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e098      	b.n	8004eee <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc2:	d212      	bcs.n	8004dea <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	09da      	lsrs	r2, r3, #7
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	60fa      	str	r2, [r7, #12]
 8004dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e081      	b.n	8004eee <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df0:	d21d      	bcs.n	8004e2e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0b9a      	lsrs	r2, r3, #14
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	60fa      	str	r2, [r7, #12]
 8004e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	60fa      	str	r2, [r7, #12]
 8004e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e05f      	b.n	8004eee <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e34:	d228      	bcs.n	8004e88 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0d5a      	lsrs	r2, r3, #21
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0b9b      	lsrs	r3, r3, #14
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	3a01      	subs	r2, #1
 8004e50:	60fa      	str	r2, [r7, #12]
 8004e52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	3a01      	subs	r2, #1
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	3a01      	subs	r2, #1
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e032      	b.n	8004eee <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0f1a      	lsrs	r2, r3, #28
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	0d5b      	lsrs	r3, r3, #21
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	60fa      	str	r2, [r7, #12]
 8004ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0b9b      	lsrs	r3, r3, #14
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	3a01      	subs	r2, #1
 8004eb8:	60fa      	str	r2, [r7, #12]
 8004eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	09db      	lsrs	r3, r3, #7
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	60fa      	str	r2, [r7, #12]
 8004ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	60fa      	str	r2, [r7, #12]
 8004ee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004eee:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <_SendPacket+0x274>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <_SendPacket+0x270>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	e00b      	b.n	8004f20 <_SendPacket+0x228>
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1c59      	adds	r1, r3, #1
 8004f10:	6279      	str	r1, [r7, #36]	; 0x24
 8004f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	09db      	lsrs	r3, r3, #7
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	2b7f      	cmp	r3, #127	; 0x7f
 8004f24:	d8f0      	bhi.n	8004f08 <_SendPacket+0x210>
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <_SendPacket+0x270>)
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	f7fb f963 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f4a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <_SendPacket+0x270>)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	60d3      	str	r3, [r2, #12]
 8004f58:	e00f      	b.n	8004f7a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <_SendPacket+0x270>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4b01      	ldr	r3, [pc, #4]	; (8004f68 <_SendPacket+0x270>)
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e008      	b.n	8004f7a <_SendPacket+0x282>
 8004f68:	20005b80 	.word	0x20005b80
 8004f6c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004f70:	bf00      	nop
 8004f72:	e002      	b.n	8004f7a <_SendPacket+0x282>
      goto SendDone;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <_SendPacket+0x282>
      goto SendDone;
 8004f78:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <_SendPacket+0x2d4>)
 8004f7c:	7e1b      	ldrb	r3, [r3, #24]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <_SendPacket+0x2d8>)
 8004f82:	460b      	mov	r3, r1
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	440b      	add	r3, r1
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	336c      	adds	r3, #108	; 0x6c
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <_SendPacket+0x2d4>)
 8004f92:	7e1b      	ldrb	r3, [r3, #24]
 8004f94:	4618      	mov	r0, r3
 8004f96:	490e      	ldr	r1, [pc, #56]	; (8004fd0 <_SendPacket+0x2d8>)
 8004f98:	4603      	mov	r3, r0
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4403      	add	r3, r0
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	440b      	add	r3, r1
 8004fa2:	3370      	adds	r3, #112	; 0x70
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d00b      	beq.n	8004fc2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <_SendPacket+0x2d4>)
 8004fac:	789b      	ldrb	r3, [r3, #2]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d107      	bne.n	8004fc2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <_SendPacket+0x2d4>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004fb8:	f7ff fdbc 	bl	8004b34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <_SendPacket+0x2d4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004fc2:	bf00      	nop
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20005b80 	.word	0x20005b80
 8004fd0:	20003ec0 	.word	0x20003ec0

08004fd4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004fe8:	4917      	ldr	r1, [pc, #92]	; (8005048 <SEGGER_SYSVIEW_Init+0x74>)
 8004fea:	4818      	ldr	r0, [pc, #96]	; (800504c <SEGGER_SYSVIEW_Init+0x78>)
 8004fec:	f7ff f918 	bl	8004220 <SEGGER_RTT_AllocUpBuffer>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ff6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ffa:	785a      	ldrb	r2, [r3, #1]
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ffe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005002:	7e1b      	ldrb	r3, [r3, #24]
 8005004:	4618      	mov	r0, r3
 8005006:	2300      	movs	r3, #0
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2308      	movs	r3, #8
 800500c:	4a11      	ldr	r2, [pc, #68]	; (8005054 <SEGGER_SYSVIEW_Init+0x80>)
 800500e:	490f      	ldr	r1, [pc, #60]	; (800504c <SEGGER_SYSVIEW_Init+0x78>)
 8005010:	f7ff f98a 	bl	8004328 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800501a:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <SEGGER_SYSVIEW_Init+0x84>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005020:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005034:	4a06      	ldr	r2, [pc, #24]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <SEGGER_SYSVIEW_Init+0x7c>)
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20004378 	.word	0x20004378
 800504c:	08005f3c 	.word	0x08005f3c
 8005050:	20005b80 	.word	0x20005b80
 8005054:	20005b78 	.word	0x20005b78
 8005058:	e0001004 	.word	0xe0001004

0800505c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6113      	str	r3, [r2, #16]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20005b80 	.word	0x20005b80

0800507c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	f04f 0120 	mov.w	r1, #32
 800508c:	f381 8811 	msr	BASEPRI, r1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4808      	ldr	r0, [pc, #32]	; (80050b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005094:	f7ff fd42 	bl	8004b1c <_PreparePacket>
 8005098:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7ff fe2a 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f383 8811 	msr	BASEPRI, r3
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20005bb0 	.word	0x20005bb0

080050b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	4816      	ldr	r0, [pc, #88]	; (800512c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80050d2:	f7ff fd23 	bl	8004b1c <_PreparePacket>
 80050d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e00b      	b.n	80050fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	1c59      	adds	r1, r3, #1
 80050ee:	61f9      	str	r1, [r7, #28]
 80050f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	09db      	lsrs	r3, r3, #7
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b7f      	cmp	r3, #127	; 0x7f
 8005102:	d8f0      	bhi.n	80050e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	61fa      	str	r2, [r7, #28]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	6938      	ldr	r0, [r7, #16]
 800511a:	f7ff fded 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f383 8811 	msr	BASEPRI, r3
}
 8005124:	bf00      	nop
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20005bb0 	.word	0x20005bb0

08005130 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800513c:	f3ef 8311 	mrs	r3, BASEPRI
 8005140:	f04f 0120 	mov.w	r1, #32
 8005144:	f381 8811 	msr	BASEPRI, r1
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	4825      	ldr	r0, [pc, #148]	; (80051e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800514c:	f7ff fce6 	bl	8004b1c <_PreparePacket>
 8005150:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	e00b      	b.n	8005178 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	62f9      	str	r1, [r7, #44]	; 0x2c
 800516a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	09db      	lsrs	r3, r3, #7
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2b7f      	cmp	r3, #127	; 0x7f
 800517c:	d8f0      	bhi.n	8005160 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	e00b      	b.n	80051b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	6279      	str	r1, [r7, #36]	; 0x24
 80051a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	09db      	lsrs	r3, r3, #7
 80051ae:	623b      	str	r3, [r7, #32]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b7f      	cmp	r3, #127	; 0x7f
 80051b4:	d8f0      	bhi.n	8005198 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	627a      	str	r2, [r7, #36]	; 0x24
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f7ff fd94 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f383 8811 	msr	BASEPRI, r3
}
 80051d6:	bf00      	nop
 80051d8:	3730      	adds	r7, #48	; 0x30
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20005bb0 	.word	0x20005bb0

080051e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	; 0x30
 80051e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80051ea:	4b58      	ldr	r3, [pc, #352]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80051f0:	f3ef 8311 	mrs	r3, BASEPRI
 80051f4:	f04f 0120 	mov.w	r1, #32
 80051f8:	f381 8811 	msr	BASEPRI, r1
 80051fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	220a      	movs	r2, #10
 8005204:	4952      	ldr	r1, [pc, #328]	; (8005350 <SEGGER_SYSVIEW_Start+0x16c>)
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f802 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005212:	200a      	movs	r0, #10
 8005214:	f7ff ff32 	bl	800507c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005218:	f3ef 8311 	mrs	r3, BASEPRI
 800521c:	f04f 0120 	mov.w	r1, #32
 8005220:	f381 8811 	msr	BASEPRI, r1
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	484b      	ldr	r0, [pc, #300]	; (8005354 <SEGGER_SYSVIEW_Start+0x170>)
 8005228:	f7ff fc78 	bl	8004b1c <_PreparePacket>
 800522c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005236:	4b45      	ldr	r3, [pc, #276]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
 800523c:	e00b      	b.n	8005256 <SEGGER_SYSVIEW_Start+0x72>
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	b2da      	uxtb	r2, r3
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	1c59      	adds	r1, r3, #1
 8005246:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	09db      	lsrs	r3, r3, #7
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2b7f      	cmp	r3, #127	; 0x7f
 800525a:	d8f0      	bhi.n	800523e <SEGGER_SYSVIEW_Start+0x5a>
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	4b36      	ldr	r3, [pc, #216]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	e00b      	b.n	8005290 <SEGGER_SYSVIEW_Start+0xac>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	6279      	str	r1, [r7, #36]	; 0x24
 8005282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	09db      	lsrs	r3, r3, #7
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b7f      	cmp	r3, #127	; 0x7f
 8005294:	d8f0      	bhi.n	8005278 <SEGGER_SYSVIEW_Start+0x94>
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	627a      	str	r2, [r7, #36]	; 0x24
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	4b28      	ldr	r3, [pc, #160]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	e00b      	b.n	80052ca <SEGGER_SYSVIEW_Start+0xe6>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	1c59      	adds	r1, r3, #1
 80052ba:	61f9      	str	r1, [r7, #28]
 80052bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	09db      	lsrs	r3, r3, #7
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b7f      	cmp	r3, #127	; 0x7f
 80052ce:	d8f0      	bhi.n	80052b2 <SEGGER_SYSVIEW_Start+0xce>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	61fa      	str	r2, [r7, #28]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	e00b      	b.n	8005302 <SEGGER_SYSVIEW_Start+0x11e>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	6179      	str	r1, [r7, #20]
 80052f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	09db      	lsrs	r3, r3, #7
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b7f      	cmp	r3, #127	; 0x7f
 8005306:	d8f0      	bhi.n	80052ea <SEGGER_SYSVIEW_Start+0x106>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	617a      	str	r2, [r7, #20]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005318:	2218      	movs	r2, #24
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fceb 	bl	8004cf8 <_SendPacket>
      RECORD_END();
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <SEGGER_SYSVIEW_Start+0x168>)
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005336:	f000 f9eb 	bl	8005710 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800533a:	f000 f9b1 	bl	80056a0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800533e:	f000 fc7d 	bl	8005c3c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005342:	bf00      	nop
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20005b80 	.word	0x20005b80
 8005350:	08005f88 	.word	0x08005f88
 8005354:	20005bb0 	.word	0x20005bb0

08005358 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800535e:	f3ef 8311 	mrs	r3, BASEPRI
 8005362:	f04f 0120 	mov.w	r1, #32
 8005366:	f381 8811 	msr	BASEPRI, r1
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <SEGGER_SYSVIEW_Stop+0x44>)
 800536e:	f7ff fbd5 	bl	8004b1c <_PreparePacket>
 8005372:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800537c:	220b      	movs	r2, #11
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f7ff fcb9 	bl	8004cf8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f383 8811 	msr	BASEPRI, r3
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20005bb0 	.word	0x20005bb0
 80053a0:	20005b80 	.word	0x20005b80

080053a4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053aa:	f3ef 8311 	mrs	r3, BASEPRI
 80053ae:	f04f 0120 	mov.w	r1, #32
 80053b2:	f381 8811 	msr	BASEPRI, r1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	4845      	ldr	r0, [pc, #276]	; (80054d0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80053ba:	f7ff fbaf 	bl	8004b1c <_PreparePacket>
 80053be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c8:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ce:	e00b      	b.n	80053e8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	09db      	lsrs	r3, r3, #7
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	2b7f      	cmp	r3, #127	; 0x7f
 80053ec:	d8f0      	bhi.n	80053d0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	e00b      	b.n	8005422 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1c59      	adds	r1, r3, #1
 8005412:	6279      	str	r1, [r7, #36]	; 0x24
 8005414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	09db      	lsrs	r3, r3, #7
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b7f      	cmp	r3, #127	; 0x7f
 8005426:	d8f0      	bhi.n	800540a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	627a      	str	r2, [r7, #36]	; 0x24
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e00b      	b.n	800545c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	b2da      	uxtb	r2, r3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	61f9      	str	r1, [r7, #28]
 800544e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	09db      	lsrs	r3, r3, #7
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b7f      	cmp	r3, #127	; 0x7f
 8005460:	d8f0      	bhi.n	8005444 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	61fa      	str	r2, [r7, #28]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e00b      	b.n	8005494 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	6179      	str	r1, [r7, #20]
 8005486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	09db      	lsrs	r3, r3, #7
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b7f      	cmp	r3, #127	; 0x7f
 8005498:	d8f0      	bhi.n	800547c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	617a      	str	r2, [r7, #20]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054aa:	2218      	movs	r2, #24
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	68b8      	ldr	r0, [r7, #8]
 80054b0:	f7ff fc22 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	4798      	blx	r3
  }
}
 80054c8:	bf00      	nop
 80054ca:	3730      	adds	r7, #48	; 0x30
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20005bb0 	.word	0x20005bb0
 80054d4:	20005b80 	.word	0x20005b80

080054d8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b092      	sub	sp, #72	; 0x48
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80054e0:	f3ef 8311 	mrs	r3, BASEPRI
 80054e4:	f04f 0120 	mov.w	r1, #32
 80054e8:	f381 8811 	msr	BASEPRI, r1
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	486a      	ldr	r0, [pc, #424]	; (8005698 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80054f0:	f7ff fb14 	bl	8004b1c <_PreparePacket>
 80054f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b66      	ldr	r3, [pc, #408]	; (800569c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	643b      	str	r3, [r7, #64]	; 0x40
 800550a:	e00b      	b.n	8005524 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	b2da      	uxtb	r2, r3
 8005510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	6479      	str	r1, [r7, #68]	; 0x44
 8005516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	09db      	lsrs	r3, r3, #7
 8005522:	643b      	str	r3, [r7, #64]	; 0x40
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	2b7f      	cmp	r3, #127	; 0x7f
 8005528:	d8f0      	bhi.n	800550c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	647a      	str	r2, [r7, #68]	; 0x44
 8005530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005538:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38
 8005544:	e00b      	b.n	800555e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	d8f0      	bhi.n	8005546 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800556a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff fa9d 	bl	8004abc <_EncodeStr>
 8005582:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005584:	2209      	movs	r2, #9
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6938      	ldr	r0, [r7, #16]
 800558a:	f7ff fbb5 	bl	8004cf8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b40      	ldr	r3, [pc, #256]	; (800569c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	633b      	str	r3, [r7, #48]	; 0x30
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	6379      	str	r1, [r7, #52]	; 0x34
 80055ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	637a      	str	r2, [r7, #52]	; 0x34
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	e00b      	b.n	80055f6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b7f      	cmp	r3, #127	; 0x7f
 80055fa:	d8f0      	bhi.n	80055de <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	e00b      	b.n	8005630 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	6279      	str	r1, [r7, #36]	; 0x24
 8005622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	09db      	lsrs	r3, r3, #7
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b7f      	cmp	r3, #127	; 0x7f
 8005634:	d8f0      	bhi.n	8005618 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	627a      	str	r2, [r7, #36]	; 0x24
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e00b      	b.n	8005668 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	61f9      	str	r1, [r7, #28]
 800565a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	09db      	lsrs	r3, r3, #7
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b7f      	cmp	r3, #127	; 0x7f
 800566c:	d8f0      	bhi.n	8005650 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	61fa      	str	r2, [r7, #28]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800567e:	2215      	movs	r2, #21
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	6938      	ldr	r0, [r7, #16]
 8005684:	f7ff fb38 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
 8005690:	3748      	adds	r7, #72	; 0x48
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20005bb0 	.word	0x20005bb0
 800569c:	20005b80 	.word	0x20005b80

080056a0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4798      	blx	r3
  }
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20005b80 	.word	0x20005b80

080056c8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056d0:	f3ef 8311 	mrs	r3, BASEPRI
 80056d4:	f04f 0120 	mov.w	r1, #32
 80056d8:	f381 8811 	msr	BASEPRI, r1
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	480b      	ldr	r0, [pc, #44]	; (800570c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80056e0:	f7ff fa1c 	bl	8004b1c <_PreparePacket>
 80056e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	6938      	ldr	r0, [r7, #16]
 80056ec:	f7ff f9e6 	bl	8004abc <_EncodeStr>
 80056f0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80056f2:	220e      	movs	r2, #14
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	6938      	ldr	r0, [r7, #16]
 80056f8:	f7ff fafe 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f383 8811 	msr	BASEPRI, r3
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20005bb0 	.word	0x20005bb0

08005710 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005716:	4b15      	ldr	r3, [pc, #84]	; (800576c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01a      	beq.n	8005754 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005728:	4b10      	ldr	r3, [pc, #64]	; (800576c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4798      	blx	r3
 8005730:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005734:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	000a      	movs	r2, r1
 8005744:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005746:	4613      	mov	r3, r2
 8005748:	461a      	mov	r2, r3
 800574a:	4621      	mov	r1, r4
 800574c:	200d      	movs	r0, #13
 800574e:	f7ff fcef 	bl	8005130 <SEGGER_SYSVIEW_RecordU32x2>
 8005752:	e006      	b.n	8005762 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	200c      	movs	r0, #12
 800575c:	f7ff fcac 	bl	80050b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bd90      	pop	{r4, r7, pc}
 800576a:	bf00      	nop
 800576c:	20005b80 	.word	0x20005b80
 8005770:	e0001004 	.word	0xe0001004

08005774 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800577a:	f3ef 8311 	mrs	r3, BASEPRI
 800577e:	f04f 0120 	mov.w	r1, #32
 8005782:	f381 8811 	msr	BASEPRI, r1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	4819      	ldr	r0, [pc, #100]	; (80057f0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800578a:	f7ff f9c7 	bl	8004b1c <_PreparePacket>
 800578e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e00b      	b.n	80057c0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	6179      	str	r1, [r7, #20]
 80057b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	09db      	lsrs	r3, r3, #7
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b7f      	cmp	r3, #127	; 0x7f
 80057c4:	d8f0      	bhi.n	80057a8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	617a      	str	r2, [r7, #20]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80057d6:	2202      	movs	r2, #2
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	68b8      	ldr	r0, [r7, #8]
 80057dc:	f7ff fa8c 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f383 8811 	msr	BASEPRI, r3
}
 80057e6:	bf00      	nop
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20005bb0 	.word	0x20005bb0
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005802:	f04f 0120 	mov.w	r1, #32
 8005806:	f381 8811 	msr	BASEPRI, r1
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	4807      	ldr	r0, [pc, #28]	; (800582c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800580e:	f7ff f985 	bl	8004b1c <_PreparePacket>
 8005812:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005814:	2203      	movs	r2, #3
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6838      	ldr	r0, [r7, #0]
 800581a:	f7ff fa6d 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f383 8811 	msr	BASEPRI, r3
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20005bb0 	.word	0x20005bb0

08005830 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005836:	f3ef 8311 	mrs	r3, BASEPRI
 800583a:	f04f 0120 	mov.w	r1, #32
 800583e:	f381 8811 	msr	BASEPRI, r1
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	4807      	ldr	r0, [pc, #28]	; (8005864 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005846:	f7ff f969 	bl	8004b1c <_PreparePacket>
 800584a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800584c:	2212      	movs	r2, #18
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6838      	ldr	r0, [r7, #0]
 8005852:	f7ff fa51 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20005bb0 	.word	0x20005bb0

08005868 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800586e:	f3ef 8311 	mrs	r3, BASEPRI
 8005872:	f04f 0120 	mov.w	r1, #32
 8005876:	f381 8811 	msr	BASEPRI, r1
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	4807      	ldr	r0, [pc, #28]	; (800589c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800587e:	f7ff f94d 	bl	8004b1c <_PreparePacket>
 8005882:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005884:	2211      	movs	r2, #17
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6838      	ldr	r0, [r7, #0]
 800588a:	f7ff fa35 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f383 8811 	msr	BASEPRI, r3
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20005bb0 	.word	0x20005bb0

080058a0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058a8:	f3ef 8311 	mrs	r3, BASEPRI
 80058ac:	f04f 0120 	mov.w	r1, #32
 80058b0:	f381 8811 	msr	BASEPRI, r1
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	4819      	ldr	r0, [pc, #100]	; (800591c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80058b8:	f7ff f930 	bl	8004b1c <_PreparePacket>
 80058bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e00b      	b.n	80058ee <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	61f9      	str	r1, [r7, #28]
 80058e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	09db      	lsrs	r3, r3, #7
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b7f      	cmp	r3, #127	; 0x7f
 80058f2:	d8f0      	bhi.n	80058d6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005904:	2208      	movs	r2, #8
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	6938      	ldr	r0, [r7, #16]
 800590a:	f7ff f9f5 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f383 8811 	msr	BASEPRI, r3
}
 8005914:	bf00      	nop
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20005bb0 	.word	0x20005bb0
 8005920:	20005b80 	.word	0x20005b80

08005924 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800592c:	f3ef 8311 	mrs	r3, BASEPRI
 8005930:	f04f 0120 	mov.w	r1, #32
 8005934:	f381 8811 	msr	BASEPRI, r1
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	4819      	ldr	r0, [pc, #100]	; (80059a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800593c:	f7ff f8ee 	bl	8004b1c <_PreparePacket>
 8005940:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005946:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e00b      	b.n	8005972 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	61f9      	str	r1, [r7, #28]
 8005964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b7f      	cmp	r3, #127	; 0x7f
 8005976:	d8f0      	bhi.n	800595a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	61fa      	str	r2, [r7, #28]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005988:	2204      	movs	r2, #4
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	6938      	ldr	r0, [r7, #16]
 800598e:	f7ff f9b3 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f383 8811 	msr	BASEPRI, r3
}
 8005998:	bf00      	nop
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20005bb0 	.word	0x20005bb0
 80059a4:	20005b80 	.word	0x20005b80

080059a8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059b0:	f3ef 8311 	mrs	r3, BASEPRI
 80059b4:	f04f 0120 	mov.w	r1, #32
 80059b8:	f381 8811 	msr	BASEPRI, r1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	4819      	ldr	r0, [pc, #100]	; (8005a24 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80059c0:	f7ff f8ac 	bl	8004b1c <_PreparePacket>
 80059c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e00b      	b.n	80059f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1c59      	adds	r1, r3, #1
 80059e6:	61f9      	str	r1, [r7, #28]
 80059e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	09db      	lsrs	r3, r3, #7
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b7f      	cmp	r3, #127	; 0x7f
 80059fa:	d8f0      	bhi.n	80059de <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a0c:	2206      	movs	r2, #6
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	6938      	ldr	r0, [r7, #16]
 8005a12:	f7ff f971 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f383 8811 	msr	BASEPRI, r3
}
 8005a1c:	bf00      	nop
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20005bb0 	.word	0x20005bb0
 8005a28:	20005b80 	.word	0x20005b80

08005a2c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a36:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3a:	f04f 0120 	mov.w	r1, #32
 8005a3e:	f381 8811 	msr	BASEPRI, r1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	4827      	ldr	r0, [pc, #156]	; (8005ae4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005a46:	f7ff f869 	bl	8004b1c <_PreparePacket>
 8005a4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	e00b      	b.n	8005a7c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a80:	d8f0      	bhi.n	8005a64 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	627a      	str	r2, [r7, #36]	; 0x24
 8005a88:	6a3a      	ldr	r2, [r7, #32]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	e00b      	b.n	8005ab4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	61f9      	str	r1, [r7, #28]
 8005aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab8:	d8f0      	bhi.n	8005a9c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	61fa      	str	r2, [r7, #28]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005aca:	2207      	movs	r2, #7
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	6938      	ldr	r0, [r7, #16]
 8005ad0:	f7ff f912 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f383 8811 	msr	BASEPRI, r3
}
 8005ada:	bf00      	nop
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20005bb0 	.word	0x20005bb0
 8005ae8:	20005b80 	.word	0x20005b80

08005aec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d077      	beq.n	8005bee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005afe:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b04:	2300      	movs	r3, #0
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b08:	e008      	b.n	8005b1c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	3301      	adds	r3, #1
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3f2      	bcc.n	8005b0a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b24:	e000      	b.n	8005b28 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b26:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d055      	beq.n	8005bda <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b32:	f04f 0120 	mov.w	r1, #32
 8005b36:	f381 8811 	msr	BASEPRI, r1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	482f      	ldr	r0, [pc, #188]	; (8005bfc <SEGGER_SYSVIEW_SendModule+0x110>)
 8005b3e:	f7fe ffed 	bl	8004b1c <_PreparePacket>
 8005b42:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	e00b      	b.n	8005b6a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	09db      	lsrs	r3, r3, #7
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6e:	d8f0      	bhi.n	8005b52 <SEGGER_SYSVIEW_SendModule+0x66>
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	627a      	str	r2, [r7, #36]	; 0x24
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e00b      	b.n	8005ba4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	61f9      	str	r1, [r7, #28]
 8005b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	09db      	lsrs	r3, r3, #7
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba8:	d8f0      	bhi.n	8005b8c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	61fa      	str	r2, [r7, #28]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2280      	movs	r2, #128	; 0x80
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7fe ff7a 	bl	8004abc <_EncodeStr>
 8005bc8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005bca:	2216      	movs	r2, #22
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f7ff f892 	bl	8004cf8 <_SendPacket>
      RECORD_END();
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <SEGGER_SYSVIEW_SendModule+0x102>
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4798      	blx	r3
    }
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3730      	adds	r7, #48	; 0x30
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20005ba8 	.word	0x20005ba8
 8005bfc:	20005bb0 	.word	0x20005bb0

08005c00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f2      	bne.n	8005c14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20005ba8 	.word	0x20005ba8

08005c3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c42:	f3ef 8311 	mrs	r3, BASEPRI
 8005c46:	f04f 0120 	mov.w	r1, #32
 8005c4a:	f381 8811 	msr	BASEPRI, r1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	4817      	ldr	r0, [pc, #92]	; (8005cb0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005c52:	f7fe ff63 	bl	8004b1c <_PreparePacket>
 8005c56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e00b      	b.n	8005c80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	6179      	str	r1, [r7, #20]
 8005c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	09db      	lsrs	r3, r3, #7
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b7f      	cmp	r3, #127	; 0x7f
 8005c84:	d8f0      	bhi.n	8005c68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	617a      	str	r2, [r7, #20]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005c96:	221b      	movs	r2, #27
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f7ff f82c 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f383 8811 	msr	BASEPRI, r3
}
 8005ca6:	bf00      	nop
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20005bb0 	.word	0x20005bb0
 8005cb4:	20005bac 	.word	0x20005bac

08005cb8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc4:	f04f 0120 	mov.w	r1, #32
 8005cc8:	f381 8811 	msr	BASEPRI, r1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	4827      	ldr	r0, [pc, #156]	; (8005d6c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005cd0:	f7fe ff24 	bl	8004b1c <_PreparePacket>
 8005cd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f7fe feee 	bl	8004abc <_EncodeStr>
 8005ce0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	623b      	str	r3, [r7, #32]
 8005cea:	e00b      	b.n	8005d04 <SEGGER_SYSVIEW_Warn+0x4c>
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	6279      	str	r1, [r7, #36]	; 0x24
 8005cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b7f      	cmp	r3, #127	; 0x7f
 8005d08:	d8f0      	bhi.n	8005cec <SEGGER_SYSVIEW_Warn+0x34>
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e00b      	b.n	8005d3c <SEGGER_SYSVIEW_Warn+0x84>
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	1c59      	adds	r1, r3, #1
 8005d2c:	61f9      	str	r1, [r7, #28]
 8005d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	09db      	lsrs	r3, r3, #7
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d40:	d8f0      	bhi.n	8005d24 <SEGGER_SYSVIEW_Warn+0x6c>
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	61fa      	str	r2, [r7, #28]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d52:	221a      	movs	r2, #26
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f7fe ffce 	bl	8004cf8 <_SendPacket>
  RECORD_END();
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f383 8811 	msr	BASEPRI, r3
}
 8005d62:	bf00      	nop
 8005d64:	3728      	adds	r7, #40	; 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20005bb0 	.word	0x20005bb0

08005d70 <__libc_init_array>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4d0d      	ldr	r5, [pc, #52]	; (8005da8 <__libc_init_array+0x38>)
 8005d74:	4c0d      	ldr	r4, [pc, #52]	; (8005dac <__libc_init_array+0x3c>)
 8005d76:	1b64      	subs	r4, r4, r5
 8005d78:	10a4      	asrs	r4, r4, #2
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	42a6      	cmp	r6, r4
 8005d7e:	d109      	bne.n	8005d94 <__libc_init_array+0x24>
 8005d80:	4d0b      	ldr	r5, [pc, #44]	; (8005db0 <__libc_init_array+0x40>)
 8005d82:	4c0c      	ldr	r4, [pc, #48]	; (8005db4 <__libc_init_array+0x44>)
 8005d84:	f000 f83e 	bl	8005e04 <_init>
 8005d88:	1b64      	subs	r4, r4, r5
 8005d8a:	10a4      	asrs	r4, r4, #2
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	42a6      	cmp	r6, r4
 8005d90:	d105      	bne.n	8005d9e <__libc_init_array+0x2e>
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d98:	4798      	blx	r3
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	e7ee      	b.n	8005d7c <__libc_init_array+0xc>
 8005d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da2:	4798      	blx	r3
 8005da4:	3601      	adds	r6, #1
 8005da6:	e7f2      	b.n	8005d8e <__libc_init_array+0x1e>
 8005da8:	08005f9c 	.word	0x08005f9c
 8005dac:	08005f9c 	.word	0x08005f9c
 8005db0:	08005f9c 	.word	0x08005f9c
 8005db4:	08005fa0 	.word	0x08005fa0

08005db8 <memcmp>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	3901      	subs	r1, #1
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4290      	cmp	r0, r2
 8005dc0:	d101      	bne.n	8005dc6 <memcmp+0xe>
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e005      	b.n	8005dd2 <memcmp+0x1a>
 8005dc6:	7803      	ldrb	r3, [r0, #0]
 8005dc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	d001      	beq.n	8005dd4 <memcmp+0x1c>
 8005dd0:	1b18      	subs	r0, r3, r4
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	e7f2      	b.n	8005dbe <memcmp+0x6>

08005dd8 <memcpy>:
 8005dd8:	440a      	add	r2, r1
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005de0:	d100      	bne.n	8005de4 <memcpy+0xc>
 8005de2:	4770      	bx	lr
 8005de4:	b510      	push	{r4, lr}
 8005de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dee:	4291      	cmp	r1, r2
 8005df0:	d1f9      	bne.n	8005de6 <memcpy+0xe>
 8005df2:	bd10      	pop	{r4, pc}

08005df4 <memset>:
 8005df4:	4402      	add	r2, r0
 8005df6:	4603      	mov	r3, r0
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d100      	bne.n	8005dfe <memset+0xa>
 8005dfc:	4770      	bx	lr
 8005dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005e02:	e7f9      	b.n	8005df8 <memset+0x4>

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
